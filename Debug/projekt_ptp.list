
projekt_ptp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af7c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800b160  0800b160  0000c160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b628  0800b628  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b628  0800b628  0000c628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b630  0800b630  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b630  0800b630  0000c630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b634  0800b634  0000c634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b638  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001d4  0800b80c  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800b80c  0000d4b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001793e  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d9d  00000000  00000000  00024b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  000278e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001018  00000000  00000000  00028d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ec8  00000000  00000000  00029d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001822b  00000000  00000000  00051c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100a41  00000000  00000000  00069e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a8a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c6c  00000000  00000000  0016a8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00171554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b144 	.word	0x0800b144

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800b144 	.word	0x0800b144

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <read_register>:
#include "bmp280.h"

// Function to read data from a register
static bool read_register(BMP280_HandleTypedef *dev, uint8_t reg, uint8_t *value, uint16_t len) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af04      	add	r7, sp, #16
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	461a      	mov	r2, r3
 8001040:	460b      	mov	r3, r1
 8001042:	72fb      	strb	r3, [r7, #11]
 8001044:	4613      	mov	r3, r2
 8001046:	813b      	strh	r3, [r7, #8]
    return HAL_I2C_Mem_Read(dev->i2c, dev->addr << 1, reg, I2C_MEMADD_SIZE_8BIT, value, len, 100) == HAL_OK;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	b299      	uxth	r1, r3
 8001054:	7afb      	ldrb	r3, [r7, #11]
 8001056:	b29a      	uxth	r2, r3
 8001058:	2364      	movs	r3, #100	@ 0x64
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	893b      	ldrh	r3, [r7, #8]
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2301      	movs	r3, #1
 8001066:	f001 fc11 	bl	800288c <HAL_I2C_Mem_Read>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	bf0c      	ite	eq
 8001070:	2301      	moveq	r3, #1
 8001072:	2300      	movne	r3, #0
 8001074:	b2db      	uxtb	r3, r3
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <write_register>:

// Function to write data to a register
static bool write_register(BMP280_HandleTypedef *dev, uint8_t reg, uint8_t value) {
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af04      	add	r7, sp, #16
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	70fb      	strb	r3, [r7, #3]
 800108a:	4613      	mov	r3, r2
 800108c:	70bb      	strb	r3, [r7, #2]
    return HAL_I2C_Mem_Write(dev->i2c, dev->addr << 1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100) == HAL_OK;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	b299      	uxth	r1, r3
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	b29a      	uxth	r2, r3
 800109e:	2364      	movs	r3, #100	@ 0x64
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	1cbb      	adds	r3, r7, #2
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	f001 fada 	bl	8002664 <HAL_I2C_Mem_Write>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	bf0c      	ite	eq
 80010b6:	2301      	moveq	r3, #1
 80010b8:	2300      	movne	r3, #0
 80010ba:	b2db      	uxtb	r3, r3
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <read_calibration_data>:

// Function to read calibration data from the sensor
static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    uint8_t calib[24];
    if (!read_register(dev, 0x88, calib, 24)) {
 80010cc:	f107 0208 	add.w	r2, r7, #8
 80010d0:	2318      	movs	r3, #24
 80010d2:	2188      	movs	r1, #136	@ 0x88
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ffad 	bl	8001034 <read_register>
 80010da:	4603      	mov	r3, r0
 80010dc:	f083 0301 	eor.w	r3, r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <read_calibration_data+0x26>
        return false;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e01c      	b.n	8001124 <read_calibration_data+0x60>
    }

    dev->dig_T1 = (calib[1] << 8) | calib[0];
 80010ea:	7a7b      	ldrb	r3, [r7, #9]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	7a3b      	ldrb	r3, [r7, #8]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	801a      	strh	r2, [r3, #0]
    dev->dig_T2 = (calib[3] << 8) | calib[2];
 80010fe:	7afb      	ldrb	r3, [r7, #11]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b21a      	sxth	r2, r3
 8001104:	7abb      	ldrb	r3, [r7, #10]
 8001106:	b21b      	sxth	r3, r3
 8001108:	4313      	orrs	r3, r2
 800110a:	b21a      	sxth	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	805a      	strh	r2, [r3, #2]
    dev->dig_T3 = (calib[5] << 8) | calib[4];
 8001110:	7b7b      	ldrb	r3, [r7, #13]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b21a      	sxth	r2, r3
 8001116:	7b3b      	ldrb	r3, [r7, #12]
 8001118:	b21b      	sxth	r3, r3
 800111a:	4313      	orrs	r3, r2
 800111c:	b21a      	sxth	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	809a      	strh	r2, [r3, #4]

    return true;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <bmp280_init_default_params>:

// Initialize the sensor with default parameters
void bmp280_init_default_params(bmp280_params_t *params) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    params->mode = BMP280_MODE_NORMAL;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2203      	movs	r2, #3
 8001138:	701a      	strb	r2, [r3, #0]
    params->filter = BMP280_FILTER_OFF;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	705a      	strb	r2, [r3, #1]
    params->oversampling_pressure = BMP280_SKIPPED;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	709a      	strb	r2, [r3, #2]
    params->oversampling_temperature = BMP280_STANDARD;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2203      	movs	r2, #3
 800114a:	70da      	strb	r2, [r3, #3]
    params->oversampling_humidity = BMP280_SKIPPED;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	711a      	strb	r2, [r3, #4]
    params->standby = BMP280_STANDBY_250;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2203      	movs	r2, #3
 8001156:	715a      	strb	r2, [r3, #5]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <bmp280_init>:

// Initialize the BMP280 sensor
bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
    dev->params = *params;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	332c      	adds	r3, #44	@ 0x2c
 8001174:	6810      	ldr	r0, [r2, #0]
 8001176:	6018      	str	r0, [r3, #0]
 8001178:	8892      	ldrh	r2, [r2, #4]
 800117a:	809a      	strh	r2, [r3, #4]

    uint8_t chip_id;
    if (!read_register(dev, 0xD0, &chip_id, 1) || (chip_id != BMP280_CHIP_ID && chip_id != BME280_CHIP_ID)) {
 800117c:	f107 020d 	add.w	r2, r7, #13
 8001180:	2301      	movs	r3, #1
 8001182:	21d0      	movs	r1, #208	@ 0xd0
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff55 	bl	8001034 <read_register>
 800118a:	4603      	mov	r3, r0
 800118c:	f083 0301 	eor.w	r3, r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d105      	bne.n	80011a2 <bmp280_init+0x3e>
 8001196:	7b7b      	ldrb	r3, [r7, #13]
 8001198:	2b58      	cmp	r3, #88	@ 0x58
 800119a:	d004      	beq.n	80011a6 <bmp280_init+0x42>
 800119c:	7b7b      	ldrb	r3, [r7, #13]
 800119e:	2b60      	cmp	r3, #96	@ 0x60
 80011a0:	d001      	beq.n	80011a6 <bmp280_init+0x42>
        return false;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e056      	b.n	8001254 <bmp280_init+0xf0>
    }
    dev->id = chip_id;
 80011a6:	7b7a      	ldrb	r2, [r7, #13]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

    if (!write_register(dev, 0xE0, 0xB6)) {
 80011ae:	22b6      	movs	r2, #182	@ 0xb6
 80011b0:	21e0      	movs	r1, #224	@ 0xe0
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ff63 	bl	800107e <write_register>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f083 0301 	eor.w	r3, r3, #1
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <bmp280_init+0x64>
        return false;
 80011c4:	2300      	movs	r3, #0
 80011c6:	e045      	b.n	8001254 <bmp280_init+0xf0>
    }
    HAL_Delay(100);
 80011c8:	2064      	movs	r0, #100	@ 0x64
 80011ca:	f000 fdf3 	bl	8001db4 <HAL_Delay>

    if (!read_calibration_data(dev)) {
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ff78 	bl	80010c4 <read_calibration_data>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f083 0301 	eor.w	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <bmp280_init+0x80>
        return false;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e037      	b.n	8001254 <bmp280_init+0xf0>
    }

    uint8_t config = (params->standby << 5) | (params->filter << 2);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	795b      	ldrb	r3, [r3, #5]
 80011e8:	015b      	lsls	r3, r3, #5
 80011ea:	b25a      	sxtb	r2, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	785b      	ldrb	r3, [r3, #1]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	b25b      	sxtb	r3, r3
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b25b      	sxtb	r3, r3
 80011f8:	73fb      	strb	r3, [r7, #15]
    if (!write_register(dev, 0xF5, config)) {
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	461a      	mov	r2, r3
 80011fe:	21f5      	movs	r1, #245	@ 0xf5
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ff3c 	bl	800107e <write_register>
 8001206:	4603      	mov	r3, r0
 8001208:	f083 0301 	eor.w	r3, r3, #1
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <bmp280_init+0xb2>
        return false;
 8001212:	2300      	movs	r3, #0
 8001214:	e01e      	b.n	8001254 <bmp280_init+0xf0>
    }

    uint8_t ctrl_meas = (params->oversampling_temperature << 5) | (params->oversampling_pressure << 2) | params->mode;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	78db      	ldrb	r3, [r3, #3]
 800121a:	015b      	lsls	r3, r3, #5
 800121c:	b25a      	sxtb	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	789b      	ldrb	r3, [r3, #2]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	b25b      	sxtb	r3, r3
 8001226:	4313      	orrs	r3, r2
 8001228:	b25a      	sxtb	r2, r3
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b25b      	sxtb	r3, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	b25b      	sxtb	r3, r3
 8001234:	73bb      	strb	r3, [r7, #14]
    if (!write_register(dev, 0xF4, ctrl_meas)) {
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	461a      	mov	r2, r3
 800123a:	21f4      	movs	r1, #244	@ 0xf4
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff1e 	bl	800107e <write_register>
 8001242:	4603      	mov	r3, r0
 8001244:	f083 0301 	eor.w	r3, r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <bmp280_init+0xee>
        return false;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <bmp280_init+0xf0>
    }

    return true;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <read_raw_temperature>:

// Read the raw temperature data
static bool read_raw_temperature(BMP280_HandleTypedef *dev, int32_t *temperature) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
    uint8_t data[3];
    if (!read_register(dev, 0xFA, data, 3)) {
 8001266:	f107 020c 	add.w	r2, r7, #12
 800126a:	2303      	movs	r3, #3
 800126c:	21fa      	movs	r1, #250	@ 0xfa
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fee0 	bl	8001034 <read_register>
 8001274:	4603      	mov	r3, r0
 8001276:	f083 0301 	eor.w	r3, r3, #1
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <read_raw_temperature+0x28>
        return false;
 8001280:	2300      	movs	r3, #0
 8001282:	e00c      	b.n	800129e <read_raw_temperature+0x42>
    }
    *temperature = (int32_t)(((uint32_t)(data[0]) << 12) | ((uint32_t)(data[1]) << 4) | ((uint32_t)data[2] >> 4));
 8001284:	7b3b      	ldrb	r3, [r7, #12]
 8001286:	031a      	lsls	r2, r3, #12
 8001288:	7b7b      	ldrb	r3, [r7, #13]
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	4313      	orrs	r3, r2
 800128e:	7bba      	ldrb	r2, [r7, #14]
 8001290:	0912      	lsrs	r2, r2, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	4313      	orrs	r3, r2
 8001296:	461a      	mov	r2, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	601a      	str	r2, [r3, #0]
    return true;
 800129c:	2301      	movs	r3, #1
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <compensate_temperature>:

// Compensate the temperature using calibration data
static int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_T) {
 80012a6:	b480      	push	{r7}
 80012a8:	b087      	sub	sp, #28
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	6039      	str	r1, [r7, #0]
    int32_t var1, var2, T;
    var1 = ((((adc_T >> 3) - ((int32_t)dev->dig_T1 << 1))) * ((int32_t)dev->dig_T2)) >> 11;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	10da      	asrs	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80012c2:	fb02 f303 	mul.w	r3, r2, r3
 80012c6:	12db      	asrs	r3, r3, #11
 80012c8:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_T >> 4) - ((int32_t)dev->dig_T1)) * ((adc_T >> 4) - ((int32_t)dev->dig_T1))) >> 12) * ((int32_t)dev->dig_T3)) >> 14;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	111b      	asrs	r3, r3, #4
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	8812      	ldrh	r2, [r2, #0]
 80012d2:	1a9b      	subs	r3, r3, r2
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	1112      	asrs	r2, r2, #4
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	8809      	ldrh	r1, [r1, #0]
 80012dc:	1a52      	subs	r2, r2, r1
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	131b      	asrs	r3, r3, #12
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80012ea:	fb02 f303 	mul.w	r3, r2, r3
 80012ee:	139b      	asrs	r3, r3, #14
 80012f0:	613b      	str	r3, [r7, #16]
    T = var1 + var2;
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
    return (T * 5 + 128) >> 8;
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	3380      	adds	r3, #128	@ 0x80
 8001304:	121b      	asrs	r3, r3, #8
}
 8001306:	4618      	mov	r0, r3
 8001308:	371c      	adds	r7, #28
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <bmp280_read_fixed_temperature>:

// Read the temperature in degrees Celsius (times 100)
bool bmp280_read_fixed_temperature(BMP280_HandleTypedef *dev, int32_t *temperature) {
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	6039      	str	r1, [r7, #0]
    int32_t raw_temperature;
    if (!read_raw_temperature(dev, &raw_temperature)) {
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4619      	mov	r1, r3
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff9a 	bl	800125c <read_raw_temperature>
 8001328:	4603      	mov	r3, r0
 800132a:	f083 0301 	eor.w	r3, r3, #1
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <bmp280_read_fixed_temperature+0x26>
        return false;
 8001334:	2300      	movs	r3, #0
 8001336:	e008      	b.n	800134a <bmp280_read_fixed_temperature+0x38>
    }
    *temperature = compensate_temperature(dev, raw_temperature);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4619      	mov	r1, r3
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ffb2 	bl	80012a6 <compensate_temperature>
 8001342:	4602      	mov	r2, r0
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	601a      	str	r2, [r3, #0]
    return true;
 8001348:	2301      	movs	r3, #1
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	b5b0      	push	{r4, r5, r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135a:	f000 fcba 	bl	8001cd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135e:	f000 f847 	bl	80013f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001362:	f000 f989 	bl	8001678 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001366:	f000 f8c3 	bl	80014f0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800136a:	f000 f939 	bl	80015e0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800136e:	f000 f8ff 	bl	8001570 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001372:	f000 f888 	bl	8001486 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001376:	4818      	ldr	r0, [pc, #96]	@ (80013d8 <main+0x84>)
 8001378:	f003 fd5c 	bl	8004e34 <HAL_TIM_Base_Start_IT>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 800137c:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <main+0x88>)
 800137e:	2276      	movs	r2, #118	@ 0x76
 8001380:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c1;
 8001382:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <main+0x88>)
 8001384:	4a16      	ldr	r2, [pc, #88]	@ (80013e0 <main+0x8c>)
 8001386:	629a      	str	r2, [r3, #40]	@ 0x28
  bmp280_init_default_params(&bmp280_params);
 8001388:	4816      	ldr	r0, [pc, #88]	@ (80013e4 <main+0x90>)
 800138a:	f7ff fecf 	bl	800112c <bmp280_init_default_params>

  if (!bmp280_init(&bmp280, &bmp280_params)) {
 800138e:	4915      	ldr	r1, [pc, #84]	@ (80013e4 <main+0x90>)
 8001390:	4812      	ldr	r0, [pc, #72]	@ (80013dc <main+0x88>)
 8001392:	f7ff fee7 	bl	8001164 <bmp280_init>
 8001396:	4603      	mov	r3, r0
 8001398:	f083 0301 	eor.w	r3, r3, #1
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d019      	beq.n	80013d6 <main+0x82>
      char msg[] = "BMP280 initialization failed\r\n";
 80013a2:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <main+0x94>)
 80013a4:	463c      	mov	r4, r7
 80013a6:	461d      	mov	r5, r3
 80013a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013b0:	c407      	stmia	r4!, {r0, r1, r2}
 80013b2:	8023      	strh	r3, [r4, #0]
 80013b4:	3402      	adds	r4, #2
 80013b6:	0c1b      	lsrs	r3, r3, #16
 80013b8:	7023      	strb	r3, [r4, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80013ba:	463b      	mov	r3, r7
 80013bc:	4618      	mov	r0, r3
 80013be:	f7fe ff7f 	bl	80002c0 <strlen>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	4639      	mov	r1, r7
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013cc:	4807      	ldr	r0, [pc, #28]	@ (80013ec <main+0x98>)
 80013ce:	f004 f901 	bl	80055d4 <HAL_UART_Transmit>
      while (1);
 80013d2:	bf00      	nop
 80013d4:	e7fd      	b.n	80013d2 <main+0x7e>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <main+0x82>
 80013d8:	20000244 	.word	0x20000244
 80013dc:	20000324 	.word	0x20000324
 80013e0:	200001f0 	.word	0x200001f0
 80013e4:	20000358 	.word	0x20000358
 80013e8:	0800b160 	.word	0x0800b160
 80013ec:	20000290 	.word	0x20000290

080013f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b094      	sub	sp, #80	@ 0x50
 80013f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f6:	f107 0318 	add.w	r3, r7, #24
 80013fa:	2238      	movs	r2, #56	@ 0x38
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f006 fac9 	bl	8007996 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001412:	2000      	movs	r0, #0
 8001414:	f002 fc86 	bl	8003d24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001418:	2302      	movs	r3, #2
 800141a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800141c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001422:	2340      	movs	r3, #64	@ 0x40
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001426:	2302      	movs	r3, #2
 8001428:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800142a:	2302      	movs	r3, #2
 800142c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800142e:	2304      	movs	r3, #4
 8001430:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001432:	2355      	movs	r3, #85	@ 0x55
 8001434:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001436:	2302      	movs	r3, #2
 8001438:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800143a:	2302      	movs	r3, #2
 800143c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800143e:	2302      	movs	r3, #2
 8001440:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001442:	f107 0318 	add.w	r3, r7, #24
 8001446:	4618      	mov	r0, r3
 8001448:	f002 fd20 	bl	8003e8c <HAL_RCC_OscConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001452:	f000 f9db 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001456:	230f      	movs	r3, #15
 8001458:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145a:	2303      	movs	r3, #3
 800145c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2104      	movs	r1, #4
 800146e:	4618      	mov	r0, r3
 8001470:	f003 f81e 	bl	80044b0 <HAL_RCC_ClockConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800147a:	f000 f9c7 	bl	800180c <Error_Handler>
  }
}
 800147e:	bf00      	nop
 8001480:	3750      	adds	r7, #80	@ 0x50
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	2005      	movs	r0, #5
 8001490:	f000 fd8d 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001494:	2005      	movs	r0, #5
 8001496:	f000 fda4 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	201f      	movs	r0, #31
 80014a0:	f000 fd85 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014a4:	201f      	movs	r0, #31
 80014a6:	f000 fd9c 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	2020      	movs	r0, #32
 80014b0:	f000 fd7d 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80014b4:	2020      	movs	r0, #32
 80014b6:	f000 fd94 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	2026      	movs	r0, #38	@ 0x26
 80014c0:	f000 fd75 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014c4:	2026      	movs	r0, #38	@ 0x26
 80014c6:	f000 fd8c 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	2028      	movs	r0, #40	@ 0x28
 80014d0:	f000 fd6d 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014d4:	2028      	movs	r0, #40	@ 0x28
 80014d6:	f000 fd84 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	2036      	movs	r0, #54	@ 0x36
 80014e0:	f000 fd65 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014e4:	2036      	movs	r0, #54	@ 0x36
 80014e6:	f000 fd7c 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <MX_I2C1_Init+0x74>)
 80014f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001568 <MX_I2C1_Init+0x78>)
 80014f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001564 <MX_I2C1_Init+0x74>)
 80014fc:	4a1b      	ldr	r2, [pc, #108]	@ (800156c <MX_I2C1_Init+0x7c>)
 80014fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001500:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <MX_I2C1_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001506:	4b17      	ldr	r3, [pc, #92]	@ (8001564 <MX_I2C1_Init+0x74>)
 8001508:	2201      	movs	r2, #1
 800150a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800150c:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <MX_I2C1_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001512:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <MX_I2C1_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <MX_I2C1_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_I2C1_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001524:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <MX_I2C1_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800152a:	480e      	ldr	r0, [pc, #56]	@ (8001564 <MX_I2C1_Init+0x74>)
 800152c:	f000 ffff 	bl	800252e <HAL_I2C_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001536:	f000 f969 	bl	800180c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800153a:	2100      	movs	r1, #0
 800153c:	4809      	ldr	r0, [pc, #36]	@ (8001564 <MX_I2C1_Init+0x74>)
 800153e:	f002 fb59 	bl	8003bf4 <HAL_I2CEx_ConfigAnalogFilter>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001548:	f000 f960 	bl	800180c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800154c:	2100      	movs	r1, #0
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <MX_I2C1_Init+0x74>)
 8001550:	f002 fb9b 	bl	8003c8a <HAL_I2CEx_ConfigDigitalFilter>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800155a:	f000 f957 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200001f0 	.word	0x200001f0
 8001568:	40005400 	.word	0x40005400
 800156c:	30a0a7fb 	.word	0x30a0a7fb

08001570 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001580:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <MX_TIM6_Init+0x68>)
 8001582:	4a16      	ldr	r2, [pc, #88]	@ (80015dc <MX_TIM6_Init+0x6c>)
 8001584:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16999;
 8001586:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <MX_TIM6_Init+0x68>)
 8001588:	f244 2267 	movw	r2, #16999	@ 0x4267
 800158c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <MX_TIM6_Init+0x68>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001594:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <MX_TIM6_Init+0x68>)
 8001596:	f242 720f 	movw	r2, #9999	@ 0x270f
 800159a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159c:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <MX_TIM6_Init+0x68>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015a2:	480d      	ldr	r0, [pc, #52]	@ (80015d8 <MX_TIM6_Init+0x68>)
 80015a4:	f003 fbee 	bl	8004d84 <HAL_TIM_Base_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80015ae:	f000 f92d 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	4806      	ldr	r0, [pc, #24]	@ (80015d8 <MX_TIM6_Init+0x68>)
 80015c0:	f003 fedc 	bl	800537c <HAL_TIMEx_MasterConfigSynchronization>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80015ca:	f000 f91f 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000244 	.word	0x20000244
 80015dc:	40001000 	.word	0x40001000

080015e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e4:	4b22      	ldr	r3, [pc, #136]	@ (8001670 <MX_USART2_UART_Init+0x90>)
 80015e6:	4a23      	ldr	r2, [pc, #140]	@ (8001674 <MX_USART2_UART_Init+0x94>)
 80015e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ea:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <MX_USART2_UART_Init+0x90>)
 80015ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001670 <MX_USART2_UART_Init+0x90>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001670 <MX_USART2_UART_Init+0x90>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <MX_USART2_UART_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001604:	4b1a      	ldr	r3, [pc, #104]	@ (8001670 <MX_USART2_UART_Init+0x90>)
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <MX_USART2_UART_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	4b17      	ldr	r3, [pc, #92]	@ (8001670 <MX_USART2_UART_Init+0x90>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001616:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <MX_USART2_UART_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800161c:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <MX_USART2_UART_Init+0x90>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001622:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <MX_USART2_UART_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001628:	4811      	ldr	r0, [pc, #68]	@ (8001670 <MX_USART2_UART_Init+0x90>)
 800162a:	f003 ff83 	bl	8005534 <HAL_UART_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001634:	f000 f8ea 	bl	800180c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001638:	2100      	movs	r1, #0
 800163a:	480d      	ldr	r0, [pc, #52]	@ (8001670 <MX_USART2_UART_Init+0x90>)
 800163c:	f005 f94f 	bl	80068de <HAL_UARTEx_SetTxFifoThreshold>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001646:	f000 f8e1 	bl	800180c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800164a:	2100      	movs	r1, #0
 800164c:	4808      	ldr	r0, [pc, #32]	@ (8001670 <MX_USART2_UART_Init+0x90>)
 800164e:	f005 f984 	bl	800695a <HAL_UARTEx_SetRxFifoThreshold>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001658:	f000 f8d8 	bl	800180c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	@ (8001670 <MX_USART2_UART_Init+0x90>)
 800165e:	f005 f905 	bl	800686c <HAL_UARTEx_DisableFifoMode>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001668:	f000 f8d0 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000290 	.word	0x20000290
 8001674:	40004400 	.word	0x40004400

08001678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	@ 0x28
 800167c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168e:	4b2b      	ldr	r3, [pc, #172]	@ (800173c <MX_GPIO_Init+0xc4>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001692:	4a2a      	ldr	r2, [pc, #168]	@ (800173c <MX_GPIO_Init+0xc4>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169a:	4b28      	ldr	r3, [pc, #160]	@ (800173c <MX_GPIO_Init+0xc4>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a6:	4b25      	ldr	r3, [pc, #148]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016aa:	4a24      	ldr	r2, [pc, #144]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016ac:	f043 0320 	orr.w	r3, r3, #32
 80016b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b2:	4b22      	ldr	r3, [pc, #136]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b6:	f003 0320 	and.w	r3, r3, #32
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c2:	4a1e      	ldr	r2, [pc, #120]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ca:	4b1c      	ldr	r3, [pc, #112]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	4b19      	ldr	r3, [pc, #100]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016da:	4a18      	ldr	r2, [pc, #96]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e2:	4b16      	ldr	r3, [pc, #88]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2120      	movs	r1, #32
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f6:	f000 fedf 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001700:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	480b      	ldr	r0, [pc, #44]	@ (8001740 <MX_GPIO_Init+0xc8>)
 8001712:	f000 fd4f 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001716:	2320      	movs	r3, #32
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001730:	f000 fd40 	bl	80021b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001734:	bf00      	nop
 8001736:	3728      	adds	r7, #40	@ 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40021000 	.word	0x40021000
 8001740:	48000800 	.word	0x48000800

08001744 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001744:	b5b0      	push	{r4, r5, r7, lr}
 8001746:	b09a      	sub	sp, #104	@ 0x68
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM6)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a27      	ldr	r2, [pc, #156]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d148      	bne.n	80017e8 <HAL_TIM_PeriodElapsedCallback+0xa4>
	{
	      if (bmp280_read_fixed_temperature(&bmp280, &temperature)) {
 8001756:	4927      	ldr	r1, [pc, #156]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001758:	4827      	ldr	r0, [pc, #156]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800175a:	f7ff fdda 	bl	8001312 <bmp280_read_fixed_temperature>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d029      	beq.n	80017b8 <HAL_TIM_PeriodElapsedCallback+0x74>
	          char msg[64];
	          sprintf(msg, "Temperature: %ld.%02ld C\r\n", temperature / 100, temperature % 100);
 8001764:	4b23      	ldr	r3, [pc, #140]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a24      	ldr	r2, [pc, #144]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800176a:	fb82 1203 	smull	r1, r2, r2, r3
 800176e:	1152      	asrs	r2, r2, #5
 8001770:	17db      	asrs	r3, r3, #31
 8001772:	1ad4      	subs	r4, r2, r3
 8001774:	4b1f      	ldr	r3, [pc, #124]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a20      	ldr	r2, [pc, #128]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800177a:	fb82 1203 	smull	r1, r2, r2, r3
 800177e:	1151      	asrs	r1, r2, #5
 8001780:	17da      	asrs	r2, r3, #31
 8001782:	1a8a      	subs	r2, r1, r2
 8001784:	2164      	movs	r1, #100	@ 0x64
 8001786:	fb01 f202 	mul.w	r2, r1, r2
 800178a:	1a9a      	subs	r2, r3, r2
 800178c:	f107 000c 	add.w	r0, r7, #12
 8001790:	4613      	mov	r3, r2
 8001792:	4622      	mov	r2, r4
 8001794:	491a      	ldr	r1, [pc, #104]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001796:	f006 f89b 	bl	80078d0 <siprintf>
	          HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fd8e 	bl	80002c0 <strlen>
 80017a4:	4603      	mov	r3, r0
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	f107 010c 	add.w	r1, r7, #12
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017b0:	4814      	ldr	r0, [pc, #80]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80017b2:	f003 ff0f 	bl	80055d4 <HAL_UART_Transmit>
	      } else {
	          char msg[] = "Temperature read failed\r\n";
	          HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	      }
	}
}
 80017b6:	e017      	b.n	80017e8 <HAL_TIM_PeriodElapsedCallback+0xa4>
	          char msg[] = "Temperature read failed\r\n";
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80017ba:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80017be:	461d      	mov	r5, r3
 80017c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017c8:	c403      	stmia	r4!, {r0, r1}
 80017ca:	8022      	strh	r2, [r4, #0]
	          HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80017cc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fd75 	bl	80002c0 <strlen>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b29a      	uxth	r2, r3
 80017da:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80017de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017e2:	4808      	ldr	r0, [pc, #32]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80017e4:	f003 fef6 	bl	80055d4 <HAL_UART_Transmit>
}
 80017e8:	bf00      	nop
 80017ea:	3768      	adds	r7, #104	@ 0x68
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bdb0      	pop	{r4, r5, r7, pc}
 80017f0:	40001000 	.word	0x40001000
 80017f4:	20000360 	.word	0x20000360
 80017f8:	20000324 	.word	0x20000324
 80017fc:	51eb851f 	.word	0x51eb851f
 8001800:	0800b180 	.word	0x0800b180
 8001804:	20000290 	.word	0x20000290
 8001808:	0800b19c 	.word	0x0800b19c

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <Error_Handler+0x8>

08001818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <HAL_MspInit+0x44>)
 8001820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001822:	4a0e      	ldr	r2, [pc, #56]	@ (800185c <HAL_MspInit+0x44>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6613      	str	r3, [r2, #96]	@ 0x60
 800182a:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <HAL_MspInit+0x44>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <HAL_MspInit+0x44>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183a:	4a08      	ldr	r2, [pc, #32]	@ (800185c <HAL_MspInit+0x44>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001840:	6593      	str	r3, [r2, #88]	@ 0x58
 8001842:	4b06      	ldr	r3, [pc, #24]	@ (800185c <HAL_MspInit+0x44>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	683b      	ldr	r3, [r7, #0]

  /* Peripheral interrupt init */

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800184e:	f002 fb0d 	bl	8003e6c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000

08001860 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b09e      	sub	sp, #120	@ 0x78
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	2254      	movs	r2, #84	@ 0x54
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f006 f888 	bl	8007996 <memset>
  if(hi2c->Instance==I2C1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a1f      	ldr	r2, [pc, #124]	@ (8001908 <HAL_I2C_MspInit+0xa8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d136      	bne.n	80018fe <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001890:	2340      	movs	r3, #64	@ 0x40
 8001892:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	4618      	mov	r0, r3
 800189e:	f003 f823 	bl	80048e8 <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80018a8:	f7ff ffb0 	bl	800180c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ac:	4b17      	ldr	r3, [pc, #92]	@ (800190c <HAL_I2C_MspInit+0xac>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b0:	4a16      	ldr	r2, [pc, #88]	@ (800190c <HAL_I2C_MspInit+0xac>)
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b8:	4b14      	ldr	r3, [pc, #80]	@ (800190c <HAL_I2C_MspInit+0xac>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80018c4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80018c8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ca:	2312      	movs	r3, #18
 80018cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018d6:	2304      	movs	r3, #4
 80018d8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018da:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018de:	4619      	mov	r1, r3
 80018e0:	480b      	ldr	r0, [pc, #44]	@ (8001910 <HAL_I2C_MspInit+0xb0>)
 80018e2:	f000 fc67 	bl	80021b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <HAL_I2C_MspInit+0xac>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ea:	4a08      	ldr	r2, [pc, #32]	@ (800190c <HAL_I2C_MspInit+0xac>)
 80018ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_I2C_MspInit+0xac>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018fe:	bf00      	nop
 8001900:	3778      	adds	r7, #120	@ 0x78
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40005400 	.word	0x40005400
 800190c:	40021000 	.word	0x40021000
 8001910:	48000400 	.word	0x48000400

08001914 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <HAL_TIM_Base_MspInit+0x38>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d10b      	bne.n	800193e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001926:	4b0a      	ldr	r3, [pc, #40]	@ (8001950 <HAL_TIM_Base_MspInit+0x3c>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192a:	4a09      	ldr	r2, [pc, #36]	@ (8001950 <HAL_TIM_Base_MspInit+0x3c>)
 800192c:	f043 0310 	orr.w	r3, r3, #16
 8001930:	6593      	str	r3, [r2, #88]	@ 0x58
 8001932:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <HAL_TIM_Base_MspInit+0x3c>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40001000 	.word	0x40001000
 8001950:	40021000 	.word	0x40021000

08001954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b09e      	sub	sp, #120	@ 0x78
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	2254      	movs	r2, #84	@ 0x54
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f006 f80e 	bl	8007996 <memset>
  if(huart->Instance==USART2)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a1f      	ldr	r2, [pc, #124]	@ (80019fc <HAL_UART_MspInit+0xa8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d136      	bne.n	80019f2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001984:	2302      	movs	r3, #2
 8001986:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	4618      	mov	r0, r3
 8001992:	f002 ffa9 	bl	80048e8 <HAL_RCCEx_PeriphCLKConfig>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800199c:	f7ff ff36 	bl	800180c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019a0:	4b17      	ldr	r3, [pc, #92]	@ (8001a00 <HAL_UART_MspInit+0xac>)
 80019a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a4:	4a16      	ldr	r2, [pc, #88]	@ (8001a00 <HAL_UART_MspInit+0xac>)
 80019a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ac:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <HAL_UART_MspInit+0xac>)
 80019ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <HAL_UART_MspInit+0xac>)
 80019ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019bc:	4a10      	ldr	r2, [pc, #64]	@ (8001a00 <HAL_UART_MspInit+0xac>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <HAL_UART_MspInit+0xac>)
 80019c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019d0:	230c      	movs	r3, #12
 80019d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019e0:	2307      	movs	r3, #7
 80019e2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019e8:	4619      	mov	r1, r3
 80019ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ee:	f000 fbe1 	bl	80021b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019f2:	bf00      	nop
 80019f4:	3778      	adds	r7, #120	@ 0x78
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40004400 	.word	0x40004400
 8001a00:	40021000 	.word	0x40021000

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <NMI_Handler+0x4>

08001a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <HardFault_Handler+0x4>

08001a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <MemManage_Handler+0x4>

08001a1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5a:	f000 f98d 	bl	8001d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a74:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <I2C1_EV_IRQHandler+0x10>)
 8001a76:	f001 f823 	bl	8002ac0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200001f0 	.word	0x200001f0

08001a84 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <I2C1_ER_IRQHandler+0x10>)
 8001a8a:	f001 f833 	bl	8002af4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200001f0 	.word	0x200001f0

08001a98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a9c:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <USART2_IRQHandler+0x10>)
 8001a9e:	f003 fe27 	bl	80056f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000290 	.word	0x20000290

08001aac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ab0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ab4:	f000 fd18 	bl	80024e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}

08001abc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <TIM6_DAC_IRQHandler+0x10>)
 8001ac2:	f003 fa2f 	bl	8004f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000244 	.word	0x20000244

08001ad0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return 1;
 8001ad4:	2301      	movs	r3, #1
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_kill>:

int _kill(int pid, int sig)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aea:	f005 ffa7 	bl	8007a3c <__errno>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2216      	movs	r2, #22
 8001af2:	601a      	str	r2, [r3, #0]
  return -1;
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_exit>:

void _exit (int status)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ffe7 	bl	8001ae0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b12:	bf00      	nop
 8001b14:	e7fd      	b.n	8001b12 <_exit+0x12>

08001b16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	e00a      	b.n	8001b3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b28:	f3af 8000 	nop.w
 8001b2c:	4601      	mov	r1, r0
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	60ba      	str	r2, [r7, #8]
 8001b34:	b2ca      	uxtb	r2, r1
 8001b36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	dbf0      	blt.n	8001b28 <_read+0x12>
  }

  return len;
 8001b46:	687b      	ldr	r3, [r7, #4]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e009      	b.n	8001b76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	60ba      	str	r2, [r7, #8]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	3301      	adds	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	dbf1      	blt.n	8001b62 <_write+0x12>
  }
  return len;
 8001b7e:	687b      	ldr	r3, [r7, #4]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_close>:

int _close(int file)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bb0:	605a      	str	r2, [r3, #4]
  return 0;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <_isatty>:

int _isatty(int file)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc8:	2301      	movs	r3, #1
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b085      	sub	sp, #20
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf8:	4a14      	ldr	r2, [pc, #80]	@ (8001c4c <_sbrk+0x5c>)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <_sbrk+0x60>)
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c04:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <_sbrk+0x64>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	@ (8001c58 <_sbrk+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c12:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d207      	bcs.n	8001c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c20:	f005 ff0c 	bl	8007a3c <__errno>
 8001c24:	4603      	mov	r3, r0
 8001c26:	220c      	movs	r2, #12
 8001c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c2e:	e009      	b.n	8001c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c30:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c36:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a05      	ldr	r2, [pc, #20]	@ (8001c54 <_sbrk+0x64>)
 8001c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c42:	68fb      	ldr	r3, [r7, #12]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20020000 	.word	0x20020000
 8001c50:	00000400 	.word	0x00000400
 8001c54:	20000364 	.word	0x20000364
 8001c58:	200004b8 	.word	0x200004b8

08001c5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c60:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <SystemInit+0x20>)
 8001c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c66:	4a05      	ldr	r2, [pc, #20]	@ (8001c7c <SystemInit+0x20>)
 8001c68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c80:	480d      	ldr	r0, [pc, #52]	@ (8001cb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c84:	f7ff ffea 	bl	8001c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c88:	480c      	ldr	r0, [pc, #48]	@ (8001cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001c8a:	490d      	ldr	r1, [pc, #52]	@ (8001cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc4 <LoopForever+0xe>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c90:	e002      	b.n	8001c98 <LoopCopyDataInit>

08001c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c96:	3304      	adds	r3, #4

08001c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c9c:	d3f9      	bcc.n	8001c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8001ccc <LoopForever+0x16>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca4:	e001      	b.n	8001caa <LoopFillZerobss>

08001ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca8:	3204      	adds	r2, #4

08001caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cac:	d3fb      	bcc.n	8001ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cae:	f005 fecb 	bl	8007a48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cb2:	f7ff fb4f 	bl	8001354 <main>

08001cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001cb6:	e7fe      	b.n	8001cb6 <LoopForever>
  ldr   r0, =_estack
 8001cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001cc4:	0800b638 	.word	0x0800b638
  ldr r2, =_sbss
 8001cc8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ccc:	200004b8 	.word	0x200004b8

08001cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC1_2_IRQHandler>

08001cd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cdc:	2003      	movs	r0, #3
 8001cde:	f000 f95b 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f000 f80e 	bl	8001d04 <HAL_InitTick>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	71fb      	strb	r3, [r7, #7]
 8001cf2:	e001      	b.n	8001cf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cf4:	f7ff fd90 	bl	8001818 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cf8:	79fb      	ldrb	r3, [r7, #7]

}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d10:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <HAL_InitTick+0x68>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d022      	beq.n	8001d5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d18:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <HAL_InitTick+0x6c>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <HAL_InitTick+0x68>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 f966 	bl	8001ffe <HAL_SYSTICK_Config>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10f      	bne.n	8001d58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b0f      	cmp	r3, #15
 8001d3c:	d809      	bhi.n	8001d52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d46:	f000 f932 	bl	8001fae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d74 <HAL_InitTick+0x70>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	e007      	b.n	8001d62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
 8001d56:	e004      	b.n	8001d62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	e001      	b.n	8001d62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000008 	.word	0x20000008
 8001d70:	20000000 	.word	0x20000000
 8001d74:	20000004 	.word	0x20000004

08001d78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <HAL_IncTick+0x1c>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_IncTick+0x20>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a03      	ldr	r2, [pc, #12]	@ (8001d94 <HAL_IncTick+0x1c>)
 8001d88:	6013      	str	r3, [r2, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	20000368 	.word	0x20000368
 8001d98:	20000008 	.word	0x20000008

08001d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001da0:	4b03      	ldr	r3, [pc, #12]	@ (8001db0 <HAL_GetTick+0x14>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000368 	.word	0x20000368

08001db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff ffee 	bl	8001d9c <HAL_GetTick>
 8001dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dcc:	d004      	beq.n	8001dd8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dce:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <HAL_Delay+0x40>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dd8:	bf00      	nop
 8001dda:	f7ff ffdf 	bl	8001d9c <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d8f7      	bhi.n	8001dda <HAL_Delay+0x26>
  {
  }
}
 8001dea:	bf00      	nop
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000008 	.word	0x20000008

08001df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e08:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e14:	4013      	ands	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2a:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	60d3      	str	r3, [r2, #12]
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e44:	4b04      	ldr	r3, [pc, #16]	@ (8001e58 <__NVIC_GetPriorityGrouping+0x18>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	f003 0307 	and.w	r3, r3, #7
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db0b      	blt.n	8001e86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	f003 021f 	and.w	r2, r3, #31
 8001e74:	4907      	ldr	r1, [pc, #28]	@ (8001e94 <__NVIC_EnableIRQ+0x38>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000e100 	.word	0xe000e100

08001e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	db0a      	blt.n	8001ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	490c      	ldr	r1, [pc, #48]	@ (8001ee4 <__NVIC_SetPriority+0x4c>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	0112      	lsls	r2, r2, #4
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	440b      	add	r3, r1
 8001ebc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec0:	e00a      	b.n	8001ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4908      	ldr	r1, [pc, #32]	@ (8001ee8 <__NVIC_SetPriority+0x50>)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	3b04      	subs	r3, #4
 8001ed0:	0112      	lsls	r2, r2, #4
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	761a      	strb	r2, [r3, #24]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000e100 	.word	0xe000e100
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	@ 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f1c3 0307 	rsb	r3, r3, #7
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	bf28      	it	cs
 8001f0a:	2304      	movcs	r3, #4
 8001f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3304      	adds	r3, #4
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d902      	bls.n	8001f1c <NVIC_EncodePriority+0x30>
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3b03      	subs	r3, #3
 8001f1a:	e000      	b.n	8001f1e <NVIC_EncodePriority+0x32>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	401a      	ands	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43d9      	mvns	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	4313      	orrs	r3, r2
         );
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3724      	adds	r7, #36	@ 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f64:	d301      	bcc.n	8001f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00f      	b.n	8001f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <SysTick_Config+0x40>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f72:	210f      	movs	r1, #15
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f78:	f7ff ff8e 	bl	8001e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f7c:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <SysTick_Config+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f82:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <SysTick_Config+0x40>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000e010 	.word	0xe000e010

08001f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff29 	bl	8001df8 <__NVIC_SetPriorityGrouping>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fbc:	f7ff ff40 	bl	8001e40 <__NVIC_GetPriorityGrouping>
 8001fc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	6978      	ldr	r0, [r7, #20]
 8001fc8:	f7ff ff90 	bl	8001eec <NVIC_EncodePriority>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff5f 	bl	8001e98 <__NVIC_SetPriority>
}
 8001fda:	bf00      	nop
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff33 	bl	8001e5c <__NVIC_EnableIRQ>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ffa4 	bl	8001f54 <SysTick_Config>
 800200c:	4603      	mov	r3, r0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002016:	b480      	push	{r7}
 8002018:	b085      	sub	sp, #20
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d005      	beq.n	800203a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2204      	movs	r2, #4
 8002032:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e037      	b.n	80020aa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 020e 	bic.w	r2, r2, #14
 8002048:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002054:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002058:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206e:	f003 021f 	and.w	r2, r3, #31
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	2101      	movs	r1, #1
 8002078:	fa01 f202 	lsl.w	r2, r1, r2
 800207c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002086:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00c      	beq.n	80020aa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800209a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800209e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80020a8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d00d      	beq.n	80020fc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2204      	movs	r2, #4
 80020e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	e047      	b.n	800218c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 020e 	bic.w	r2, r2, #14
 800210a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0201 	bic.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002126:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800212a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002130:	f003 021f 	and.w	r2, r3, #31
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	2101      	movs	r1, #1
 800213a:	fa01 f202 	lsl.w	r2, r1, r2
 800213e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002148:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00c      	beq.n	800216c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800215c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002160:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800216a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	4798      	blx	r3
    }
  }
  return status;
 800218c:	7bfb      	ldrb	r3, [r7, #15]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021a4:	b2db      	uxtb	r3, r3
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021c2:	e15a      	b.n	800247a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	2101      	movs	r1, #1
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	fa01 f303 	lsl.w	r3, r1, r3
 80021d0:	4013      	ands	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 814c 	beq.w	8002474 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d005      	beq.n	80021f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d130      	bne.n	8002256 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2203      	movs	r2, #3
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800222a:	2201      	movs	r2, #1
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	091b      	lsrs	r3, r3, #4
 8002240:	f003 0201 	and.w	r2, r3, #1
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b03      	cmp	r3, #3
 8002260:	d017      	beq.n	8002292 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	2203      	movs	r2, #3
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4013      	ands	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d123      	bne.n	80022e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	08da      	lsrs	r2, r3, #3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3208      	adds	r2, #8
 80022a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	220f      	movs	r2, #15
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	08da      	lsrs	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3208      	adds	r2, #8
 80022e0:	6939      	ldr	r1, [r7, #16]
 80022e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	2203      	movs	r2, #3
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4013      	ands	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0203 	and.w	r2, r3, #3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80a6 	beq.w	8002474 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002328:	4b5b      	ldr	r3, [pc, #364]	@ (8002498 <HAL_GPIO_Init+0x2e4>)
 800232a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800232c:	4a5a      	ldr	r2, [pc, #360]	@ (8002498 <HAL_GPIO_Init+0x2e4>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6613      	str	r3, [r2, #96]	@ 0x60
 8002334:	4b58      	ldr	r3, [pc, #352]	@ (8002498 <HAL_GPIO_Init+0x2e4>)
 8002336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002340:	4a56      	ldr	r2, [pc, #344]	@ (800249c <HAL_GPIO_Init+0x2e8>)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	220f      	movs	r2, #15
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800236a:	d01f      	beq.n	80023ac <HAL_GPIO_Init+0x1f8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a4c      	ldr	r2, [pc, #304]	@ (80024a0 <HAL_GPIO_Init+0x2ec>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d019      	beq.n	80023a8 <HAL_GPIO_Init+0x1f4>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a4b      	ldr	r2, [pc, #300]	@ (80024a4 <HAL_GPIO_Init+0x2f0>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d013      	beq.n	80023a4 <HAL_GPIO_Init+0x1f0>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a4a      	ldr	r2, [pc, #296]	@ (80024a8 <HAL_GPIO_Init+0x2f4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d00d      	beq.n	80023a0 <HAL_GPIO_Init+0x1ec>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a49      	ldr	r2, [pc, #292]	@ (80024ac <HAL_GPIO_Init+0x2f8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d007      	beq.n	800239c <HAL_GPIO_Init+0x1e8>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a48      	ldr	r2, [pc, #288]	@ (80024b0 <HAL_GPIO_Init+0x2fc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d101      	bne.n	8002398 <HAL_GPIO_Init+0x1e4>
 8002394:	2305      	movs	r3, #5
 8002396:	e00a      	b.n	80023ae <HAL_GPIO_Init+0x1fa>
 8002398:	2306      	movs	r3, #6
 800239a:	e008      	b.n	80023ae <HAL_GPIO_Init+0x1fa>
 800239c:	2304      	movs	r3, #4
 800239e:	e006      	b.n	80023ae <HAL_GPIO_Init+0x1fa>
 80023a0:	2303      	movs	r3, #3
 80023a2:	e004      	b.n	80023ae <HAL_GPIO_Init+0x1fa>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e002      	b.n	80023ae <HAL_GPIO_Init+0x1fa>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <HAL_GPIO_Init+0x1fa>
 80023ac:	2300      	movs	r3, #0
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	f002 0203 	and.w	r2, r2, #3
 80023b4:	0092      	lsls	r2, r2, #2
 80023b6:	4093      	lsls	r3, r2
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023be:	4937      	ldr	r1, [pc, #220]	@ (800249c <HAL_GPIO_Init+0x2e8>)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3302      	adds	r3, #2
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023cc:	4b39      	ldr	r3, [pc, #228]	@ (80024b4 <HAL_GPIO_Init+0x300>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023f0:	4a30      	ldr	r2, [pc, #192]	@ (80024b4 <HAL_GPIO_Init+0x300>)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023f6:	4b2f      	ldr	r3, [pc, #188]	@ (80024b4 <HAL_GPIO_Init+0x300>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	43db      	mvns	r3, r3
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800241a:	4a26      	ldr	r2, [pc, #152]	@ (80024b4 <HAL_GPIO_Init+0x300>)
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002420:	4b24      	ldr	r3, [pc, #144]	@ (80024b4 <HAL_GPIO_Init+0x300>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	43db      	mvns	r3, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002444:	4a1b      	ldr	r2, [pc, #108]	@ (80024b4 <HAL_GPIO_Init+0x300>)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800244a:	4b1a      	ldr	r3, [pc, #104]	@ (80024b4 <HAL_GPIO_Init+0x300>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	43db      	mvns	r3, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800246e:	4a11      	ldr	r2, [pc, #68]	@ (80024b4 <HAL_GPIO_Init+0x300>)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	3301      	adds	r3, #1
 8002478:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	fa22 f303 	lsr.w	r3, r2, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	f47f ae9d 	bne.w	80021c4 <HAL_GPIO_Init+0x10>
  }
}
 800248a:	bf00      	nop
 800248c:	bf00      	nop
 800248e:	371c      	adds	r7, #28
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40021000 	.word	0x40021000
 800249c:	40010000 	.word	0x40010000
 80024a0:	48000400 	.word	0x48000400
 80024a4:	48000800 	.word	0x48000800
 80024a8:	48000c00 	.word	0x48000c00
 80024ac:	48001000 	.word	0x48001000
 80024b0:	48001400 	.word	0x48001400
 80024b4:	40010400 	.word	0x40010400

080024b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024c8:	787b      	ldrb	r3, [r7, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024d4:	e002      	b.n	80024dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024f2:	4b08      	ldr	r3, [pc, #32]	@ (8002514 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d006      	beq.n	800250c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024fe:	4a05      	ldr	r2, [pc, #20]	@ (8002514 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f806 	bl	8002518 <HAL_GPIO_EXTI_Callback>
  }
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40010400 	.word	0x40010400

08002518 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e08d      	b.n	800265c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d106      	bne.n	800255a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff f983 	bl	8001860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2224      	movs	r2, #36	@ 0x24
 800255e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0201 	bic.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800257e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800258e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d107      	bne.n	80025a8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	e006      	b.n	80025b6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80025b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d108      	bne.n	80025d0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	e007      	b.n	80025e0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025f2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002602:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69d9      	ldr	r1, [r3, #28]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1a      	ldr	r2, [r3, #32]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0201 	orr.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af02      	add	r7, sp, #8
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	4608      	mov	r0, r1
 800266e:	4611      	mov	r1, r2
 8002670:	461a      	mov	r2, r3
 8002672:	4603      	mov	r3, r0
 8002674:	817b      	strh	r3, [r7, #10]
 8002676:	460b      	mov	r3, r1
 8002678:	813b      	strh	r3, [r7, #8]
 800267a:	4613      	mov	r3, r2
 800267c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b20      	cmp	r3, #32
 8002688:	f040 80f9 	bne.w	800287e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_I2C_Mem_Write+0x34>
 8002692:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002694:	2b00      	cmp	r3, #0
 8002696:	d105      	bne.n	80026a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800269e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0ed      	b.n	8002880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_I2C_Mem_Write+0x4e>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e0e6      	b.n	8002880 <HAL_I2C_Mem_Write+0x21c>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026ba:	f7ff fb6f 	bl	8001d9c <HAL_GetTick>
 80026be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	2319      	movs	r3, #25
 80026c6:	2201      	movs	r2, #1
 80026c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f001 f83e 	bl	800374e <I2C_WaitOnFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0d1      	b.n	8002880 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2221      	movs	r2, #33	@ 0x21
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2240      	movs	r2, #64	@ 0x40
 80026e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a3a      	ldr	r2, [r7, #32]
 80026f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002704:	88f8      	ldrh	r0, [r7, #6]
 8002706:	893a      	ldrh	r2, [r7, #8]
 8002708:	8979      	ldrh	r1, [r7, #10]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	4603      	mov	r3, r0
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 fb81 	bl	8002e1c <I2C_RequestMemoryWrite>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0a9      	b.n	8002880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	2bff      	cmp	r3, #255	@ 0xff
 8002734:	d90e      	bls.n	8002754 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	22ff      	movs	r2, #255	@ 0xff
 800273a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002740:	b2da      	uxtb	r2, r3
 8002742:	8979      	ldrh	r1, [r7, #10]
 8002744:	2300      	movs	r3, #0
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f001 f9c1 	bl	8003ad4 <I2C_TransferConfig>
 8002752:	e00f      	b.n	8002774 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002762:	b2da      	uxtb	r2, r3
 8002764:	8979      	ldrh	r1, [r7, #10]
 8002766:	2300      	movs	r3, #0
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f001 f9b0 	bl	8003ad4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f001 f841 	bl	8003800 <I2C_WaitOnTXISFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e07b      	b.n	8002880 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d034      	beq.n	800282c <HAL_I2C_Mem_Write+0x1c8>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d130      	bne.n	800282c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d0:	2200      	movs	r2, #0
 80027d2:	2180      	movs	r1, #128	@ 0x80
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 ffba 	bl	800374e <I2C_WaitOnFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e04d      	b.n	8002880 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2bff      	cmp	r3, #255	@ 0xff
 80027ec:	d90e      	bls.n	800280c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	22ff      	movs	r2, #255	@ 0xff
 80027f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	8979      	ldrh	r1, [r7, #10]
 80027fc:	2300      	movs	r3, #0
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f001 f965 	bl	8003ad4 <I2C_TransferConfig>
 800280a:	e00f      	b.n	800282c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800281a:	b2da      	uxtb	r2, r3
 800281c:	8979      	ldrh	r1, [r7, #10]
 800281e:	2300      	movs	r3, #0
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f001 f954 	bl	8003ad4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d19e      	bne.n	8002774 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f001 f827 	bl	800388e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e01a      	b.n	8002880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2220      	movs	r2, #32
 8002850:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6859      	ldr	r1, [r3, #4]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <HAL_I2C_Mem_Write+0x224>)
 800285e:	400b      	ands	r3, r1
 8002860:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800287e:	2302      	movs	r3, #2
  }
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	fe00e800 	.word	0xfe00e800

0800288c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af02      	add	r7, sp, #8
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	4608      	mov	r0, r1
 8002896:	4611      	mov	r1, r2
 8002898:	461a      	mov	r2, r3
 800289a:	4603      	mov	r3, r0
 800289c:	817b      	strh	r3, [r7, #10]
 800289e:	460b      	mov	r3, r1
 80028a0:	813b      	strh	r3, [r7, #8]
 80028a2:	4613      	mov	r3, r2
 80028a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	f040 80fd 	bne.w	8002aae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <HAL_I2C_Mem_Read+0x34>
 80028ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028c6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0f1      	b.n	8002ab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_I2C_Mem_Read+0x4e>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e0ea      	b.n	8002ab0 <HAL_I2C_Mem_Read+0x224>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028e2:	f7ff fa5b 	bl	8001d9c <HAL_GetTick>
 80028e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	2319      	movs	r3, #25
 80028ee:	2201      	movs	r2, #1
 80028f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 ff2a 	bl	800374e <I2C_WaitOnFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0d5      	b.n	8002ab0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2222      	movs	r2, #34	@ 0x22
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2240      	movs	r2, #64	@ 0x40
 8002910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a3a      	ldr	r2, [r7, #32]
 800291e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002924:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800292c:	88f8      	ldrh	r0, [r7, #6]
 800292e:	893a      	ldrh	r2, [r7, #8]
 8002930:	8979      	ldrh	r1, [r7, #10]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	4603      	mov	r3, r0
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fac1 	bl	8002ec4 <I2C_RequestMemoryRead>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0ad      	b.n	8002ab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	2bff      	cmp	r3, #255	@ 0xff
 800295c:	d90e      	bls.n	800297c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	22ff      	movs	r2, #255	@ 0xff
 8002962:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002968:	b2da      	uxtb	r2, r3
 800296a:	8979      	ldrh	r1, [r7, #10]
 800296c:	4b52      	ldr	r3, [pc, #328]	@ (8002ab8 <HAL_I2C_Mem_Read+0x22c>)
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f001 f8ad 	bl	8003ad4 <I2C_TransferConfig>
 800297a:	e00f      	b.n	800299c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298a:	b2da      	uxtb	r2, r3
 800298c:	8979      	ldrh	r1, [r7, #10]
 800298e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab8 <HAL_I2C_Mem_Read+0x22c>)
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f001 f89c 	bl	8003ad4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a2:	2200      	movs	r2, #0
 80029a4:	2104      	movs	r1, #4
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 fed1 	bl	800374e <I2C_WaitOnFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e07c      	b.n	8002ab0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d034      	beq.n	8002a5c <HAL_I2C_Mem_Read+0x1d0>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d130      	bne.n	8002a5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a00:	2200      	movs	r2, #0
 8002a02:	2180      	movs	r1, #128	@ 0x80
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fea2 	bl	800374e <I2C_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e04d      	b.n	8002ab0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2bff      	cmp	r3, #255	@ 0xff
 8002a1c:	d90e      	bls.n	8002a3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	22ff      	movs	r2, #255	@ 0xff
 8002a22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	8979      	ldrh	r1, [r7, #10]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f001 f84d 	bl	8003ad4 <I2C_TransferConfig>
 8002a3a:	e00f      	b.n	8002a5c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	8979      	ldrh	r1, [r7, #10]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f001 f83c 	bl	8003ad4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d19a      	bne.n	800299c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 ff0f 	bl	800388e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e01a      	b.n	8002ab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <HAL_I2C_Mem_Read+0x230>)
 8002a8e:	400b      	ands	r3, r1
 8002a90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002aae:	2302      	movs	r3, #2
  }
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	80002400 	.word	0x80002400
 8002abc:	fe00e800 	.word	0xfe00e800

08002ac0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	68f9      	ldr	r1, [r7, #12]
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
  }
}
 8002aec:	bf00      	nop
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00f      	beq.n	8002b36 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b24:	f043 0201 	orr.w	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b34:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00f      	beq.n	8002b60 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4e:	f043 0208 	orr.w	r2, r3, #8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b5e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00f      	beq.n	8002b8a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b78:	f043 0202 	orr.w	r2, r3, #2
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b88:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 030b 	and.w	r3, r3, #11
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002b9a:	68f9      	ldr	r1, [r7, #12]
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fc7d 	bl	800349c <I2C_ITError>
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	70fb      	strb	r3, [r7, #3]
 8002bde:	4613      	mov	r3, r2
 8002be0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <I2C_Slave_ISR_IT+0x24>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e0e2      	b.n	8002e14 <I2C_Slave_ISR_IT+0x1ea>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d009      	beq.n	8002c74 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d004      	beq.n	8002c74 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002c6a:	6939      	ldr	r1, [r7, #16]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fa5d 	bl	800312c <I2C_ITSlaveCplt>
 8002c72:	e0ca      	b.n	8002e0a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d04b      	beq.n	8002d16 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d046      	beq.n	8002d16 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d128      	bne.n	8002ce4 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b28      	cmp	r3, #40	@ 0x28
 8002c9c:	d108      	bne.n	8002cb0 <I2C_Slave_ISR_IT+0x86>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ca4:	d104      	bne.n	8002cb0 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ca6:	6939      	ldr	r1, [r7, #16]
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 fba3 	bl	80033f4 <I2C_ITListenCplt>
 8002cae:	e031      	b.n	8002d14 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b29      	cmp	r3, #41	@ 0x29
 8002cba:	d10e      	bne.n	8002cda <I2C_Slave_ISR_IT+0xb0>
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cc2:	d00a      	beq.n	8002cda <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2210      	movs	r2, #16
 8002cca:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fcfc 	bl	80036ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f9ce 	bl	8003074 <I2C_ITSlaveSeqCplt>
 8002cd8:	e01c      	b.n	8002d14 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2210      	movs	r2, #16
 8002ce0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002ce2:	e08f      	b.n	8002e04 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2210      	movs	r2, #16
 8002cea:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf0:	f043 0204 	orr.w	r2, r3, #4
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <I2C_Slave_ISR_IT+0xdc>
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d04:	d17e      	bne.n	8002e04 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fbc5 	bl	800349c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002d12:	e077      	b.n	8002e04 <I2C_Slave_ISR_IT+0x1da>
 8002d14:	e076      	b.n	8002e04 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d02f      	beq.n	8002d80 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d02a      	beq.n	8002d80 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d018      	beq.n	8002d66 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d14b      	bne.n	8002e08 <I2C_Slave_ISR_IT+0x1de>
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d76:	d047      	beq.n	8002e08 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f97b 	bl	8003074 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002d7e:	e043      	b.n	8002e08 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002d94:	6939      	ldr	r1, [r7, #16]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f8e8 	bl	8002f6c <I2C_ITAddrCplt>
 8002d9c:	e035      	b.n	8002e0a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d030      	beq.n	8002e0a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d02b      	beq.n	8002e0a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d018      	beq.n	8002dee <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	781a      	ldrb	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002dec:	e00d      	b.n	8002e0a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002df4:	d002      	beq.n	8002dfc <I2C_Slave_ISR_IT+0x1d2>
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d106      	bne.n	8002e0a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f939 	bl	8003074 <I2C_ITSlaveSeqCplt>
 8002e02:	e002      	b.n	8002e0a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002e04:	bf00      	nop
 8002e06:	e000      	b.n	8002e0a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002e08:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	4608      	mov	r0, r1
 8002e26:	4611      	mov	r1, r2
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	817b      	strh	r3, [r7, #10]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	813b      	strh	r3, [r7, #8]
 8002e32:	4613      	mov	r3, r2
 8002e34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	8979      	ldrh	r1, [r7, #10]
 8002e3c:	4b20      	ldr	r3, [pc, #128]	@ (8002ec0 <I2C_RequestMemoryWrite+0xa4>)
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fe45 	bl	8003ad4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	69b9      	ldr	r1, [r7, #24]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fcd6 	bl	8003800 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e02c      	b.n	8002eb8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d105      	bne.n	8002e70 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e64:	893b      	ldrh	r3, [r7, #8]
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e6e:	e015      	b.n	8002e9c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e70:	893b      	ldrh	r3, [r7, #8]
 8002e72:	0a1b      	lsrs	r3, r3, #8
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	69b9      	ldr	r1, [r7, #24]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 fcbc 	bl	8003800 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e012      	b.n	8002eb8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e92:	893b      	ldrh	r3, [r7, #8]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2180      	movs	r1, #128	@ 0x80
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 fc51 	bl	800374e <I2C_WaitOnFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	80002000 	.word	0x80002000

08002ec4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	4608      	mov	r0, r1
 8002ece:	4611      	mov	r1, r2
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	817b      	strh	r3, [r7, #10]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	813b      	strh	r3, [r7, #8]
 8002eda:	4613      	mov	r3, r2
 8002edc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	8979      	ldrh	r1, [r7, #10]
 8002ee4:	4b20      	ldr	r3, [pc, #128]	@ (8002f68 <I2C_RequestMemoryRead+0xa4>)
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fdf2 	bl	8003ad4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	69b9      	ldr	r1, [r7, #24]
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 fc83 	bl	8003800 <I2C_WaitOnTXISFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e02c      	b.n	8002f5e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d105      	bne.n	8002f16 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f0a:	893b      	ldrh	r3, [r7, #8]
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f14:	e015      	b.n	8002f42 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f16:	893b      	ldrh	r3, [r7, #8]
 8002f18:	0a1b      	lsrs	r3, r3, #8
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	69b9      	ldr	r1, [r7, #24]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 fc69 	bl	8003800 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e012      	b.n	8002f5e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f38:	893b      	ldrh	r3, [r7, #8]
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2140      	movs	r1, #64	@ 0x40
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fbfe 	bl	800374e <I2C_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	80002000 	.word	0x80002000

08002f6c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002f82:	2b28      	cmp	r3, #40	@ 0x28
 8002f84:	d16a      	bne.n	800305c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	0c1b      	lsrs	r3, r3, #16
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	0c1b      	lsrs	r3, r3, #16
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002fa4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fb2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002fc0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d138      	bne.n	800303c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002fca:	897b      	ldrh	r3, [r7, #10]
 8002fcc:	09db      	lsrs	r3, r3, #7
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	89bb      	ldrh	r3, [r7, #12]
 8002fd2:	4053      	eors	r3, r2
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	f003 0306 	and.w	r3, r3, #6
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d11c      	bne.n	8003018 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002fde:	897b      	ldrh	r3, [r7, #10]
 8002fe0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d13b      	bne.n	800306c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2208      	movs	r2, #8
 8003000:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800300a:	89ba      	ldrh	r2, [r7, #12]
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	4619      	mov	r1, r3
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff fdde 	bl	8002bd2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003016:	e029      	b.n	800306c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003018:	893b      	ldrh	r3, [r7, #8]
 800301a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800301c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fd89 	bl	8003b38 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800302e:	89ba      	ldrh	r2, [r7, #12]
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	4619      	mov	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff fdcc 	bl	8002bd2 <HAL_I2C_AddrCallback>
}
 800303a:	e017      	b.n	800306c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800303c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fd79 	bl	8003b38 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800304e:	89ba      	ldrh	r2, [r7, #12]
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	4619      	mov	r1, r3
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff fdbc 	bl	8002bd2 <HAL_I2C_AddrCallback>
}
 800305a:	e007      	b.n	800306c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2208      	movs	r2, #8
 8003062:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800306c:	bf00      	nop
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d008      	beq.n	80030a8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	e00c      	b.n	80030c2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d007      	beq.n	80030c2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030c0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b29      	cmp	r3, #41	@ 0x29
 80030cc:	d112      	bne.n	80030f4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2228      	movs	r2, #40	@ 0x28
 80030d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2221      	movs	r2, #33	@ 0x21
 80030da:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80030dc:	2101      	movs	r1, #1
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fd2a 	bl	8003b38 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff fd5c 	bl	8002baa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80030f2:	e017      	b.n	8003124 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80030fe:	d111      	bne.n	8003124 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2228      	movs	r2, #40	@ 0x28
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2222      	movs	r2, #34	@ 0x22
 800310c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800310e:	2102      	movs	r1, #2
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fd11 	bl	8003b38 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff fd4d 	bl	8002bbe <HAL_I2C_SlaveRxCpltCallback>
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003146:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800314e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2220      	movs	r2, #32
 8003156:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003158:	7afb      	ldrb	r3, [r7, #11]
 800315a:	2b21      	cmp	r3, #33	@ 0x21
 800315c:	d002      	beq.n	8003164 <I2C_ITSlaveCplt+0x38>
 800315e:	7afb      	ldrb	r3, [r7, #11]
 8003160:	2b29      	cmp	r3, #41	@ 0x29
 8003162:	d108      	bne.n	8003176 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003164:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fce5 	bl	8003b38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2221      	movs	r2, #33	@ 0x21
 8003172:	631a      	str	r2, [r3, #48]	@ 0x30
 8003174:	e019      	b.n	80031aa <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003176:	7afb      	ldrb	r3, [r7, #11]
 8003178:	2b22      	cmp	r3, #34	@ 0x22
 800317a:	d002      	beq.n	8003182 <I2C_ITSlaveCplt+0x56>
 800317c:	7afb      	ldrb	r3, [r7, #11]
 800317e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003180:	d108      	bne.n	8003194 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003182:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fcd6 	bl	8003b38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2222      	movs	r2, #34	@ 0x22
 8003190:	631a      	str	r2, [r3, #48]	@ 0x30
 8003192:	e00a      	b.n	80031aa <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003194:	7afb      	ldrb	r3, [r7, #11]
 8003196:	2b28      	cmp	r3, #40	@ 0x28
 8003198:	d107      	bne.n	80031aa <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800319a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fcca 	bl	8003b38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031b8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4b89      	ldr	r3, [pc, #548]	@ (80033ec <I2C_ITSlaveCplt+0x2c0>)
 80031c6:	400b      	ands	r3, r1
 80031c8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fa7d 	bl	80036ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d013      	beq.n	8003202 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031e8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d01f      	beq.n	8003232 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003200:	e017      	b.n	8003232 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d012      	beq.n	8003232 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800321a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d006      	beq.n	8003232 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	b29a      	uxth	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f023 0304 	bic.w	r3, r3, #4
 8003242:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00c      	beq.n	800327e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328c:	f043 0204 	orr.w	r2, r3, #4
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f003 0310 	and.w	r3, r3, #16
 800329a:	2b00      	cmp	r3, #0
 800329c:	d049      	beq.n	8003332 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d044      	beq.n	8003332 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d128      	bne.n	8003304 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b28      	cmp	r3, #40	@ 0x28
 80032bc:	d108      	bne.n	80032d0 <I2C_ITSlaveCplt+0x1a4>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032c4:	d104      	bne.n	80032d0 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80032c6:	6979      	ldr	r1, [r7, #20]
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f893 	bl	80033f4 <I2C_ITListenCplt>
 80032ce:	e030      	b.n	8003332 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b29      	cmp	r3, #41	@ 0x29
 80032da:	d10e      	bne.n	80032fa <I2C_ITSlaveCplt+0x1ce>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032e2:	d00a      	beq.n	80032fa <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2210      	movs	r2, #16
 80032ea:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f9ec 	bl	80036ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff febe 	bl	8003074 <I2C_ITSlaveSeqCplt>
 80032f8:	e01b      	b.n	8003332 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2210      	movs	r2, #16
 8003300:	61da      	str	r2, [r3, #28]
 8003302:	e016      	b.n	8003332 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2210      	movs	r2, #16
 800330a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003310:	f043 0204 	orr.w	r2, r3, #4
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <I2C_ITSlaveCplt+0x1fa>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003324:	d105      	bne.n	8003332 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332a:	4619      	mov	r1, r3
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f8b5 	bl	800349c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003344:	2b00      	cmp	r3, #0
 8003346:	d010      	beq.n	800336a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8a4 	bl	800349c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b28      	cmp	r3, #40	@ 0x28
 800335e:	d141      	bne.n	80033e4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003360:	6979      	ldr	r1, [r7, #20]
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f846 	bl	80033f4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003368:	e03c      	b.n	80033e4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003372:	d014      	beq.n	800339e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff fe7d 	bl	8003074 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a1c      	ldr	r2, [pc, #112]	@ (80033f0 <I2C_ITSlaveCplt+0x2c4>)
 800337e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff fc29 	bl	8002bee <HAL_I2C_ListenCpltCallback>
}
 800339c:	e022      	b.n	80033e4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b22      	cmp	r3, #34	@ 0x22
 80033a8:	d10e      	bne.n	80033c8 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff fbfc 	bl	8002bbe <HAL_I2C_SlaveRxCpltCallback>
}
 80033c6:	e00d      	b.n	80033e4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff fbe3 	bl	8002baa <HAL_I2C_SlaveTxCpltCallback>
}
 80033e4:	bf00      	nop
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	fe00e800 	.word	0xfe00e800
 80033f0:	ffff0000 	.word	0xffff0000

080033f4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a25      	ldr	r2, [pc, #148]	@ (8003498 <I2C_ITListenCplt+0xa4>)
 8003402:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	d022      	beq.n	8003470 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003446:	2b00      	cmp	r3, #0
 8003448:	d012      	beq.n	8003470 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003468:	f043 0204 	orr.w	r2, r3, #4
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003470:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fb5f 	bl	8003b38 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2210      	movs	r2, #16
 8003480:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff fbaf 	bl	8002bee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	ffff0000 	.word	0xffff0000

0800349c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ac:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a6d      	ldr	r2, [pc, #436]	@ (8003670 <I2C_ITError+0x1d4>)
 80034ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	2b28      	cmp	r3, #40	@ 0x28
 80034d2:	d005      	beq.n	80034e0 <I2C_ITError+0x44>
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	2b29      	cmp	r3, #41	@ 0x29
 80034d8:	d002      	beq.n	80034e0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80034de:	d10b      	bne.n	80034f8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80034e0:	2103      	movs	r1, #3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fb28 	bl	8003b38 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2228      	movs	r2, #40	@ 0x28
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a60      	ldr	r2, [pc, #384]	@ (8003674 <I2C_ITError+0x1d8>)
 80034f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80034f6:	e030      	b.n	800355a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80034f8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 fb1b 	bl	8003b38 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f8e1 	bl	80036ca <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b60      	cmp	r3, #96	@ 0x60
 8003512:	d01f      	beq.n	8003554 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b20      	cmp	r3, #32
 8003528:	d114      	bne.n	8003554 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	2b10      	cmp	r3, #16
 8003536:	d109      	bne.n	800354c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2210      	movs	r2, #16
 800353e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003544:	f043 0204 	orr.w	r2, r3, #4
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2220      	movs	r2, #32
 8003552:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003564:	2b00      	cmp	r3, #0
 8003566:	d039      	beq.n	80035dc <I2C_ITError+0x140>
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b11      	cmp	r3, #17
 800356c:	d002      	beq.n	8003574 <I2C_ITError+0xd8>
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b21      	cmp	r3, #33	@ 0x21
 8003572:	d133      	bne.n	80035dc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800357e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003582:	d107      	bne.n	8003594 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003592:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003598:	4618      	mov	r0, r3
 800359a:	f7fe fdfc 	bl	8002196 <HAL_DMA_GetState>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d017      	beq.n	80035d4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a8:	4a33      	ldr	r2, [pc, #204]	@ (8003678 <I2C_ITError+0x1dc>)
 80035aa:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fe fd85 	bl	80020c8 <HAL_DMA_Abort_IT>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d04d      	beq.n	8003660 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035ce:	4610      	mov	r0, r2
 80035d0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035d2:	e045      	b.n	8003660 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f851 	bl	800367c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035da:	e041      	b.n	8003660 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d039      	beq.n	8003658 <I2C_ITError+0x1bc>
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b12      	cmp	r3, #18
 80035e8:	d002      	beq.n	80035f0 <I2C_ITError+0x154>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b22      	cmp	r3, #34	@ 0x22
 80035ee:	d133      	bne.n	8003658 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035fe:	d107      	bne.n	8003610 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800360e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003614:	4618      	mov	r0, r3
 8003616:	f7fe fdbe 	bl	8002196 <HAL_DMA_GetState>
 800361a:	4603      	mov	r3, r0
 800361c:	2b01      	cmp	r3, #1
 800361e:	d017      	beq.n	8003650 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003624:	4a14      	ldr	r2, [pc, #80]	@ (8003678 <I2C_ITError+0x1dc>)
 8003626:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe fd47 	bl	80020c8 <HAL_DMA_Abort_IT>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d011      	beq.n	8003664 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800364a:	4610      	mov	r0, r2
 800364c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800364e:	e009      	b.n	8003664 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f813 	bl	800367c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003656:	e005      	b.n	8003664 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f80f 	bl	800367c <I2C_TreatErrorCallback>
  }
}
 800365e:	e002      	b.n	8003666 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003660:	bf00      	nop
 8003662:	e000      	b.n	8003666 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003664:	bf00      	nop
}
 8003666:	bf00      	nop
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	ffff0000 	.word	0xffff0000
 8003674:	08002c2b 	.word	0x08002c2b
 8003678:	08003713 	.word	0x08003713

0800367c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b60      	cmp	r3, #96	@ 0x60
 800368e:	d10e      	bne.n	80036ae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fab5 	bl	8002c16 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036ac:	e009      	b.n	80036c2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff faa0 	bl	8002c02 <HAL_I2C_ErrorCallback>
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d103      	bne.n	80036e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2200      	movs	r2, #0
 80036e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d007      	beq.n	8003706 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699a      	ldr	r2, [r3, #24]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	619a      	str	r2, [r3, #24]
  }
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372c:	2200      	movs	r2, #0
 800372e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800373c:	2200      	movs	r2, #0
 800373e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f7ff ff9b 	bl	800367c <I2C_TreatErrorCallback>
}
 8003746:	bf00      	nop
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	603b      	str	r3, [r7, #0]
 800375a:	4613      	mov	r3, r2
 800375c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800375e:	e03b      	b.n	80037d8 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	6839      	ldr	r1, [r7, #0]
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f8d5 	bl	8003914 <I2C_IsErrorOccurred>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e041      	b.n	80037f8 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800377a:	d02d      	beq.n	80037d8 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377c:	f7fe fb0e 	bl	8001d9c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d302      	bcc.n	8003792 <I2C_WaitOnFlagUntilTimeout+0x44>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d122      	bne.n	80037d8 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699a      	ldr	r2, [r3, #24]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4013      	ands	r3, r2
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	bf0c      	ite	eq
 80037a2:	2301      	moveq	r3, #1
 80037a4:	2300      	movne	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d113      	bne.n	80037d8 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e00f      	b.n	80037f8 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	4013      	ands	r3, r2
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d0b4      	beq.n	8003760 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800380c:	e033      	b.n	8003876 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	68b9      	ldr	r1, [r7, #8]
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 f87e 	bl	8003914 <I2C_IsErrorOccurred>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e031      	b.n	8003886 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003828:	d025      	beq.n	8003876 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382a:	f7fe fab7 	bl	8001d9c <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	429a      	cmp	r2, r3
 8003838:	d302      	bcc.n	8003840 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d11a      	bne.n	8003876 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b02      	cmp	r3, #2
 800384c:	d013      	beq.n	8003876 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003852:	f043 0220 	orr.w	r2, r3, #32
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e007      	b.n	8003886 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b02      	cmp	r3, #2
 8003882:	d1c4      	bne.n	800380e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800389a:	e02f      	b.n	80038fc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	68b9      	ldr	r1, [r7, #8]
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f837 	bl	8003914 <I2C_IsErrorOccurred>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e02d      	b.n	800390c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b0:	f7fe fa74 	bl	8001d9c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d302      	bcc.n	80038c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d11a      	bne.n	80038fc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d013      	beq.n	80038fc <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d8:	f043 0220 	orr.w	r2, r3, #32
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e007      	b.n	800390c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b20      	cmp	r3, #32
 8003908:	d1c8      	bne.n	800389c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	@ 0x28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	d068      	beq.n	8003a12 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2210      	movs	r2, #16
 8003946:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003948:	e049      	b.n	80039de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003950:	d045      	beq.n	80039de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003952:	f7fe fa23 	bl	8001d9c <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	429a      	cmp	r2, r3
 8003960:	d302      	bcc.n	8003968 <I2C_IsErrorOccurred+0x54>
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d13a      	bne.n	80039de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003972:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800397a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003986:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800398a:	d121      	bne.n	80039d0 <I2C_IsErrorOccurred+0xbc>
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003992:	d01d      	beq.n	80039d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003994:	7cfb      	ldrb	r3, [r7, #19]
 8003996:	2b20      	cmp	r3, #32
 8003998:	d01a      	beq.n	80039d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80039aa:	f7fe f9f7 	bl	8001d9c <HAL_GetTick>
 80039ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039b0:	e00e      	b.n	80039d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039b2:	f7fe f9f3 	bl	8001d9c <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b19      	cmp	r3, #25
 80039be:	d907      	bls.n	80039d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	f043 0320 	orr.w	r3, r3, #32
 80039c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80039ce:	e006      	b.n	80039de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b20      	cmp	r3, #32
 80039dc:	d1e9      	bne.n	80039b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d003      	beq.n	80039f4 <I2C_IsErrorOccurred+0xe0>
 80039ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0aa      	beq.n	800394a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d103      	bne.n	8003a04 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2220      	movs	r2, #32
 8003a02:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	f043 0304 	orr.w	r3, r3, #4
 8003a0a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00b      	beq.n	8003a3c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00b      	beq.n	8003a5e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	f043 0308 	orr.w	r3, r3, #8
 8003a4c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00b      	beq.n	8003a80 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	f043 0302 	orr.w	r3, r3, #2
 8003a6e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003a80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d01c      	beq.n	8003ac2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f7ff fe1e 	bl	80036ca <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6859      	ldr	r1, [r3, #4]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad0 <I2C_IsErrorOccurred+0x1bc>)
 8003a9a:	400b      	ands	r3, r1
 8003a9c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3728      	adds	r7, #40	@ 0x28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	fe00e800 	.word	0xfe00e800

08003ad4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	607b      	str	r3, [r7, #4]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	817b      	strh	r3, [r7, #10]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ae6:	897b      	ldrh	r3, [r7, #10]
 8003ae8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003aec:	7a7b      	ldrb	r3, [r7, #9]
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003af4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b02:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	0d5b      	lsrs	r3, r3, #21
 8003b0e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003b12:	4b08      	ldr	r3, [pc, #32]	@ (8003b34 <I2C_TransferConfig+0x60>)
 8003b14:	430b      	orrs	r3, r1
 8003b16:	43db      	mvns	r3, r3
 8003b18:	ea02 0103 	and.w	r1, r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	03ff63ff 	.word	0x03ff63ff

08003b38 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003b48:	887b      	ldrh	r3, [r7, #2]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00f      	beq.n	8003b72 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003b58:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b66:	2b28      	cmp	r3, #40	@ 0x28
 8003b68:	d003      	beq.n	8003b72 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003b70:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003b72:	887b      	ldrh	r3, [r7, #2]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00f      	beq.n	8003b9c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003b82:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b90:	2b28      	cmp	r3, #40	@ 0x28
 8003b92:	d003      	beq.n	8003b9c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003b9a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	da03      	bge.n	8003bac <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003baa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003bac:	887b      	ldrh	r3, [r7, #2]
 8003bae:	2b10      	cmp	r3, #16
 8003bb0:	d103      	bne.n	8003bba <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003bb8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003bba:	887b      	ldrh	r3, [r7, #2]
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d103      	bne.n	8003bc8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f043 0320 	orr.w	r3, r3, #32
 8003bc6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003bc8:	887b      	ldrh	r3, [r7, #2]
 8003bca:	2b40      	cmp	r3, #64	@ 0x40
 8003bcc:	d103      	bne.n	8003bd6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bd4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6819      	ldr	r1, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	43da      	mvns	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	400a      	ands	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	d138      	bne.n	8003c7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e032      	b.n	8003c7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2224      	movs	r2, #36	@ 0x24
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6819      	ldr	r1, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b085      	sub	sp, #20
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d139      	bne.n	8003d14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e033      	b.n	8003d16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2224      	movs	r2, #36	@ 0x24
 8003cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0201 	bic.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003cdc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	021b      	lsls	r3, r3, #8
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	e000      	b.n	8003d16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
  }
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d141      	bne.n	8003db6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d32:	4b4b      	ldr	r3, [pc, #300]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d3e:	d131      	bne.n	8003da4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d40:	4b47      	ldr	r3, [pc, #284]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d46:	4a46      	ldr	r2, [pc, #280]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d50:	4b43      	ldr	r3, [pc, #268]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d58:	4a41      	ldr	r2, [pc, #260]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d60:	4b40      	ldr	r3, [pc, #256]	@ (8003e64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2232      	movs	r2, #50	@ 0x32
 8003d66:	fb02 f303 	mul.w	r3, r2, r3
 8003d6a:	4a3f      	ldr	r2, [pc, #252]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d70:	0c9b      	lsrs	r3, r3, #18
 8003d72:	3301      	adds	r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d76:	e002      	b.n	8003d7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d7e:	4b38      	ldr	r3, [pc, #224]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d8a:	d102      	bne.n	8003d92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f2      	bne.n	8003d78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d92:	4b33      	ldr	r3, [pc, #204]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9e:	d158      	bne.n	8003e52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e057      	b.n	8003e54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003da4:	4b2e      	ldr	r3, [pc, #184]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003daa:	4a2d      	ldr	r2, [pc, #180]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003db0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003db4:	e04d      	b.n	8003e52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dbc:	d141      	bne.n	8003e42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dbe:	4b28      	ldr	r3, [pc, #160]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dca:	d131      	bne.n	8003e30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dcc:	4b24      	ldr	r3, [pc, #144]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dd2:	4a23      	ldr	r2, [pc, #140]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ddc:	4b20      	ldr	r3, [pc, #128]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003de4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dec:	4b1d      	ldr	r3, [pc, #116]	@ (8003e64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2232      	movs	r2, #50	@ 0x32
 8003df2:	fb02 f303 	mul.w	r3, r2, r3
 8003df6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	0c9b      	lsrs	r3, r3, #18
 8003dfe:	3301      	adds	r3, #1
 8003e00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e02:	e002      	b.n	8003e0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e0a:	4b15      	ldr	r3, [pc, #84]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e16:	d102      	bne.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f2      	bne.n	8003e04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e1e:	4b10      	ldr	r3, [pc, #64]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e2a:	d112      	bne.n	8003e52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e011      	b.n	8003e54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e30:	4b0b      	ldr	r3, [pc, #44]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e36:	4a0a      	ldr	r2, [pc, #40]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e40:	e007      	b.n	8003e52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e42:	4b07      	ldr	r3, [pc, #28]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e4a:	4a05      	ldr	r2, [pc, #20]	@ (8003e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	40007000 	.word	0x40007000
 8003e64:	20000000 	.word	0x20000000
 8003e68:	431bde83 	.word	0x431bde83

08003e6c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e70:	4b05      	ldr	r3, [pc, #20]	@ (8003e88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	4a04      	ldr	r2, [pc, #16]	@ (8003e88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e7a:	6093      	str	r3, [r2, #8]
}
 8003e7c:	bf00      	nop
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40007000 	.word	0x40007000

08003e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e2fe      	b.n	800449c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d075      	beq.n	8003f96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eaa:	4b97      	ldr	r3, [pc, #604]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eb4:	4b94      	ldr	r3, [pc, #592]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2b0c      	cmp	r3, #12
 8003ec2:	d102      	bne.n	8003eca <HAL_RCC_OscConfig+0x3e>
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d002      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x44>
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d10b      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed0:	4b8d      	ldr	r3, [pc, #564]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d05b      	beq.n	8003f94 <HAL_RCC_OscConfig+0x108>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d157      	bne.n	8003f94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e2d9      	b.n	800449c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef0:	d106      	bne.n	8003f00 <HAL_RCC_OscConfig+0x74>
 8003ef2:	4b85      	ldr	r3, [pc, #532]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a84      	ldr	r2, [pc, #528]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	e01d      	b.n	8003f3c <HAL_RCC_OscConfig+0xb0>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCC_OscConfig+0x98>
 8003f0a:	4b7f      	ldr	r3, [pc, #508]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a7e      	ldr	r2, [pc, #504]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003f10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	4b7c      	ldr	r3, [pc, #496]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a7b      	ldr	r2, [pc, #492]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	e00b      	b.n	8003f3c <HAL_RCC_OscConfig+0xb0>
 8003f24:	4b78      	ldr	r3, [pc, #480]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a77      	ldr	r2, [pc, #476]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003f2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	4b75      	ldr	r3, [pc, #468]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a74      	ldr	r2, [pc, #464]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003f36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d013      	beq.n	8003f6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fd ff2a 	bl	8001d9c <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7fd ff26 	bl	8001d9c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	@ 0x64
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e29e      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0xc0>
 8003f6a:	e014      	b.n	8003f96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fd ff16 	bl	8001d9c <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f74:	f7fd ff12 	bl	8001d9c <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b64      	cmp	r3, #100	@ 0x64
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e28a      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f86:	4b60      	ldr	r3, [pc, #384]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0xe8>
 8003f92:	e000      	b.n	8003f96 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d075      	beq.n	800408e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fa2:	4b59      	ldr	r3, [pc, #356]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
 8003faa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fac:	4b56      	ldr	r3, [pc, #344]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b0c      	cmp	r3, #12
 8003fba:	d102      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x136>
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d002      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x13c>
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d11f      	bne.n	8004008 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fc8:	4b4f      	ldr	r3, [pc, #316]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x154>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e25d      	b.n	800449c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe0:	4b49      	ldr	r3, [pc, #292]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	061b      	lsls	r3, r3, #24
 8003fee:	4946      	ldr	r1, [pc, #280]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ff4:	4b45      	ldr	r3, [pc, #276]	@ (800410c <HAL_RCC_OscConfig+0x280>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fd fe83 	bl	8001d04 <HAL_InitTick>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d043      	beq.n	800408c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e249      	b.n	800449c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d023      	beq.n	8004058 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004010:	4b3d      	ldr	r3, [pc, #244]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a3c      	ldr	r2, [pc, #240]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8004016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800401a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fd febe 	bl	8001d9c <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004024:	f7fd feba 	bl	8001d9c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e232      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004036:	4b34      	ldr	r3, [pc, #208]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004042:	4b31      	ldr	r3, [pc, #196]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	061b      	lsls	r3, r3, #24
 8004050:	492d      	ldr	r1, [pc, #180]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8004052:	4313      	orrs	r3, r2
 8004054:	604b      	str	r3, [r1, #4]
 8004056:	e01a      	b.n	800408e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004058:	4b2b      	ldr	r3, [pc, #172]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a2a      	ldr	r2, [pc, #168]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 800405e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7fd fe9a 	bl	8001d9c <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800406c:	f7fd fe96 	bl	8001d9c <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e20e      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800407e:	4b22      	ldr	r3, [pc, #136]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x1e0>
 800408a:	e000      	b.n	800408e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800408c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d041      	beq.n	800411e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d01c      	beq.n	80040dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040a2:	4b19      	ldr	r3, [pc, #100]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 80040a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040a8:	4a17      	ldr	r2, [pc, #92]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b2:	f7fd fe73 	bl	8001d9c <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ba:	f7fd fe6f 	bl	8001d9c <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e1e7      	b.n	800449c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 80040ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0ef      	beq.n	80040ba <HAL_RCC_OscConfig+0x22e>
 80040da:	e020      	b.n	800411e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 80040de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040e2:	4a09      	ldr	r2, [pc, #36]	@ (8004108 <HAL_RCC_OscConfig+0x27c>)
 80040e4:	f023 0301 	bic.w	r3, r3, #1
 80040e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ec:	f7fd fe56 	bl	8001d9c <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040f2:	e00d      	b.n	8004110 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f4:	f7fd fe52 	bl	8001d9c <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d906      	bls.n	8004110 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e1ca      	b.n	800449c <HAL_RCC_OscConfig+0x610>
 8004106:	bf00      	nop
 8004108:	40021000 	.word	0x40021000
 800410c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004110:	4b8c      	ldr	r3, [pc, #560]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 8004112:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1ea      	bne.n	80040f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 80a6 	beq.w	8004278 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800412c:	2300      	movs	r3, #0
 800412e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004130:	4b84      	ldr	r3, [pc, #528]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 8004132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_RCC_OscConfig+0x2b4>
 800413c:	2301      	movs	r3, #1
 800413e:	e000      	b.n	8004142 <HAL_RCC_OscConfig+0x2b6>
 8004140:	2300      	movs	r3, #0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00d      	beq.n	8004162 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004146:	4b7f      	ldr	r3, [pc, #508]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 8004148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414a:	4a7e      	ldr	r2, [pc, #504]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 800414c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004150:	6593      	str	r3, [r2, #88]	@ 0x58
 8004152:	4b7c      	ldr	r3, [pc, #496]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 8004154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800415e:	2301      	movs	r3, #1
 8004160:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004162:	4b79      	ldr	r3, [pc, #484]	@ (8004348 <HAL_RCC_OscConfig+0x4bc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416a:	2b00      	cmp	r3, #0
 800416c:	d118      	bne.n	80041a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800416e:	4b76      	ldr	r3, [pc, #472]	@ (8004348 <HAL_RCC_OscConfig+0x4bc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a75      	ldr	r2, [pc, #468]	@ (8004348 <HAL_RCC_OscConfig+0x4bc>)
 8004174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800417a:	f7fd fe0f 	bl	8001d9c <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004182:	f7fd fe0b 	bl	8001d9c <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e183      	b.n	800449c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004194:	4b6c      	ldr	r3, [pc, #432]	@ (8004348 <HAL_RCC_OscConfig+0x4bc>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0f0      	beq.n	8004182 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d108      	bne.n	80041ba <HAL_RCC_OscConfig+0x32e>
 80041a8:	4b66      	ldr	r3, [pc, #408]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ae:	4a65      	ldr	r2, [pc, #404]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041b8:	e024      	b.n	8004204 <HAL_RCC_OscConfig+0x378>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b05      	cmp	r3, #5
 80041c0:	d110      	bne.n	80041e4 <HAL_RCC_OscConfig+0x358>
 80041c2:	4b60      	ldr	r3, [pc, #384]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 80041c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c8:	4a5e      	ldr	r2, [pc, #376]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 80041ca:	f043 0304 	orr.w	r3, r3, #4
 80041ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041d2:	4b5c      	ldr	r3, [pc, #368]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 80041d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d8:	4a5a      	ldr	r2, [pc, #360]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041e2:	e00f      	b.n	8004204 <HAL_RCC_OscConfig+0x378>
 80041e4:	4b57      	ldr	r3, [pc, #348]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ea:	4a56      	ldr	r2, [pc, #344]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041f4:	4b53      	ldr	r3, [pc, #332]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041fa:	4a52      	ldr	r2, [pc, #328]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 80041fc:	f023 0304 	bic.w	r3, r3, #4
 8004200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d016      	beq.n	800423a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7fd fdc6 	bl	8001d9c <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004212:	e00a      	b.n	800422a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004214:	f7fd fdc2 	bl	8001d9c <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e138      	b.n	800449c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800422a:	4b46      	ldr	r3, [pc, #280]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 800422c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0ed      	beq.n	8004214 <HAL_RCC_OscConfig+0x388>
 8004238:	e015      	b.n	8004266 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423a:	f7fd fdaf 	bl	8001d9c <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004240:	e00a      	b.n	8004258 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004242:	f7fd fdab 	bl	8001d9c <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004250:	4293      	cmp	r3, r2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e121      	b.n	800449c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004258:	4b3a      	ldr	r3, [pc, #232]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1ed      	bne.n	8004242 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004266:	7ffb      	ldrb	r3, [r7, #31]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d105      	bne.n	8004278 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800426c:	4b35      	ldr	r3, [pc, #212]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 800426e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004270:	4a34      	ldr	r2, [pc, #208]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 8004272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004276:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b00      	cmp	r3, #0
 8004282:	d03c      	beq.n	80042fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01c      	beq.n	80042c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800428c:	4b2d      	ldr	r3, [pc, #180]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 800428e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004292:	4a2c      	ldr	r2, [pc, #176]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fd fd7e 	bl	8001d9c <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042a4:	f7fd fd7a 	bl	8001d9c <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e0f2      	b.n	800449c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042b6:	4b23      	ldr	r3, [pc, #140]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 80042b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0ef      	beq.n	80042a4 <HAL_RCC_OscConfig+0x418>
 80042c4:	e01b      	b.n	80042fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 80042c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d6:	f7fd fd61 	bl	8001d9c <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042de:	f7fd fd5d 	bl	8001d9c <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e0d5      	b.n	800449c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042f0:	4b14      	ldr	r3, [pc, #80]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 80042f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1ef      	bne.n	80042de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 80c9 	beq.w	800449a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004308:	4b0e      	ldr	r3, [pc, #56]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 030c 	and.w	r3, r3, #12
 8004310:	2b0c      	cmp	r3, #12
 8004312:	f000 8083 	beq.w	800441c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d15e      	bne.n	80043dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431e:	4b09      	ldr	r3, [pc, #36]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a08      	ldr	r2, [pc, #32]	@ (8004344 <HAL_RCC_OscConfig+0x4b8>)
 8004324:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432a:	f7fd fd37 	bl	8001d9c <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004330:	e00c      	b.n	800434c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004332:	f7fd fd33 	bl	8001d9c <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d905      	bls.n	800434c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e0ab      	b.n	800449c <HAL_RCC_OscConfig+0x610>
 8004344:	40021000 	.word	0x40021000
 8004348:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800434c:	4b55      	ldr	r3, [pc, #340]	@ (80044a4 <HAL_RCC_OscConfig+0x618>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1ec      	bne.n	8004332 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004358:	4b52      	ldr	r3, [pc, #328]	@ (80044a4 <HAL_RCC_OscConfig+0x618>)
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	4b52      	ldr	r3, [pc, #328]	@ (80044a8 <HAL_RCC_OscConfig+0x61c>)
 800435e:	4013      	ands	r3, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6a11      	ldr	r1, [r2, #32]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004368:	3a01      	subs	r2, #1
 800436a:	0112      	lsls	r2, r2, #4
 800436c:	4311      	orrs	r1, r2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004372:	0212      	lsls	r2, r2, #8
 8004374:	4311      	orrs	r1, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800437a:	0852      	lsrs	r2, r2, #1
 800437c:	3a01      	subs	r2, #1
 800437e:	0552      	lsls	r2, r2, #21
 8004380:	4311      	orrs	r1, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004386:	0852      	lsrs	r2, r2, #1
 8004388:	3a01      	subs	r2, #1
 800438a:	0652      	lsls	r2, r2, #25
 800438c:	4311      	orrs	r1, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004392:	06d2      	lsls	r2, r2, #27
 8004394:	430a      	orrs	r2, r1
 8004396:	4943      	ldr	r1, [pc, #268]	@ (80044a4 <HAL_RCC_OscConfig+0x618>)
 8004398:	4313      	orrs	r3, r2
 800439a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800439c:	4b41      	ldr	r3, [pc, #260]	@ (80044a4 <HAL_RCC_OscConfig+0x618>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a40      	ldr	r2, [pc, #256]	@ (80044a4 <HAL_RCC_OscConfig+0x618>)
 80043a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043a8:	4b3e      	ldr	r3, [pc, #248]	@ (80044a4 <HAL_RCC_OscConfig+0x618>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4a3d      	ldr	r2, [pc, #244]	@ (80044a4 <HAL_RCC_OscConfig+0x618>)
 80043ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fd fcf2 	bl	8001d9c <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043bc:	f7fd fcee 	bl	8001d9c <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e066      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ce:	4b35      	ldr	r3, [pc, #212]	@ (80044a4 <HAL_RCC_OscConfig+0x618>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0x530>
 80043da:	e05e      	b.n	800449a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043dc:	4b31      	ldr	r3, [pc, #196]	@ (80044a4 <HAL_RCC_OscConfig+0x618>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a30      	ldr	r2, [pc, #192]	@ (80044a4 <HAL_RCC_OscConfig+0x618>)
 80043e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fd fcd8 	bl	8001d9c <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f0:	f7fd fcd4 	bl	8001d9c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e04c      	b.n	800449c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004402:	4b28      	ldr	r3, [pc, #160]	@ (80044a4 <HAL_RCC_OscConfig+0x618>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800440e:	4b25      	ldr	r3, [pc, #148]	@ (80044a4 <HAL_RCC_OscConfig+0x618>)
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	4924      	ldr	r1, [pc, #144]	@ (80044a4 <HAL_RCC_OscConfig+0x618>)
 8004414:	4b25      	ldr	r3, [pc, #148]	@ (80044ac <HAL_RCC_OscConfig+0x620>)
 8004416:	4013      	ands	r3, r2
 8004418:	60cb      	str	r3, [r1, #12]
 800441a:	e03e      	b.n	800449a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e039      	b.n	800449c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004428:	4b1e      	ldr	r3, [pc, #120]	@ (80044a4 <HAL_RCC_OscConfig+0x618>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f003 0203 	and.w	r2, r3, #3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	429a      	cmp	r2, r3
 800443a:	d12c      	bne.n	8004496 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	3b01      	subs	r3, #1
 8004448:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444a:	429a      	cmp	r2, r3
 800444c:	d123      	bne.n	8004496 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004458:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800445a:	429a      	cmp	r2, r3
 800445c:	d11b      	bne.n	8004496 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004468:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800446a:	429a      	cmp	r2, r3
 800446c:	d113      	bne.n	8004496 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004478:	085b      	lsrs	r3, r3, #1
 800447a:	3b01      	subs	r3, #1
 800447c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800447e:	429a      	cmp	r2, r3
 8004480:	d109      	bne.n	8004496 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800448c:	085b      	lsrs	r3, r3, #1
 800448e:	3b01      	subs	r3, #1
 8004490:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004492:	429a      	cmp	r2, r3
 8004494:	d001      	beq.n	800449a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3720      	adds	r7, #32
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40021000 	.word	0x40021000
 80044a8:	019f800c 	.word	0x019f800c
 80044ac:	feeefffc 	.word	0xfeeefffc

080044b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e11e      	b.n	8004706 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044c8:	4b91      	ldr	r3, [pc, #580]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d910      	bls.n	80044f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d6:	4b8e      	ldr	r3, [pc, #568]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 020f 	bic.w	r2, r3, #15
 80044de:	498c      	ldr	r1, [pc, #560]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	4b8a      	ldr	r3, [pc, #552]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e106      	b.n	8004706 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d073      	beq.n	80045ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b03      	cmp	r3, #3
 800450a:	d129      	bne.n	8004560 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800450c:	4b81      	ldr	r3, [pc, #516]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0f4      	b.n	8004706 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800451c:	f000 f99e 	bl	800485c <RCC_GetSysClockFreqFromPLLSource>
 8004520:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4a7c      	ldr	r2, [pc, #496]	@ (8004718 <HAL_RCC_ClockConfig+0x268>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d93f      	bls.n	80045aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800452a:	4b7a      	ldr	r3, [pc, #488]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800453e:	2b00      	cmp	r3, #0
 8004540:	d033      	beq.n	80045aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004546:	2b00      	cmp	r3, #0
 8004548:	d12f      	bne.n	80045aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800454a:	4b72      	ldr	r3, [pc, #456]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004552:	4a70      	ldr	r2, [pc, #448]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 8004554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004558:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800455a:	2380      	movs	r3, #128	@ 0x80
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	e024      	b.n	80045aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d107      	bne.n	8004578 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004568:	4b6a      	ldr	r3, [pc, #424]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d109      	bne.n	8004588 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e0c6      	b.n	8004706 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004578:	4b66      	ldr	r3, [pc, #408]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0be      	b.n	8004706 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004588:	f000 f8ce 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 800458c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	4a61      	ldr	r2, [pc, #388]	@ (8004718 <HAL_RCC_ClockConfig+0x268>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d909      	bls.n	80045aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004596:	4b5f      	ldr	r3, [pc, #380]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800459e:	4a5d      	ldr	r2, [pc, #372]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 80045a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80045a6:	2380      	movs	r3, #128	@ 0x80
 80045a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045aa:	4b5a      	ldr	r3, [pc, #360]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f023 0203 	bic.w	r2, r3, #3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	4957      	ldr	r1, [pc, #348]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045bc:	f7fd fbee 	bl	8001d9c <HAL_GetTick>
 80045c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c2:	e00a      	b.n	80045da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c4:	f7fd fbea 	bl	8001d9c <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e095      	b.n	8004706 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045da:	4b4e      	ldr	r3, [pc, #312]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 020c 	and.w	r2, r3, #12
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d1eb      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d023      	beq.n	8004640 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004604:	4b43      	ldr	r3, [pc, #268]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	4a42      	ldr	r2, [pc, #264]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 800460a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800460e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800461c:	4b3d      	ldr	r3, [pc, #244]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004624:	4a3b      	ldr	r2, [pc, #236]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 8004626:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800462a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800462c:	4b39      	ldr	r3, [pc, #228]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	4936      	ldr	r1, [pc, #216]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 800463a:	4313      	orrs	r3, r2
 800463c:	608b      	str	r3, [r1, #8]
 800463e:	e008      	b.n	8004652 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2b80      	cmp	r3, #128	@ 0x80
 8004644:	d105      	bne.n	8004652 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004646:	4b33      	ldr	r3, [pc, #204]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	4a32      	ldr	r2, [pc, #200]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 800464c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004650:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004652:	4b2f      	ldr	r3, [pc, #188]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d21d      	bcs.n	800469c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004660:	4b2b      	ldr	r3, [pc, #172]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f023 020f 	bic.w	r2, r3, #15
 8004668:	4929      	ldr	r1, [pc, #164]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	4313      	orrs	r3, r2
 800466e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004670:	f7fd fb94 	bl	8001d9c <HAL_GetTick>
 8004674:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	e00a      	b.n	800468e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004678:	f7fd fb90 	bl	8001d9c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e03b      	b.n	8004706 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	4b20      	ldr	r3, [pc, #128]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d1ed      	bne.n	8004678 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	4917      	ldr	r1, [pc, #92]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d009      	beq.n	80046da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046c6:	4b13      	ldr	r3, [pc, #76]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	490f      	ldr	r1, [pc, #60]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046da:	f000 f825 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 80046de:	4602      	mov	r2, r0
 80046e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004714 <HAL_RCC_ClockConfig+0x264>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	091b      	lsrs	r3, r3, #4
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	490c      	ldr	r1, [pc, #48]	@ (800471c <HAL_RCC_ClockConfig+0x26c>)
 80046ec:	5ccb      	ldrb	r3, [r1, r3]
 80046ee:	f003 031f 	and.w	r3, r3, #31
 80046f2:	fa22 f303 	lsr.w	r3, r2, r3
 80046f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004720 <HAL_RCC_ClockConfig+0x270>)
 80046f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004724 <HAL_RCC_ClockConfig+0x274>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fd fb00 	bl	8001d04 <HAL_InitTick>
 8004704:	4603      	mov	r3, r0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40022000 	.word	0x40022000
 8004714:	40021000 	.word	0x40021000
 8004718:	04c4b400 	.word	0x04c4b400
 800471c:	0800b1b8 	.word	0x0800b1b8
 8004720:	20000000 	.word	0x20000000
 8004724:	20000004 	.word	0x20000004

08004728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800472e:	4b2c      	ldr	r3, [pc, #176]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 030c 	and.w	r3, r3, #12
 8004736:	2b04      	cmp	r3, #4
 8004738:	d102      	bne.n	8004740 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800473a:	4b2a      	ldr	r3, [pc, #168]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	e047      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004740:	4b27      	ldr	r3, [pc, #156]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 030c 	and.w	r3, r3, #12
 8004748:	2b08      	cmp	r3, #8
 800474a:	d102      	bne.n	8004752 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800474c:	4b26      	ldr	r3, [pc, #152]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	e03e      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004752:	4b23      	ldr	r3, [pc, #140]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 030c 	and.w	r3, r3, #12
 800475a:	2b0c      	cmp	r3, #12
 800475c:	d136      	bne.n	80047cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800475e:	4b20      	ldr	r3, [pc, #128]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004768:	4b1d      	ldr	r3, [pc, #116]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	091b      	lsrs	r3, r3, #4
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	3301      	adds	r3, #1
 8004774:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b03      	cmp	r3, #3
 800477a:	d10c      	bne.n	8004796 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800477c:	4a1a      	ldr	r2, [pc, #104]	@ (80047e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	fbb2 f3f3 	udiv	r3, r2, r3
 8004784:	4a16      	ldr	r2, [pc, #88]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004786:	68d2      	ldr	r2, [r2, #12]
 8004788:	0a12      	lsrs	r2, r2, #8
 800478a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	617b      	str	r3, [r7, #20]
      break;
 8004794:	e00c      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004796:	4a13      	ldr	r2, [pc, #76]	@ (80047e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	fbb2 f3f3 	udiv	r3, r2, r3
 800479e:	4a10      	ldr	r2, [pc, #64]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047a0:	68d2      	ldr	r2, [r2, #12]
 80047a2:	0a12      	lsrs	r2, r2, #8
 80047a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047a8:	fb02 f303 	mul.w	r3, r2, r3
 80047ac:	617b      	str	r3, [r7, #20]
      break;
 80047ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047b0:	4b0b      	ldr	r3, [pc, #44]	@ (80047e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	0e5b      	lsrs	r3, r3, #25
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	3301      	adds	r3, #1
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	e001      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047d0:	693b      	ldr	r3, [r7, #16]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	371c      	adds	r7, #28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40021000 	.word	0x40021000
 80047e4:	00f42400 	.word	0x00f42400
 80047e8:	016e3600 	.word	0x016e3600

080047ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047f0:	4b03      	ldr	r3, [pc, #12]	@ (8004800 <HAL_RCC_GetHCLKFreq+0x14>)
 80047f2:	681b      	ldr	r3, [r3, #0]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20000000 	.word	0x20000000

08004804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004808:	f7ff fff0 	bl	80047ec <HAL_RCC_GetHCLKFreq>
 800480c:	4602      	mov	r2, r0
 800480e:	4b06      	ldr	r3, [pc, #24]	@ (8004828 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	0a1b      	lsrs	r3, r3, #8
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	4904      	ldr	r1, [pc, #16]	@ (800482c <HAL_RCC_GetPCLK1Freq+0x28>)
 800481a:	5ccb      	ldrb	r3, [r1, r3]
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004824:	4618      	mov	r0, r3
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40021000 	.word	0x40021000
 800482c:	0800b1c8 	.word	0x0800b1c8

08004830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004834:	f7ff ffda 	bl	80047ec <HAL_RCC_GetHCLKFreq>
 8004838:	4602      	mov	r2, r0
 800483a:	4b06      	ldr	r3, [pc, #24]	@ (8004854 <HAL_RCC_GetPCLK2Freq+0x24>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	0adb      	lsrs	r3, r3, #11
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	4904      	ldr	r1, [pc, #16]	@ (8004858 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004846:	5ccb      	ldrb	r3, [r1, r3]
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004850:	4618      	mov	r0, r3
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40021000 	.word	0x40021000
 8004858:	0800b1c8 	.word	0x0800b1c8

0800485c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004862:	4b1e      	ldr	r3, [pc, #120]	@ (80048dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800486c:	4b1b      	ldr	r3, [pc, #108]	@ (80048dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	3301      	adds	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	2b03      	cmp	r3, #3
 800487e:	d10c      	bne.n	800489a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004880:	4a17      	ldr	r2, [pc, #92]	@ (80048e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	fbb2 f3f3 	udiv	r3, r2, r3
 8004888:	4a14      	ldr	r2, [pc, #80]	@ (80048dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800488a:	68d2      	ldr	r2, [r2, #12]
 800488c:	0a12      	lsrs	r2, r2, #8
 800488e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004892:	fb02 f303 	mul.w	r3, r2, r3
 8004896:	617b      	str	r3, [r7, #20]
    break;
 8004898:	e00c      	b.n	80048b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800489a:	4a12      	ldr	r2, [pc, #72]	@ (80048e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a2:	4a0e      	ldr	r2, [pc, #56]	@ (80048dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048a4:	68d2      	ldr	r2, [r2, #12]
 80048a6:	0a12      	lsrs	r2, r2, #8
 80048a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80048ac:	fb02 f303 	mul.w	r3, r2, r3
 80048b0:	617b      	str	r3, [r7, #20]
    break;
 80048b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048b4:	4b09      	ldr	r3, [pc, #36]	@ (80048dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	0e5b      	lsrs	r3, r3, #25
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	3301      	adds	r3, #1
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80048ce:	687b      	ldr	r3, [r7, #4]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	40021000 	.word	0x40021000
 80048e0:	016e3600 	.word	0x016e3600
 80048e4:	00f42400 	.word	0x00f42400

080048e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048f0:	2300      	movs	r3, #0
 80048f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048f4:	2300      	movs	r3, #0
 80048f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 8098 	beq.w	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004906:	2300      	movs	r3, #0
 8004908:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800490a:	4b43      	ldr	r3, [pc, #268]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800490c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10d      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004916:	4b40      	ldr	r3, [pc, #256]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491a:	4a3f      	ldr	r2, [pc, #252]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800491c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004920:	6593      	str	r3, [r2, #88]	@ 0x58
 8004922:	4b3d      	ldr	r3, [pc, #244]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800492e:	2301      	movs	r3, #1
 8004930:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004932:	4b3a      	ldr	r3, [pc, #232]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a39      	ldr	r2, [pc, #228]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800493c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800493e:	f7fd fa2d 	bl	8001d9c <HAL_GetTick>
 8004942:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004944:	e009      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004946:	f7fd fa29 	bl	8001d9c <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d902      	bls.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	74fb      	strb	r3, [r7, #19]
        break;
 8004958:	e005      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800495a:	4b30      	ldr	r3, [pc, #192]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0ef      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004966:	7cfb      	ldrb	r3, [r7, #19]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d159      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800496c:	4b2a      	ldr	r3, [pc, #168]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004976:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d01e      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	429a      	cmp	r2, r3
 8004986:	d019      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004988:	4b23      	ldr	r3, [pc, #140]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004992:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004994:	4b20      	ldr	r3, [pc, #128]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499a:	4a1f      	ldr	r2, [pc, #124]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049b4:	4a18      	ldr	r2, [pc, #96]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d016      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c6:	f7fd f9e9 	bl	8001d9c <HAL_GetTick>
 80049ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049cc:	e00b      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ce:	f7fd f9e5 	bl	8001d9c <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049dc:	4293      	cmp	r3, r2
 80049de:	d902      	bls.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	74fb      	strb	r3, [r7, #19]
            break;
 80049e4:	e006      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0ec      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80049f4:	7cfb      	ldrb	r3, [r7, #19]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10b      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049fa:	4b07      	ldr	r3, [pc, #28]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a08:	4903      	ldr	r1, [pc, #12]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a10:	e008      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a12:	7cfb      	ldrb	r3, [r7, #19]
 8004a14:	74bb      	strb	r3, [r7, #18]
 8004a16:	e005      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a20:	7cfb      	ldrb	r3, [r7, #19]
 8004a22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a24:	7c7b      	ldrb	r3, [r7, #17]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d105      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a2a:	4ba7      	ldr	r3, [pc, #668]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2e:	4aa6      	ldr	r2, [pc, #664]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a42:	4ba1      	ldr	r3, [pc, #644]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a48:	f023 0203 	bic.w	r2, r3, #3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	499d      	ldr	r1, [pc, #628]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a64:	4b98      	ldr	r3, [pc, #608]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6a:	f023 020c 	bic.w	r2, r3, #12
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	4995      	ldr	r1, [pc, #596]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a86:	4b90      	ldr	r3, [pc, #576]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	498c      	ldr	r1, [pc, #560]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004aa8:	4b87      	ldr	r3, [pc, #540]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	4984      	ldr	r1, [pc, #528]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0310 	and.w	r3, r3, #16
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aca:	4b7f      	ldr	r3, [pc, #508]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	497b      	ldr	r1, [pc, #492]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004aec:	4b76      	ldr	r3, [pc, #472]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	4973      	ldr	r1, [pc, #460]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b0e:	4b6e      	ldr	r3, [pc, #440]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b14:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	496a      	ldr	r1, [pc, #424]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b30:	4b65      	ldr	r3, [pc, #404]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	4962      	ldr	r1, [pc, #392]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b52:	4b5d      	ldr	r3, [pc, #372]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	4959      	ldr	r1, [pc, #356]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b74:	4b54      	ldr	r3, [pc, #336]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b7a:	f023 0203 	bic.w	r2, r3, #3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b82:	4951      	ldr	r1, [pc, #324]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b96:	4b4c      	ldr	r3, [pc, #304]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba4:	4948      	ldr	r1, [pc, #288]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d015      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bb8:	4b43      	ldr	r3, [pc, #268]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc6:	4940      	ldr	r1, [pc, #256]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bd6:	d105      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004be2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d015      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bf0:	4b35      	ldr	r3, [pc, #212]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bfe:	4932      	ldr	r1, [pc, #200]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c0e:	d105      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c10:	4b2d      	ldr	r3, [pc, #180]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	4a2c      	ldr	r2, [pc, #176]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c1a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d015      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c28:	4b27      	ldr	r3, [pc, #156]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c36:	4924      	ldr	r1, [pc, #144]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c46:	d105      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c48:	4b1f      	ldr	r3, [pc, #124]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c52:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d015      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c60:	4b19      	ldr	r3, [pc, #100]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6e:	4916      	ldr	r1, [pc, #88]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c7e:	d105      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c80:	4b11      	ldr	r3, [pc, #68]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4a10      	ldr	r2, [pc, #64]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d019      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c98:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	4908      	ldr	r1, [pc, #32]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cb6:	d109      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb8:	4b03      	ldr	r3, [pc, #12]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4a02      	ldr	r2, [pc, #8]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cc2:	60d3      	str	r3, [r2, #12]
 8004cc4:	e002      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004cc6:	bf00      	nop
 8004cc8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d015      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004cd8:	4b29      	ldr	r3, [pc, #164]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cde:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce6:	4926      	ldr	r1, [pc, #152]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cf6:	d105      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cf8:	4b21      	ldr	r3, [pc, #132]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	4a20      	ldr	r2, [pc, #128]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d02:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d015      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004d10:	4b1b      	ldr	r3, [pc, #108]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d16:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d1e:	4918      	ldr	r1, [pc, #96]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d2e:	d105      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d30:	4b13      	ldr	r3, [pc, #76]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	4a12      	ldr	r2, [pc, #72]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d3a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d015      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d48:	4b0d      	ldr	r3, [pc, #52]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d56:	490a      	ldr	r1, [pc, #40]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d66:	d105      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d68:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4a04      	ldr	r2, [pc, #16]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d74:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40021000 	.word	0x40021000

08004d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e049      	b.n	8004e2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fc fdb2 	bl	8001914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	f000 fa26 	bl	8005214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d001      	beq.n	8004e4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e054      	b.n	8004ef6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0201 	orr.w	r2, r2, #1
 8004e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a26      	ldr	r2, [pc, #152]	@ (8004f04 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d022      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e76:	d01d      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a22      	ldr	r2, [pc, #136]	@ (8004f08 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d018      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a21      	ldr	r2, [pc, #132]	@ (8004f0c <HAL_TIM_Base_Start_IT+0xd8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d013      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1f      	ldr	r2, [pc, #124]	@ (8004f10 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004f14 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8004f18 <HAL_TIM_Base_Start_IT+0xe4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a1b      	ldr	r2, [pc, #108]	@ (8004f1c <HAL_TIM_Base_Start_IT+0xe8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d115      	bne.n	8004ee0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	4b19      	ldr	r3, [pc, #100]	@ (8004f20 <HAL_TIM_Base_Start_IT+0xec>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b06      	cmp	r3, #6
 8004ec4:	d015      	beq.n	8004ef2 <HAL_TIM_Base_Start_IT+0xbe>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ecc:	d011      	beq.n	8004ef2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0201 	orr.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ede:	e008      	b.n	8004ef2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	e000      	b.n	8004ef4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40012c00 	.word	0x40012c00
 8004f08:	40000400 	.word	0x40000400
 8004f0c:	40000800 	.word	0x40000800
 8004f10:	40000c00 	.word	0x40000c00
 8004f14:	40013400 	.word	0x40013400
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40015000 	.word	0x40015000
 8004f20:	00010007 	.word	0x00010007

08004f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d020      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01b      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0202 	mvn.w	r2, #2
 8004f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f931 	bl	80051d6 <HAL_TIM_IC_CaptureCallback>
 8004f74:	e005      	b.n	8004f82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f923 	bl	80051c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f934 	bl	80051ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d020      	beq.n	8004fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01b      	beq.n	8004fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0204 	mvn.w	r2, #4
 8004fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f90b 	bl	80051d6 <HAL_TIM_IC_CaptureCallback>
 8004fc0:	e005      	b.n	8004fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f8fd 	bl	80051c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f90e 	bl	80051ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d020      	beq.n	8005020 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01b      	beq.n	8005020 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0208 	mvn.w	r2, #8
 8004ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2204      	movs	r2, #4
 8004ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f8e5 	bl	80051d6 <HAL_TIM_IC_CaptureCallback>
 800500c:	e005      	b.n	800501a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8d7 	bl	80051c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f8e8 	bl	80051ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 0310 	and.w	r3, r3, #16
 8005026:	2b00      	cmp	r3, #0
 8005028:	d020      	beq.n	800506c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01b      	beq.n	800506c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0210 	mvn.w	r2, #16
 800503c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2208      	movs	r2, #8
 8005042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f8bf 	bl	80051d6 <HAL_TIM_IC_CaptureCallback>
 8005058:	e005      	b.n	8005066 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f8b1 	bl	80051c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f8c2 	bl	80051ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00c      	beq.n	8005090 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d007      	beq.n	8005090 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0201 	mvn.w	r2, #1
 8005088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fc fb5a 	bl	8001744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005096:	2b00      	cmp	r3, #0
 8005098:	d104      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00c      	beq.n	80050be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d007      	beq.n	80050be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80050b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f9ff 	bl	80054bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00c      	beq.n	80050e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80050da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f9f7 	bl	80054d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00c      	beq.n	8005106 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f87c 	bl	80051fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f003 0320 	and.w	r3, r3, #32
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00c      	beq.n	800512a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b00      	cmp	r3, #0
 8005118:	d007      	beq.n	800512a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f06f 0220 	mvn.w	r2, #32
 8005122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f9bf 	bl	80054a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00c      	beq.n	800514e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d007      	beq.n	800514e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f9cb 	bl	80054e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00c      	beq.n	8005172 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d007      	beq.n	8005172 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800516a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f9c3 	bl	80054f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00c      	beq.n	8005196 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800518e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f9bb 	bl	800550c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00c      	beq.n	80051ba <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80051b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f9b3 	bl	8005520 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
	...

08005214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a4c      	ldr	r2, [pc, #304]	@ (8005358 <TIM_Base_SetConfig+0x144>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d017      	beq.n	800525c <TIM_Base_SetConfig+0x48>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005232:	d013      	beq.n	800525c <TIM_Base_SetConfig+0x48>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a49      	ldr	r2, [pc, #292]	@ (800535c <TIM_Base_SetConfig+0x148>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00f      	beq.n	800525c <TIM_Base_SetConfig+0x48>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a48      	ldr	r2, [pc, #288]	@ (8005360 <TIM_Base_SetConfig+0x14c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00b      	beq.n	800525c <TIM_Base_SetConfig+0x48>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a47      	ldr	r2, [pc, #284]	@ (8005364 <TIM_Base_SetConfig+0x150>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d007      	beq.n	800525c <TIM_Base_SetConfig+0x48>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a46      	ldr	r2, [pc, #280]	@ (8005368 <TIM_Base_SetConfig+0x154>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d003      	beq.n	800525c <TIM_Base_SetConfig+0x48>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a45      	ldr	r2, [pc, #276]	@ (800536c <TIM_Base_SetConfig+0x158>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d108      	bne.n	800526e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a39      	ldr	r2, [pc, #228]	@ (8005358 <TIM_Base_SetConfig+0x144>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d023      	beq.n	80052be <TIM_Base_SetConfig+0xaa>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800527c:	d01f      	beq.n	80052be <TIM_Base_SetConfig+0xaa>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a36      	ldr	r2, [pc, #216]	@ (800535c <TIM_Base_SetConfig+0x148>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d01b      	beq.n	80052be <TIM_Base_SetConfig+0xaa>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a35      	ldr	r2, [pc, #212]	@ (8005360 <TIM_Base_SetConfig+0x14c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d017      	beq.n	80052be <TIM_Base_SetConfig+0xaa>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a34      	ldr	r2, [pc, #208]	@ (8005364 <TIM_Base_SetConfig+0x150>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <TIM_Base_SetConfig+0xaa>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a33      	ldr	r2, [pc, #204]	@ (8005368 <TIM_Base_SetConfig+0x154>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00f      	beq.n	80052be <TIM_Base_SetConfig+0xaa>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a33      	ldr	r2, [pc, #204]	@ (8005370 <TIM_Base_SetConfig+0x15c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00b      	beq.n	80052be <TIM_Base_SetConfig+0xaa>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a32      	ldr	r2, [pc, #200]	@ (8005374 <TIM_Base_SetConfig+0x160>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d007      	beq.n	80052be <TIM_Base_SetConfig+0xaa>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a31      	ldr	r2, [pc, #196]	@ (8005378 <TIM_Base_SetConfig+0x164>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d003      	beq.n	80052be <TIM_Base_SetConfig+0xaa>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a2c      	ldr	r2, [pc, #176]	@ (800536c <TIM_Base_SetConfig+0x158>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d108      	bne.n	80052d0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a18      	ldr	r2, [pc, #96]	@ (8005358 <TIM_Base_SetConfig+0x144>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d013      	beq.n	8005324 <TIM_Base_SetConfig+0x110>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005368 <TIM_Base_SetConfig+0x154>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00f      	beq.n	8005324 <TIM_Base_SetConfig+0x110>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a1a      	ldr	r2, [pc, #104]	@ (8005370 <TIM_Base_SetConfig+0x15c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00b      	beq.n	8005324 <TIM_Base_SetConfig+0x110>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a19      	ldr	r2, [pc, #100]	@ (8005374 <TIM_Base_SetConfig+0x160>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d007      	beq.n	8005324 <TIM_Base_SetConfig+0x110>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a18      	ldr	r2, [pc, #96]	@ (8005378 <TIM_Base_SetConfig+0x164>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d003      	beq.n	8005324 <TIM_Base_SetConfig+0x110>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a13      	ldr	r2, [pc, #76]	@ (800536c <TIM_Base_SetConfig+0x158>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d103      	bne.n	800532c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b01      	cmp	r3, #1
 800533c:	d105      	bne.n	800534a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f023 0201 	bic.w	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	611a      	str	r2, [r3, #16]
  }
}
 800534a:	bf00      	nop
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40000400 	.word	0x40000400
 8005360:	40000800 	.word	0x40000800
 8005364:	40000c00 	.word	0x40000c00
 8005368:	40013400 	.word	0x40013400
 800536c:	40015000 	.word	0x40015000
 8005370:	40014000 	.word	0x40014000
 8005374:	40014400 	.word	0x40014400
 8005378:	40014800 	.word	0x40014800

0800537c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005390:	2302      	movs	r3, #2
 8005392:	e074      	b.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a34      	ldr	r2, [pc, #208]	@ (800548c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d009      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a33      	ldr	r2, [pc, #204]	@ (8005490 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d004      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a31      	ldr	r2, [pc, #196]	@ (8005494 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d108      	bne.n	80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80053d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80053ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a21      	ldr	r2, [pc, #132]	@ (800548c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d022      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005414:	d01d      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1f      	ldr	r2, [pc, #124]	@ (8005498 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d018      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1d      	ldr	r2, [pc, #116]	@ (800549c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d013      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1c      	ldr	r2, [pc, #112]	@ (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00e      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a15      	ldr	r2, [pc, #84]	@ (8005490 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d009      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a18      	ldr	r2, [pc, #96]	@ (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a11      	ldr	r2, [pc, #68]	@ (8005494 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d10c      	bne.n	800546c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005458:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	4313      	orrs	r3, r2
 8005462:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40012c00 	.word	0x40012c00
 8005490:	40013400 	.word	0x40013400
 8005494:	40015000 	.word	0x40015000
 8005498:	40000400 	.word	0x40000400
 800549c:	40000800 	.word	0x40000800
 80054a0:	40000c00 	.word	0x40000c00
 80054a4:	40014000 	.word	0x40014000

080054a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e042      	b.n	80055cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554c:	2b00      	cmp	r3, #0
 800554e:	d106      	bne.n	800555e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7fc f9fb 	bl	8001954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2224      	movs	r2, #36	@ 0x24
 8005562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0201 	bic.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fef6 	bl	8006370 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fbf7 	bl	8005d78 <UART_SetConfig>
 800558a:	4603      	mov	r3, r0
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e01b      	b.n	80055cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0201 	orr.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 ff75 	bl	80064b4 <UART_CheckIdleState>
 80055ca:	4603      	mov	r3, r0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	@ 0x28
 80055d8:	af02      	add	r7, sp, #8
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	4613      	mov	r3, r2
 80055e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d17b      	bne.n	80056e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <HAL_UART_Transmit+0x26>
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e074      	b.n	80056e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2221      	movs	r2, #33	@ 0x21
 800560a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800560e:	f7fc fbc5 	bl	8001d9c <HAL_GetTick>
 8005612:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	88fa      	ldrh	r2, [r7, #6]
 8005618:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	88fa      	ldrh	r2, [r7, #6]
 8005620:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800562c:	d108      	bne.n	8005640 <HAL_UART_Transmit+0x6c>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d104      	bne.n	8005640 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005636:	2300      	movs	r3, #0
 8005638:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	61bb      	str	r3, [r7, #24]
 800563e:	e003      	b.n	8005648 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005644:	2300      	movs	r3, #0
 8005646:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005648:	e030      	b.n	80056ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2200      	movs	r2, #0
 8005652:	2180      	movs	r1, #128	@ 0x80
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 ffd7 	bl	8006608 <UART_WaitOnFlagUntilTimeout>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d005      	beq.n	800566c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2220      	movs	r2, #32
 8005664:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e03d      	b.n	80056e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10b      	bne.n	800568a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005680:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	3302      	adds	r3, #2
 8005686:	61bb      	str	r3, [r7, #24]
 8005688:	e007      	b.n	800569a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	781a      	ldrb	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	3301      	adds	r3, #1
 8005698:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1c8      	bne.n	800564a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2200      	movs	r2, #0
 80056c0:	2140      	movs	r1, #64	@ 0x40
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 ffa0 	bl	8006608 <UART_WaitOnFlagUntilTimeout>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d005      	beq.n	80056da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e006      	b.n	80056e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	e000      	b.n	80056e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80056e6:	2302      	movs	r3, #2
  }
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3720      	adds	r7, #32
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b0ba      	sub	sp, #232	@ 0xe8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005716:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800571a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800571e:	4013      	ands	r3, r2
 8005720:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005724:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005728:	2b00      	cmp	r3, #0
 800572a:	d11b      	bne.n	8005764 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800572c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005730:	f003 0320 	and.w	r3, r3, #32
 8005734:	2b00      	cmp	r3, #0
 8005736:	d015      	beq.n	8005764 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b00      	cmp	r3, #0
 8005742:	d105      	bne.n	8005750 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d009      	beq.n	8005764 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 82e3 	beq.w	8005d20 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	4798      	blx	r3
      }
      return;
 8005762:	e2dd      	b.n	8005d20 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 8123 	beq.w	80059b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800576e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005772:	4b8d      	ldr	r3, [pc, #564]	@ (80059a8 <HAL_UART_IRQHandler+0x2b8>)
 8005774:	4013      	ands	r3, r2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800577a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800577e:	4b8b      	ldr	r3, [pc, #556]	@ (80059ac <HAL_UART_IRQHandler+0x2bc>)
 8005780:	4013      	ands	r3, r2
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 8116 	beq.w	80059b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	d011      	beq.n	80057b8 <HAL_UART_IRQHandler+0xc8>
 8005794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00b      	beq.n	80057b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2201      	movs	r2, #1
 80057a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ae:	f043 0201 	orr.w	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d011      	beq.n	80057e8 <HAL_UART_IRQHandler+0xf8>
 80057c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00b      	beq.n	80057e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2202      	movs	r2, #2
 80057d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057de:	f043 0204 	orr.w	r2, r3, #4
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d011      	beq.n	8005818 <HAL_UART_IRQHandler+0x128>
 80057f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00b      	beq.n	8005818 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2204      	movs	r2, #4
 8005806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580e:	f043 0202 	orr.w	r2, r3, #2
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d017      	beq.n	8005854 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b00      	cmp	r3, #0
 800582e:	d105      	bne.n	800583c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005830:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005834:	4b5c      	ldr	r3, [pc, #368]	@ (80059a8 <HAL_UART_IRQHandler+0x2b8>)
 8005836:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00b      	beq.n	8005854 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2208      	movs	r2, #8
 8005842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800584a:	f043 0208 	orr.w	r2, r3, #8
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800585c:	2b00      	cmp	r3, #0
 800585e:	d012      	beq.n	8005886 <HAL_UART_IRQHandler+0x196>
 8005860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005864:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00c      	beq.n	8005886 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005874:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800587c:	f043 0220 	orr.w	r2, r3, #32
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8249 	beq.w	8005d24 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b00      	cmp	r3, #0
 800589c:	d013      	beq.n	80058c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800589e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d105      	bne.n	80058b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80058aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d007      	beq.n	80058c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058da:	2b40      	cmp	r3, #64	@ 0x40
 80058dc:	d005      	beq.n	80058ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d054      	beq.n	8005994 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fef9 	bl	80066e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fa:	2b40      	cmp	r3, #64	@ 0x40
 80058fc:	d146      	bne.n	800598c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3308      	adds	r3, #8
 8005904:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005908:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005914:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005918:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800591c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3308      	adds	r3, #8
 8005926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800592a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800592e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1d9      	bne.n	80058fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005950:	2b00      	cmp	r3, #0
 8005952:	d017      	beq.n	8005984 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800595a:	4a15      	ldr	r2, [pc, #84]	@ (80059b0 <HAL_UART_IRQHandler+0x2c0>)
 800595c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005964:	4618      	mov	r0, r3
 8005966:	f7fc fbaf 	bl	80020c8 <HAL_DMA_Abort_IT>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d019      	beq.n	80059a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800597e:	4610      	mov	r0, r2
 8005980:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005982:	e00f      	b.n	80059a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f9e1 	bl	8005d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800598a:	e00b      	b.n	80059a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f9dd 	bl	8005d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005992:	e007      	b.n	80059a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f9d9 	bl	8005d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80059a2:	e1bf      	b.n	8005d24 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a4:	bf00      	nop
    return;
 80059a6:	e1bd      	b.n	8005d24 <HAL_UART_IRQHandler+0x634>
 80059a8:	10000001 	.word	0x10000001
 80059ac:	04000120 	.word	0x04000120
 80059b0:	080067af 	.word	0x080067af

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	f040 8153 	bne.w	8005c64 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80059be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059c2:	f003 0310 	and.w	r3, r3, #16
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 814c 	beq.w	8005c64 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8145 	beq.w	8005c64 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2210      	movs	r2, #16
 80059e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ec:	2b40      	cmp	r3, #64	@ 0x40
 80059ee:	f040 80bb 	bne.w	8005b68 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 818f 	beq.w	8005d28 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a14:	429a      	cmp	r2, r3
 8005a16:	f080 8187 	bcs.w	8005d28 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f040 8087 	bne.w	8005b46 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a44:	e853 3f00 	ldrex	r3, [r3]
 8005a48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a66:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a72:	e841 2300 	strex	r3, r2, [r1]
 8005a76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1da      	bne.n	8005a38 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3308      	adds	r3, #8
 8005a88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a94:	f023 0301 	bic.w	r3, r3, #1
 8005a98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005aa6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005aaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005aae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ab8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e1      	bne.n	8005a82 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ace:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ad0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3308      	adds	r3, #8
 8005ade:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ae2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ae4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ae8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005af0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e3      	bne.n	8005abe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b14:	f023 0310 	bic.w	r3, r3, #16
 8005b18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1e4      	bne.n	8005b04 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fc fa68 	bl	8002016 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2202      	movs	r2, #2
 8005b4a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f8fd 	bl	8005d60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b66:	e0df      	b.n	8005d28 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 80d1 	beq.w	8005d2c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005b8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 80cc 	beq.w	8005d2c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9c:	e853 3f00 	ldrex	r3, [r3]
 8005ba0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ba8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bb8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e4      	bne.n	8005b94 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3308      	adds	r3, #8
 8005bd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005be0:	f023 0301 	bic.w	r3, r3, #1
 8005be4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3308      	adds	r3, #8
 8005bee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005bf2:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e1      	bne.n	8005bca <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0310 	bic.w	r3, r3, #16
 8005c2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	461a      	mov	r2, r3
 8005c38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005c3c:	61fb      	str	r3, [r7, #28]
 8005c3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	69b9      	ldr	r1, [r7, #24]
 8005c42:	69fa      	ldr	r2, [r7, #28]
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	617b      	str	r3, [r7, #20]
   return(result);
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e4      	bne.n	8005c1a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f87f 	bl	8005d60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c62:	e063      	b.n	8005d2c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00e      	beq.n	8005c8e <HAL_UART_IRQHandler+0x59e>
 8005c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d008      	beq.n	8005c8e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005c84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fdd2 	bl	8006830 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c8c:	e051      	b.n	8005d32 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d014      	beq.n	8005cc4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d105      	bne.n	8005cb2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005caa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d008      	beq.n	8005cc4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d03a      	beq.n	8005d30 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	4798      	blx	r3
    }
    return;
 8005cc2:	e035      	b.n	8005d30 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d009      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x5f4>
 8005cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fd7c 	bl	80067da <UART_EndTransmit_IT>
    return;
 8005ce2:	e026      	b.n	8005d32 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ce8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d009      	beq.n	8005d04 <HAL_UART_IRQHandler+0x614>
 8005cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cf4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fdab 	bl	8006858 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d02:	e016      	b.n	8005d32 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d010      	beq.n	8005d32 <HAL_UART_IRQHandler+0x642>
 8005d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	da0c      	bge.n	8005d32 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fd93 	bl	8006844 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d1e:	e008      	b.n	8005d32 <HAL_UART_IRQHandler+0x642>
      return;
 8005d20:	bf00      	nop
 8005d22:	e006      	b.n	8005d32 <HAL_UART_IRQHandler+0x642>
    return;
 8005d24:	bf00      	nop
 8005d26:	e004      	b.n	8005d32 <HAL_UART_IRQHandler+0x642>
      return;
 8005d28:	bf00      	nop
 8005d2a:	e002      	b.n	8005d32 <HAL_UART_IRQHandler+0x642>
      return;
 8005d2c:	bf00      	nop
 8005d2e:	e000      	b.n	8005d32 <HAL_UART_IRQHandler+0x642>
    return;
 8005d30:	bf00      	nop
  }
}
 8005d32:	37e8      	adds	r7, #232	@ 0xe8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d7c:	b08c      	sub	sp, #48	@ 0x30
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	431a      	orrs	r2, r3
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	431a      	orrs	r2, r3
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	4baa      	ldr	r3, [pc, #680]	@ (8006050 <UART_SetConfig+0x2d8>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005db0:	430b      	orrs	r3, r1
 8005db2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a9f      	ldr	r2, [pc, #636]	@ (8006054 <UART_SetConfig+0x2dc>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d004      	beq.n	8005de4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005de0:	4313      	orrs	r3, r2
 8005de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005dee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	6812      	ldr	r2, [r2, #0]
 8005df6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e02:	f023 010f 	bic.w	r1, r3, #15
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a90      	ldr	r2, [pc, #576]	@ (8006058 <UART_SetConfig+0x2e0>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d125      	bne.n	8005e68 <UART_SetConfig+0xf0>
 8005e1c:	4b8f      	ldr	r3, [pc, #572]	@ (800605c <UART_SetConfig+0x2e4>)
 8005e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d81a      	bhi.n	8005e60 <UART_SetConfig+0xe8>
 8005e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e30 <UART_SetConfig+0xb8>)
 8005e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e30:	08005e41 	.word	0x08005e41
 8005e34:	08005e51 	.word	0x08005e51
 8005e38:	08005e49 	.word	0x08005e49
 8005e3c:	08005e59 	.word	0x08005e59
 8005e40:	2301      	movs	r3, #1
 8005e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e46:	e116      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e4e:	e112      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005e50:	2304      	movs	r3, #4
 8005e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e56:	e10e      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005e58:	2308      	movs	r3, #8
 8005e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e5e:	e10a      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005e60:	2310      	movs	r3, #16
 8005e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e66:	e106      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a7c      	ldr	r2, [pc, #496]	@ (8006060 <UART_SetConfig+0x2e8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d138      	bne.n	8005ee4 <UART_SetConfig+0x16c>
 8005e72:	4b7a      	ldr	r3, [pc, #488]	@ (800605c <UART_SetConfig+0x2e4>)
 8005e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e78:	f003 030c 	and.w	r3, r3, #12
 8005e7c:	2b0c      	cmp	r3, #12
 8005e7e:	d82d      	bhi.n	8005edc <UART_SetConfig+0x164>
 8005e80:	a201      	add	r2, pc, #4	@ (adr r2, 8005e88 <UART_SetConfig+0x110>)
 8005e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e86:	bf00      	nop
 8005e88:	08005ebd 	.word	0x08005ebd
 8005e8c:	08005edd 	.word	0x08005edd
 8005e90:	08005edd 	.word	0x08005edd
 8005e94:	08005edd 	.word	0x08005edd
 8005e98:	08005ecd 	.word	0x08005ecd
 8005e9c:	08005edd 	.word	0x08005edd
 8005ea0:	08005edd 	.word	0x08005edd
 8005ea4:	08005edd 	.word	0x08005edd
 8005ea8:	08005ec5 	.word	0x08005ec5
 8005eac:	08005edd 	.word	0x08005edd
 8005eb0:	08005edd 	.word	0x08005edd
 8005eb4:	08005edd 	.word	0x08005edd
 8005eb8:	08005ed5 	.word	0x08005ed5
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ec2:	e0d8      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eca:	e0d4      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005ecc:	2304      	movs	r3, #4
 8005ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ed2:	e0d0      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005ed4:	2308      	movs	r3, #8
 8005ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eda:	e0cc      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005edc:	2310      	movs	r3, #16
 8005ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ee2:	e0c8      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a5e      	ldr	r2, [pc, #376]	@ (8006064 <UART_SetConfig+0x2ec>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d125      	bne.n	8005f3a <UART_SetConfig+0x1c2>
 8005eee:	4b5b      	ldr	r3, [pc, #364]	@ (800605c <UART_SetConfig+0x2e4>)
 8005ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005ef8:	2b30      	cmp	r3, #48	@ 0x30
 8005efa:	d016      	beq.n	8005f2a <UART_SetConfig+0x1b2>
 8005efc:	2b30      	cmp	r3, #48	@ 0x30
 8005efe:	d818      	bhi.n	8005f32 <UART_SetConfig+0x1ba>
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d00a      	beq.n	8005f1a <UART_SetConfig+0x1a2>
 8005f04:	2b20      	cmp	r3, #32
 8005f06:	d814      	bhi.n	8005f32 <UART_SetConfig+0x1ba>
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <UART_SetConfig+0x19a>
 8005f0c:	2b10      	cmp	r3, #16
 8005f0e:	d008      	beq.n	8005f22 <UART_SetConfig+0x1aa>
 8005f10:	e00f      	b.n	8005f32 <UART_SetConfig+0x1ba>
 8005f12:	2300      	movs	r3, #0
 8005f14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f18:	e0ad      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f20:	e0a9      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005f22:	2304      	movs	r3, #4
 8005f24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f28:	e0a5      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005f2a:	2308      	movs	r3, #8
 8005f2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f30:	e0a1      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005f32:	2310      	movs	r3, #16
 8005f34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f38:	e09d      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a4a      	ldr	r2, [pc, #296]	@ (8006068 <UART_SetConfig+0x2f0>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d125      	bne.n	8005f90 <UART_SetConfig+0x218>
 8005f44:	4b45      	ldr	r3, [pc, #276]	@ (800605c <UART_SetConfig+0x2e4>)
 8005f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005f4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f50:	d016      	beq.n	8005f80 <UART_SetConfig+0x208>
 8005f52:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f54:	d818      	bhi.n	8005f88 <UART_SetConfig+0x210>
 8005f56:	2b80      	cmp	r3, #128	@ 0x80
 8005f58:	d00a      	beq.n	8005f70 <UART_SetConfig+0x1f8>
 8005f5a:	2b80      	cmp	r3, #128	@ 0x80
 8005f5c:	d814      	bhi.n	8005f88 <UART_SetConfig+0x210>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <UART_SetConfig+0x1f0>
 8005f62:	2b40      	cmp	r3, #64	@ 0x40
 8005f64:	d008      	beq.n	8005f78 <UART_SetConfig+0x200>
 8005f66:	e00f      	b.n	8005f88 <UART_SetConfig+0x210>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f6e:	e082      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005f70:	2302      	movs	r3, #2
 8005f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f76:	e07e      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005f78:	2304      	movs	r3, #4
 8005f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f7e:	e07a      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005f80:	2308      	movs	r3, #8
 8005f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f86:	e076      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005f8e:	e072      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a35      	ldr	r2, [pc, #212]	@ (800606c <UART_SetConfig+0x2f4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d12a      	bne.n	8005ff0 <UART_SetConfig+0x278>
 8005f9a:	4b30      	ldr	r3, [pc, #192]	@ (800605c <UART_SetConfig+0x2e4>)
 8005f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fa8:	d01a      	beq.n	8005fe0 <UART_SetConfig+0x268>
 8005faa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fae:	d81b      	bhi.n	8005fe8 <UART_SetConfig+0x270>
 8005fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fb4:	d00c      	beq.n	8005fd0 <UART_SetConfig+0x258>
 8005fb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fba:	d815      	bhi.n	8005fe8 <UART_SetConfig+0x270>
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <UART_SetConfig+0x250>
 8005fc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fc4:	d008      	beq.n	8005fd8 <UART_SetConfig+0x260>
 8005fc6:	e00f      	b.n	8005fe8 <UART_SetConfig+0x270>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fce:	e052      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fd6:	e04e      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005fd8:	2304      	movs	r3, #4
 8005fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fde:	e04a      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005fe0:	2308      	movs	r3, #8
 8005fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fe6:	e046      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005fe8:	2310      	movs	r3, #16
 8005fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fee:	e042      	b.n	8006076 <UART_SetConfig+0x2fe>
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a17      	ldr	r2, [pc, #92]	@ (8006054 <UART_SetConfig+0x2dc>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d13a      	bne.n	8006070 <UART_SetConfig+0x2f8>
 8005ffa:	4b18      	ldr	r3, [pc, #96]	@ (800605c <UART_SetConfig+0x2e4>)
 8005ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006000:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006004:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006008:	d01a      	beq.n	8006040 <UART_SetConfig+0x2c8>
 800600a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800600e:	d81b      	bhi.n	8006048 <UART_SetConfig+0x2d0>
 8006010:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006014:	d00c      	beq.n	8006030 <UART_SetConfig+0x2b8>
 8006016:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800601a:	d815      	bhi.n	8006048 <UART_SetConfig+0x2d0>
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <UART_SetConfig+0x2b0>
 8006020:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006024:	d008      	beq.n	8006038 <UART_SetConfig+0x2c0>
 8006026:	e00f      	b.n	8006048 <UART_SetConfig+0x2d0>
 8006028:	2300      	movs	r3, #0
 800602a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800602e:	e022      	b.n	8006076 <UART_SetConfig+0x2fe>
 8006030:	2302      	movs	r3, #2
 8006032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006036:	e01e      	b.n	8006076 <UART_SetConfig+0x2fe>
 8006038:	2304      	movs	r3, #4
 800603a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800603e:	e01a      	b.n	8006076 <UART_SetConfig+0x2fe>
 8006040:	2308      	movs	r3, #8
 8006042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006046:	e016      	b.n	8006076 <UART_SetConfig+0x2fe>
 8006048:	2310      	movs	r3, #16
 800604a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800604e:	e012      	b.n	8006076 <UART_SetConfig+0x2fe>
 8006050:	cfff69f3 	.word	0xcfff69f3
 8006054:	40008000 	.word	0x40008000
 8006058:	40013800 	.word	0x40013800
 800605c:	40021000 	.word	0x40021000
 8006060:	40004400 	.word	0x40004400
 8006064:	40004800 	.word	0x40004800
 8006068:	40004c00 	.word	0x40004c00
 800606c:	40005000 	.word	0x40005000
 8006070:	2310      	movs	r3, #16
 8006072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4aae      	ldr	r2, [pc, #696]	@ (8006334 <UART_SetConfig+0x5bc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	f040 8097 	bne.w	80061b0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006082:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006086:	2b08      	cmp	r3, #8
 8006088:	d823      	bhi.n	80060d2 <UART_SetConfig+0x35a>
 800608a:	a201      	add	r2, pc, #4	@ (adr r2, 8006090 <UART_SetConfig+0x318>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080060b5 	.word	0x080060b5
 8006094:	080060d3 	.word	0x080060d3
 8006098:	080060bd 	.word	0x080060bd
 800609c:	080060d3 	.word	0x080060d3
 80060a0:	080060c3 	.word	0x080060c3
 80060a4:	080060d3 	.word	0x080060d3
 80060a8:	080060d3 	.word	0x080060d3
 80060ac:	080060d3 	.word	0x080060d3
 80060b0:	080060cb 	.word	0x080060cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060b4:	f7fe fba6 	bl	8004804 <HAL_RCC_GetPCLK1Freq>
 80060b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060ba:	e010      	b.n	80060de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060bc:	4b9e      	ldr	r3, [pc, #632]	@ (8006338 <UART_SetConfig+0x5c0>)
 80060be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060c0:	e00d      	b.n	80060de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060c2:	f7fe fb31 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 80060c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060c8:	e009      	b.n	80060de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060d0:	e005      	b.n	80060de <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80060dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 8130 	beq.w	8006346 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ea:	4a94      	ldr	r2, [pc, #592]	@ (800633c <UART_SetConfig+0x5c4>)
 80060ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060f0:	461a      	mov	r2, r3
 80060f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	4613      	mov	r3, r2
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	4413      	add	r3, r2
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	429a      	cmp	r2, r3
 8006108:	d305      	bcc.n	8006116 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	429a      	cmp	r2, r3
 8006114:	d903      	bls.n	800611e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800611c:	e113      	b.n	8006346 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	2200      	movs	r2, #0
 8006122:	60bb      	str	r3, [r7, #8]
 8006124:	60fa      	str	r2, [r7, #12]
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612a:	4a84      	ldr	r2, [pc, #528]	@ (800633c <UART_SetConfig+0x5c4>)
 800612c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006130:	b29b      	uxth	r3, r3
 8006132:	2200      	movs	r2, #0
 8006134:	603b      	str	r3, [r7, #0]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800613c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006140:	f7fa fdca 	bl	8000cd8 <__aeabi_uldivmod>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4610      	mov	r0, r2
 800614a:	4619      	mov	r1, r3
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	f04f 0300 	mov.w	r3, #0
 8006154:	020b      	lsls	r3, r1, #8
 8006156:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800615a:	0202      	lsls	r2, r0, #8
 800615c:	6979      	ldr	r1, [r7, #20]
 800615e:	6849      	ldr	r1, [r1, #4]
 8006160:	0849      	lsrs	r1, r1, #1
 8006162:	2000      	movs	r0, #0
 8006164:	460c      	mov	r4, r1
 8006166:	4605      	mov	r5, r0
 8006168:	eb12 0804 	adds.w	r8, r2, r4
 800616c:	eb43 0905 	adc.w	r9, r3, r5
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	469a      	mov	sl, r3
 8006178:	4693      	mov	fp, r2
 800617a:	4652      	mov	r2, sl
 800617c:	465b      	mov	r3, fp
 800617e:	4640      	mov	r0, r8
 8006180:	4649      	mov	r1, r9
 8006182:	f7fa fda9 	bl	8000cd8 <__aeabi_uldivmod>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	4613      	mov	r3, r2
 800618c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006194:	d308      	bcc.n	80061a8 <UART_SetConfig+0x430>
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800619c:	d204      	bcs.n	80061a8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6a3a      	ldr	r2, [r7, #32]
 80061a4:	60da      	str	r2, [r3, #12]
 80061a6:	e0ce      	b.n	8006346 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80061ae:	e0ca      	b.n	8006346 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061b8:	d166      	bne.n	8006288 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80061ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d827      	bhi.n	8006212 <UART_SetConfig+0x49a>
 80061c2:	a201      	add	r2, pc, #4	@ (adr r2, 80061c8 <UART_SetConfig+0x450>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	080061f5 	.word	0x080061f5
 80061d0:	080061fd 	.word	0x080061fd
 80061d4:	08006213 	.word	0x08006213
 80061d8:	08006203 	.word	0x08006203
 80061dc:	08006213 	.word	0x08006213
 80061e0:	08006213 	.word	0x08006213
 80061e4:	08006213 	.word	0x08006213
 80061e8:	0800620b 	.word	0x0800620b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ec:	f7fe fb0a 	bl	8004804 <HAL_RCC_GetPCLK1Freq>
 80061f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061f2:	e014      	b.n	800621e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061f4:	f7fe fb1c 	bl	8004830 <HAL_RCC_GetPCLK2Freq>
 80061f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80061fa:	e010      	b.n	800621e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061fc:	4b4e      	ldr	r3, [pc, #312]	@ (8006338 <UART_SetConfig+0x5c0>)
 80061fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006200:	e00d      	b.n	800621e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006202:	f7fe fa91 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 8006206:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006208:	e009      	b.n	800621e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800620a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800620e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006210:	e005      	b.n	800621e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800621c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 8090 	beq.w	8006346 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622a:	4a44      	ldr	r2, [pc, #272]	@ (800633c <UART_SetConfig+0x5c4>)
 800622c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006230:	461a      	mov	r2, r3
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	fbb3 f3f2 	udiv	r3, r3, r2
 8006238:	005a      	lsls	r2, r3, #1
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	085b      	lsrs	r3, r3, #1
 8006240:	441a      	add	r2, r3
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	fbb2 f3f3 	udiv	r3, r2, r3
 800624a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	2b0f      	cmp	r3, #15
 8006250:	d916      	bls.n	8006280 <UART_SetConfig+0x508>
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006258:	d212      	bcs.n	8006280 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	b29b      	uxth	r3, r3
 800625e:	f023 030f 	bic.w	r3, r3, #15
 8006262:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	085b      	lsrs	r3, r3, #1
 8006268:	b29b      	uxth	r3, r3
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	b29a      	uxth	r2, r3
 8006270:	8bfb      	ldrh	r3, [r7, #30]
 8006272:	4313      	orrs	r3, r2
 8006274:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	8bfa      	ldrh	r2, [r7, #30]
 800627c:	60da      	str	r2, [r3, #12]
 800627e:	e062      	b.n	8006346 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006286:	e05e      	b.n	8006346 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006288:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800628c:	2b08      	cmp	r3, #8
 800628e:	d828      	bhi.n	80062e2 <UART_SetConfig+0x56a>
 8006290:	a201      	add	r2, pc, #4	@ (adr r2, 8006298 <UART_SetConfig+0x520>)
 8006292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006296:	bf00      	nop
 8006298:	080062bd 	.word	0x080062bd
 800629c:	080062c5 	.word	0x080062c5
 80062a0:	080062cd 	.word	0x080062cd
 80062a4:	080062e3 	.word	0x080062e3
 80062a8:	080062d3 	.word	0x080062d3
 80062ac:	080062e3 	.word	0x080062e3
 80062b0:	080062e3 	.word	0x080062e3
 80062b4:	080062e3 	.word	0x080062e3
 80062b8:	080062db 	.word	0x080062db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062bc:	f7fe faa2 	bl	8004804 <HAL_RCC_GetPCLK1Freq>
 80062c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062c2:	e014      	b.n	80062ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062c4:	f7fe fab4 	bl	8004830 <HAL_RCC_GetPCLK2Freq>
 80062c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062ca:	e010      	b.n	80062ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006338 <UART_SetConfig+0x5c0>)
 80062ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062d0:	e00d      	b.n	80062ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062d2:	f7fe fa29 	bl	8004728 <HAL_RCC_GetSysClockFreq>
 80062d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062d8:	e009      	b.n	80062ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062e0:	e005      	b.n	80062ee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80062ec:	bf00      	nop
    }

    if (pclk != 0U)
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d028      	beq.n	8006346 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f8:	4a10      	ldr	r2, [pc, #64]	@ (800633c <UART_SetConfig+0x5c4>)
 80062fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062fe:	461a      	mov	r2, r3
 8006300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006302:	fbb3 f2f2 	udiv	r2, r3, r2
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	085b      	lsrs	r3, r3, #1
 800630c:	441a      	add	r2, r3
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	fbb2 f3f3 	udiv	r3, r2, r3
 8006316:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	2b0f      	cmp	r3, #15
 800631c:	d910      	bls.n	8006340 <UART_SetConfig+0x5c8>
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006324:	d20c      	bcs.n	8006340 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	b29a      	uxth	r2, r3
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60da      	str	r2, [r3, #12]
 8006330:	e009      	b.n	8006346 <UART_SetConfig+0x5ce>
 8006332:	bf00      	nop
 8006334:	40008000 	.word	0x40008000
 8006338:	00f42400 	.word	0x00f42400
 800633c:	0800b1d0 	.word	0x0800b1d0
      }
      else
      {
        ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2201      	movs	r2, #1
 800634a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2201      	movs	r2, #1
 8006352:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2200      	movs	r2, #0
 800635a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2200      	movs	r2, #0
 8006360:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006362:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006366:	4618      	mov	r0, r3
 8006368:	3730      	adds	r7, #48	@ 0x30
 800636a:	46bd      	mov	sp, r7
 800636c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00a      	beq.n	800639a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	430a      	orrs	r2, r1
 8006398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e2:	f003 0304 	and.w	r3, r3, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006404:	f003 0310 	and.w	r3, r3, #16
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00a      	beq.n	8006422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644c:	2b00      	cmp	r3, #0
 800644e:	d01a      	beq.n	8006486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800646a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800646e:	d10a      	bne.n	8006486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800648a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	605a      	str	r2, [r3, #4]
  }
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b098      	sub	sp, #96	@ 0x60
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064c4:	f7fb fc6a 	bl	8001d9c <HAL_GetTick>
 80064c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0308 	and.w	r3, r3, #8
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d12f      	bne.n	8006538 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064e0:	2200      	movs	r2, #0
 80064e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f88e 	bl	8006608 <UART_WaitOnFlagUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d022      	beq.n	8006538 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006506:	653b      	str	r3, [r7, #80]	@ 0x50
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006510:	647b      	str	r3, [r7, #68]	@ 0x44
 8006512:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006516:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800651e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e6      	bne.n	80064f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e063      	b.n	8006600 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0304 	and.w	r3, r3, #4
 8006542:	2b04      	cmp	r3, #4
 8006544:	d149      	bne.n	80065da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006546:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800654e:	2200      	movs	r2, #0
 8006550:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f857 	bl	8006608 <UART_WaitOnFlagUntilTimeout>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d03c      	beq.n	80065da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	e853 3f00 	ldrex	r3, [r3]
 800656c:	623b      	str	r3, [r7, #32]
   return(result);
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800657e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006580:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800658c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e6      	bne.n	8006560 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3308      	adds	r3, #8
 8006598:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f023 0301 	bic.w	r3, r3, #1
 80065a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3308      	adds	r3, #8
 80065b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065b2:	61fa      	str	r2, [r7, #28]
 80065b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	69b9      	ldr	r1, [r7, #24]
 80065b8:	69fa      	ldr	r2, [r7, #28]
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	617b      	str	r3, [r7, #20]
   return(result);
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e5      	bne.n	8006592 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e012      	b.n	8006600 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2220      	movs	r2, #32
 80065de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3758      	adds	r7, #88	@ 0x58
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	4613      	mov	r3, r2
 8006616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006618:	e04f      	b.n	80066ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006620:	d04b      	beq.n	80066ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006622:	f7fb fbbb 	bl	8001d9c <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	429a      	cmp	r2, r3
 8006630:	d302      	bcc.n	8006638 <UART_WaitOnFlagUntilTimeout+0x30>
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e04e      	b.n	80066da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	2b00      	cmp	r3, #0
 8006648:	d037      	beq.n	80066ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b80      	cmp	r3, #128	@ 0x80
 800664e:	d034      	beq.n	80066ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2b40      	cmp	r3, #64	@ 0x40
 8006654:	d031      	beq.n	80066ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	f003 0308 	and.w	r3, r3, #8
 8006660:	2b08      	cmp	r3, #8
 8006662:	d110      	bne.n	8006686 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2208      	movs	r2, #8
 800666a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 f838 	bl	80066e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2208      	movs	r2, #8
 8006676:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e029      	b.n	80066da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006694:	d111      	bne.n	80066ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800669e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 f81e 	bl	80066e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2220      	movs	r2, #32
 80066aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e00f      	b.n	80066da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	69da      	ldr	r2, [r3, #28]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	4013      	ands	r3, r2
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	bf0c      	ite	eq
 80066ca:	2301      	moveq	r3, #1
 80066cc:	2300      	movne	r3, #0
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	79fb      	ldrb	r3, [r7, #7]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d0a0      	beq.n	800661a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b095      	sub	sp, #84	@ 0x54
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006708:	643b      	str	r3, [r7, #64]	@ 0x40
 800670a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800670e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006710:	e841 2300 	strex	r3, r2, [r1]
 8006714:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1e6      	bne.n	80066ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3308      	adds	r3, #8
 8006722:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	e853 3f00 	ldrex	r3, [r3]
 800672a:	61fb      	str	r3, [r7, #28]
   return(result);
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006732:	f023 0301 	bic.w	r3, r3, #1
 8006736:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3308      	adds	r3, #8
 800673e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006740:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006742:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006746:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006748:	e841 2300 	strex	r3, r2, [r1]
 800674c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800674e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e3      	bne.n	800671c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006758:	2b01      	cmp	r3, #1
 800675a:	d118      	bne.n	800678e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	60bb      	str	r3, [r7, #8]
   return(result);
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	f023 0310 	bic.w	r3, r3, #16
 8006770:	647b      	str	r3, [r7, #68]	@ 0x44
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800677a:	61bb      	str	r3, [r7, #24]
 800677c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6979      	ldr	r1, [r7, #20]
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	613b      	str	r3, [r7, #16]
   return(result);
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e6      	bne.n	800675c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2220      	movs	r2, #32
 8006792:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80067a2:	bf00      	nop
 80067a4:	3754      	adds	r7, #84	@ 0x54
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff fabd 	bl	8005d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067d2:	bf00      	nop
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b088      	sub	sp, #32
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	e853 3f00 	ldrex	r3, [r3]
 80067ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067f6:	61fb      	str	r3, [r7, #28]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	461a      	mov	r2, r3
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	61bb      	str	r3, [r7, #24]
 8006802:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6979      	ldr	r1, [r7, #20]
 8006806:	69ba      	ldr	r2, [r7, #24]
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	613b      	str	r3, [r7, #16]
   return(result);
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e6      	bne.n	80067e2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2220      	movs	r2, #32
 8006818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7ff fa88 	bl	8005d38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006828:	bf00      	nop
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <HAL_UARTEx_DisableFifoMode+0x16>
 800687e:	2302      	movs	r3, #2
 8006880:	e027      	b.n	80068d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2224      	movs	r2, #36	@ 0x24
 800688e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0201 	bic.w	r2, r2, #1
 80068a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80068b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2220      	movs	r2, #32
 80068c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d101      	bne.n	80068f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80068f2:	2302      	movs	r3, #2
 80068f4:	e02d      	b.n	8006952 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2224      	movs	r2, #36	@ 0x24
 8006902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f022 0201 	bic.w	r2, r2, #1
 800691c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f850 	bl	80069d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b084      	sub	sp, #16
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800696a:	2b01      	cmp	r3, #1
 800696c:	d101      	bne.n	8006972 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800696e:	2302      	movs	r3, #2
 8006970:	e02d      	b.n	80069ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2224      	movs	r2, #36	@ 0x24
 800697e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0201 	bic.w	r2, r2, #1
 8006998:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f812 	bl	80069d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2220      	movs	r2, #32
 80069c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
	...

080069d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d108      	bne.n	80069fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80069f8:	e031      	b.n	8006a5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80069fa:	2308      	movs	r3, #8
 80069fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80069fe:	2308      	movs	r3, #8
 8006a00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	0e5b      	lsrs	r3, r3, #25
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	0f5b      	lsrs	r3, r3, #29
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a22:	7bbb      	ldrb	r3, [r7, #14]
 8006a24:	7b3a      	ldrb	r2, [r7, #12]
 8006a26:	4911      	ldr	r1, [pc, #68]	@ (8006a6c <UARTEx_SetNbDataToProcess+0x94>)
 8006a28:	5c8a      	ldrb	r2, [r1, r2]
 8006a2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a2e:	7b3a      	ldrb	r2, [r7, #12]
 8006a30:	490f      	ldr	r1, [pc, #60]	@ (8006a70 <UARTEx_SetNbDataToProcess+0x98>)
 8006a32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a34:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	7b7a      	ldrb	r2, [r7, #13]
 8006a44:	4909      	ldr	r1, [pc, #36]	@ (8006a6c <UARTEx_SetNbDataToProcess+0x94>)
 8006a46:	5c8a      	ldrb	r2, [r1, r2]
 8006a48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a4c:	7b7a      	ldrb	r2, [r7, #13]
 8006a4e:	4908      	ldr	r1, [pc, #32]	@ (8006a70 <UARTEx_SetNbDataToProcess+0x98>)
 8006a50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a52:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006a5e:	bf00      	nop
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	0800b1e8 	.word	0x0800b1e8
 8006a70:	0800b1f0 	.word	0x0800b1f0

08006a74 <__cvt>:
 8006a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a78:	ec57 6b10 	vmov	r6, r7, d0
 8006a7c:	2f00      	cmp	r7, #0
 8006a7e:	460c      	mov	r4, r1
 8006a80:	4619      	mov	r1, r3
 8006a82:	463b      	mov	r3, r7
 8006a84:	bfbb      	ittet	lt
 8006a86:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006a8a:	461f      	movlt	r7, r3
 8006a8c:	2300      	movge	r3, #0
 8006a8e:	232d      	movlt	r3, #45	@ 0x2d
 8006a90:	700b      	strb	r3, [r1, #0]
 8006a92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a94:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006a98:	4691      	mov	r9, r2
 8006a9a:	f023 0820 	bic.w	r8, r3, #32
 8006a9e:	bfbc      	itt	lt
 8006aa0:	4632      	movlt	r2, r6
 8006aa2:	4616      	movlt	r6, r2
 8006aa4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006aa8:	d005      	beq.n	8006ab6 <__cvt+0x42>
 8006aaa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006aae:	d100      	bne.n	8006ab2 <__cvt+0x3e>
 8006ab0:	3401      	adds	r4, #1
 8006ab2:	2102      	movs	r1, #2
 8006ab4:	e000      	b.n	8006ab8 <__cvt+0x44>
 8006ab6:	2103      	movs	r1, #3
 8006ab8:	ab03      	add	r3, sp, #12
 8006aba:	9301      	str	r3, [sp, #4]
 8006abc:	ab02      	add	r3, sp, #8
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	ec47 6b10 	vmov	d0, r6, r7
 8006ac4:	4653      	mov	r3, sl
 8006ac6:	4622      	mov	r2, r4
 8006ac8:	f001 f876 	bl	8007bb8 <_dtoa_r>
 8006acc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006ad0:	4605      	mov	r5, r0
 8006ad2:	d119      	bne.n	8006b08 <__cvt+0x94>
 8006ad4:	f019 0f01 	tst.w	r9, #1
 8006ad8:	d00e      	beq.n	8006af8 <__cvt+0x84>
 8006ada:	eb00 0904 	add.w	r9, r0, r4
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	4639      	mov	r1, r7
 8006ae6:	f7fa f817 	bl	8000b18 <__aeabi_dcmpeq>
 8006aea:	b108      	cbz	r0, 8006af0 <__cvt+0x7c>
 8006aec:	f8cd 900c 	str.w	r9, [sp, #12]
 8006af0:	2230      	movs	r2, #48	@ 0x30
 8006af2:	9b03      	ldr	r3, [sp, #12]
 8006af4:	454b      	cmp	r3, r9
 8006af6:	d31e      	bcc.n	8006b36 <__cvt+0xc2>
 8006af8:	9b03      	ldr	r3, [sp, #12]
 8006afa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006afc:	1b5b      	subs	r3, r3, r5
 8006afe:	4628      	mov	r0, r5
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	b004      	add	sp, #16
 8006b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b0c:	eb00 0904 	add.w	r9, r0, r4
 8006b10:	d1e5      	bne.n	8006ade <__cvt+0x6a>
 8006b12:	7803      	ldrb	r3, [r0, #0]
 8006b14:	2b30      	cmp	r3, #48	@ 0x30
 8006b16:	d10a      	bne.n	8006b2e <__cvt+0xba>
 8006b18:	2200      	movs	r2, #0
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	4639      	mov	r1, r7
 8006b20:	f7f9 fffa 	bl	8000b18 <__aeabi_dcmpeq>
 8006b24:	b918      	cbnz	r0, 8006b2e <__cvt+0xba>
 8006b26:	f1c4 0401 	rsb	r4, r4, #1
 8006b2a:	f8ca 4000 	str.w	r4, [sl]
 8006b2e:	f8da 3000 	ldr.w	r3, [sl]
 8006b32:	4499      	add	r9, r3
 8006b34:	e7d3      	b.n	8006ade <__cvt+0x6a>
 8006b36:	1c59      	adds	r1, r3, #1
 8006b38:	9103      	str	r1, [sp, #12]
 8006b3a:	701a      	strb	r2, [r3, #0]
 8006b3c:	e7d9      	b.n	8006af2 <__cvt+0x7e>

08006b3e <__exponent>:
 8006b3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b40:	2900      	cmp	r1, #0
 8006b42:	bfba      	itte	lt
 8006b44:	4249      	neglt	r1, r1
 8006b46:	232d      	movlt	r3, #45	@ 0x2d
 8006b48:	232b      	movge	r3, #43	@ 0x2b
 8006b4a:	2909      	cmp	r1, #9
 8006b4c:	7002      	strb	r2, [r0, #0]
 8006b4e:	7043      	strb	r3, [r0, #1]
 8006b50:	dd29      	ble.n	8006ba6 <__exponent+0x68>
 8006b52:	f10d 0307 	add.w	r3, sp, #7
 8006b56:	461d      	mov	r5, r3
 8006b58:	270a      	movs	r7, #10
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b60:	fb07 1416 	mls	r4, r7, r6, r1
 8006b64:	3430      	adds	r4, #48	@ 0x30
 8006b66:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	2c63      	cmp	r4, #99	@ 0x63
 8006b6e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006b72:	4631      	mov	r1, r6
 8006b74:	dcf1      	bgt.n	8006b5a <__exponent+0x1c>
 8006b76:	3130      	adds	r1, #48	@ 0x30
 8006b78:	1e94      	subs	r4, r2, #2
 8006b7a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b7e:	1c41      	adds	r1, r0, #1
 8006b80:	4623      	mov	r3, r4
 8006b82:	42ab      	cmp	r3, r5
 8006b84:	d30a      	bcc.n	8006b9c <__exponent+0x5e>
 8006b86:	f10d 0309 	add.w	r3, sp, #9
 8006b8a:	1a9b      	subs	r3, r3, r2
 8006b8c:	42ac      	cmp	r4, r5
 8006b8e:	bf88      	it	hi
 8006b90:	2300      	movhi	r3, #0
 8006b92:	3302      	adds	r3, #2
 8006b94:	4403      	add	r3, r0
 8006b96:	1a18      	subs	r0, r3, r0
 8006b98:	b003      	add	sp, #12
 8006b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b9c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006ba0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006ba4:	e7ed      	b.n	8006b82 <__exponent+0x44>
 8006ba6:	2330      	movs	r3, #48	@ 0x30
 8006ba8:	3130      	adds	r1, #48	@ 0x30
 8006baa:	7083      	strb	r3, [r0, #2]
 8006bac:	70c1      	strb	r1, [r0, #3]
 8006bae:	1d03      	adds	r3, r0, #4
 8006bb0:	e7f1      	b.n	8006b96 <__exponent+0x58>
	...

08006bb4 <_printf_float>:
 8006bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb8:	b08d      	sub	sp, #52	@ 0x34
 8006bba:	460c      	mov	r4, r1
 8006bbc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006bc0:	4616      	mov	r6, r2
 8006bc2:	461f      	mov	r7, r3
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	f000 feef 	bl	80079a8 <_localeconv_r>
 8006bca:	6803      	ldr	r3, [r0, #0]
 8006bcc:	9304      	str	r3, [sp, #16]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7f9 fb76 	bl	80002c0 <strlen>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8006bdc:	9005      	str	r0, [sp, #20]
 8006bde:	3307      	adds	r3, #7
 8006be0:	f023 0307 	bic.w	r3, r3, #7
 8006be4:	f103 0208 	add.w	r2, r3, #8
 8006be8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006bec:	f8d4 b000 	ldr.w	fp, [r4]
 8006bf0:	f8c8 2000 	str.w	r2, [r8]
 8006bf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bf8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006bfc:	9307      	str	r3, [sp, #28]
 8006bfe:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006c06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c0a:	4b9c      	ldr	r3, [pc, #624]	@ (8006e7c <_printf_float+0x2c8>)
 8006c0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c10:	f7f9 ffb4 	bl	8000b7c <__aeabi_dcmpun>
 8006c14:	bb70      	cbnz	r0, 8006c74 <_printf_float+0xc0>
 8006c16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c1a:	4b98      	ldr	r3, [pc, #608]	@ (8006e7c <_printf_float+0x2c8>)
 8006c1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c20:	f7f9 ff8e 	bl	8000b40 <__aeabi_dcmple>
 8006c24:	bb30      	cbnz	r0, 8006c74 <_printf_float+0xc0>
 8006c26:	2200      	movs	r2, #0
 8006c28:	2300      	movs	r3, #0
 8006c2a:	4640      	mov	r0, r8
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	f7f9 ff7d 	bl	8000b2c <__aeabi_dcmplt>
 8006c32:	b110      	cbz	r0, 8006c3a <_printf_float+0x86>
 8006c34:	232d      	movs	r3, #45	@ 0x2d
 8006c36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c3a:	4a91      	ldr	r2, [pc, #580]	@ (8006e80 <_printf_float+0x2cc>)
 8006c3c:	4b91      	ldr	r3, [pc, #580]	@ (8006e84 <_printf_float+0x2d0>)
 8006c3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c42:	bf94      	ite	ls
 8006c44:	4690      	movls	r8, r2
 8006c46:	4698      	movhi	r8, r3
 8006c48:	2303      	movs	r3, #3
 8006c4a:	6123      	str	r3, [r4, #16]
 8006c4c:	f02b 0304 	bic.w	r3, fp, #4
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	f04f 0900 	mov.w	r9, #0
 8006c56:	9700      	str	r7, [sp, #0]
 8006c58:	4633      	mov	r3, r6
 8006c5a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 f9d2 	bl	8007008 <_printf_common>
 8006c64:	3001      	adds	r0, #1
 8006c66:	f040 808d 	bne.w	8006d84 <_printf_float+0x1d0>
 8006c6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c6e:	b00d      	add	sp, #52	@ 0x34
 8006c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c74:	4642      	mov	r2, r8
 8006c76:	464b      	mov	r3, r9
 8006c78:	4640      	mov	r0, r8
 8006c7a:	4649      	mov	r1, r9
 8006c7c:	f7f9 ff7e 	bl	8000b7c <__aeabi_dcmpun>
 8006c80:	b140      	cbz	r0, 8006c94 <_printf_float+0xe0>
 8006c82:	464b      	mov	r3, r9
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	bfbc      	itt	lt
 8006c88:	232d      	movlt	r3, #45	@ 0x2d
 8006c8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c8e:	4a7e      	ldr	r2, [pc, #504]	@ (8006e88 <_printf_float+0x2d4>)
 8006c90:	4b7e      	ldr	r3, [pc, #504]	@ (8006e8c <_printf_float+0x2d8>)
 8006c92:	e7d4      	b.n	8006c3e <_printf_float+0x8a>
 8006c94:	6863      	ldr	r3, [r4, #4]
 8006c96:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006c9a:	9206      	str	r2, [sp, #24]
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	d13b      	bne.n	8006d18 <_printf_float+0x164>
 8006ca0:	2306      	movs	r3, #6
 8006ca2:	6063      	str	r3, [r4, #4]
 8006ca4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006ca8:	2300      	movs	r3, #0
 8006caa:	6022      	str	r2, [r4, #0]
 8006cac:	9303      	str	r3, [sp, #12]
 8006cae:	ab0a      	add	r3, sp, #40	@ 0x28
 8006cb0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006cb4:	ab09      	add	r3, sp, #36	@ 0x24
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	6861      	ldr	r1, [r4, #4]
 8006cba:	ec49 8b10 	vmov	d0, r8, r9
 8006cbe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f7ff fed6 	bl	8006a74 <__cvt>
 8006cc8:	9b06      	ldr	r3, [sp, #24]
 8006cca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ccc:	2b47      	cmp	r3, #71	@ 0x47
 8006cce:	4680      	mov	r8, r0
 8006cd0:	d129      	bne.n	8006d26 <_printf_float+0x172>
 8006cd2:	1cc8      	adds	r0, r1, #3
 8006cd4:	db02      	blt.n	8006cdc <_printf_float+0x128>
 8006cd6:	6863      	ldr	r3, [r4, #4]
 8006cd8:	4299      	cmp	r1, r3
 8006cda:	dd41      	ble.n	8006d60 <_printf_float+0x1ac>
 8006cdc:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ce0:	fa5f fa8a 	uxtb.w	sl, sl
 8006ce4:	3901      	subs	r1, #1
 8006ce6:	4652      	mov	r2, sl
 8006ce8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006cec:	9109      	str	r1, [sp, #36]	@ 0x24
 8006cee:	f7ff ff26 	bl	8006b3e <__exponent>
 8006cf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cf4:	1813      	adds	r3, r2, r0
 8006cf6:	2a01      	cmp	r2, #1
 8006cf8:	4681      	mov	r9, r0
 8006cfa:	6123      	str	r3, [r4, #16]
 8006cfc:	dc02      	bgt.n	8006d04 <_printf_float+0x150>
 8006cfe:	6822      	ldr	r2, [r4, #0]
 8006d00:	07d2      	lsls	r2, r2, #31
 8006d02:	d501      	bpl.n	8006d08 <_printf_float+0x154>
 8006d04:	3301      	adds	r3, #1
 8006d06:	6123      	str	r3, [r4, #16]
 8006d08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0a2      	beq.n	8006c56 <_printf_float+0xa2>
 8006d10:	232d      	movs	r3, #45	@ 0x2d
 8006d12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d16:	e79e      	b.n	8006c56 <_printf_float+0xa2>
 8006d18:	9a06      	ldr	r2, [sp, #24]
 8006d1a:	2a47      	cmp	r2, #71	@ 0x47
 8006d1c:	d1c2      	bne.n	8006ca4 <_printf_float+0xf0>
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1c0      	bne.n	8006ca4 <_printf_float+0xf0>
 8006d22:	2301      	movs	r3, #1
 8006d24:	e7bd      	b.n	8006ca2 <_printf_float+0xee>
 8006d26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d2a:	d9db      	bls.n	8006ce4 <_printf_float+0x130>
 8006d2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d30:	d118      	bne.n	8006d64 <_printf_float+0x1b0>
 8006d32:	2900      	cmp	r1, #0
 8006d34:	6863      	ldr	r3, [r4, #4]
 8006d36:	dd0b      	ble.n	8006d50 <_printf_float+0x19c>
 8006d38:	6121      	str	r1, [r4, #16]
 8006d3a:	b913      	cbnz	r3, 8006d42 <_printf_float+0x18e>
 8006d3c:	6822      	ldr	r2, [r4, #0]
 8006d3e:	07d0      	lsls	r0, r2, #31
 8006d40:	d502      	bpl.n	8006d48 <_printf_float+0x194>
 8006d42:	3301      	adds	r3, #1
 8006d44:	440b      	add	r3, r1
 8006d46:	6123      	str	r3, [r4, #16]
 8006d48:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d4a:	f04f 0900 	mov.w	r9, #0
 8006d4e:	e7db      	b.n	8006d08 <_printf_float+0x154>
 8006d50:	b913      	cbnz	r3, 8006d58 <_printf_float+0x1a4>
 8006d52:	6822      	ldr	r2, [r4, #0]
 8006d54:	07d2      	lsls	r2, r2, #31
 8006d56:	d501      	bpl.n	8006d5c <_printf_float+0x1a8>
 8006d58:	3302      	adds	r3, #2
 8006d5a:	e7f4      	b.n	8006d46 <_printf_float+0x192>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e7f2      	b.n	8006d46 <_printf_float+0x192>
 8006d60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d66:	4299      	cmp	r1, r3
 8006d68:	db05      	blt.n	8006d76 <_printf_float+0x1c2>
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	6121      	str	r1, [r4, #16]
 8006d6e:	07d8      	lsls	r0, r3, #31
 8006d70:	d5ea      	bpl.n	8006d48 <_printf_float+0x194>
 8006d72:	1c4b      	adds	r3, r1, #1
 8006d74:	e7e7      	b.n	8006d46 <_printf_float+0x192>
 8006d76:	2900      	cmp	r1, #0
 8006d78:	bfd4      	ite	le
 8006d7a:	f1c1 0202 	rsble	r2, r1, #2
 8006d7e:	2201      	movgt	r2, #1
 8006d80:	4413      	add	r3, r2
 8006d82:	e7e0      	b.n	8006d46 <_printf_float+0x192>
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	055a      	lsls	r2, r3, #21
 8006d88:	d407      	bmi.n	8006d9a <_printf_float+0x1e6>
 8006d8a:	6923      	ldr	r3, [r4, #16]
 8006d8c:	4642      	mov	r2, r8
 8006d8e:	4631      	mov	r1, r6
 8006d90:	4628      	mov	r0, r5
 8006d92:	47b8      	blx	r7
 8006d94:	3001      	adds	r0, #1
 8006d96:	d12b      	bne.n	8006df0 <_printf_float+0x23c>
 8006d98:	e767      	b.n	8006c6a <_printf_float+0xb6>
 8006d9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d9e:	f240 80dd 	bls.w	8006f5c <_printf_float+0x3a8>
 8006da2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006da6:	2200      	movs	r2, #0
 8006da8:	2300      	movs	r3, #0
 8006daa:	f7f9 feb5 	bl	8000b18 <__aeabi_dcmpeq>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d033      	beq.n	8006e1a <_printf_float+0x266>
 8006db2:	4a37      	ldr	r2, [pc, #220]	@ (8006e90 <_printf_float+0x2dc>)
 8006db4:	2301      	movs	r3, #1
 8006db6:	4631      	mov	r1, r6
 8006db8:	4628      	mov	r0, r5
 8006dba:	47b8      	blx	r7
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	f43f af54 	beq.w	8006c6a <_printf_float+0xb6>
 8006dc2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006dc6:	4543      	cmp	r3, r8
 8006dc8:	db02      	blt.n	8006dd0 <_printf_float+0x21c>
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	07d8      	lsls	r0, r3, #31
 8006dce:	d50f      	bpl.n	8006df0 <_printf_float+0x23c>
 8006dd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dd4:	4631      	mov	r1, r6
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	47b8      	blx	r7
 8006dda:	3001      	adds	r0, #1
 8006ddc:	f43f af45 	beq.w	8006c6a <_printf_float+0xb6>
 8006de0:	f04f 0900 	mov.w	r9, #0
 8006de4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006de8:	f104 0a1a 	add.w	sl, r4, #26
 8006dec:	45c8      	cmp	r8, r9
 8006dee:	dc09      	bgt.n	8006e04 <_printf_float+0x250>
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	079b      	lsls	r3, r3, #30
 8006df4:	f100 8103 	bmi.w	8006ffe <_printf_float+0x44a>
 8006df8:	68e0      	ldr	r0, [r4, #12]
 8006dfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dfc:	4298      	cmp	r0, r3
 8006dfe:	bfb8      	it	lt
 8006e00:	4618      	movlt	r0, r3
 8006e02:	e734      	b.n	8006c6e <_printf_float+0xba>
 8006e04:	2301      	movs	r3, #1
 8006e06:	4652      	mov	r2, sl
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	47b8      	blx	r7
 8006e0e:	3001      	adds	r0, #1
 8006e10:	f43f af2b 	beq.w	8006c6a <_printf_float+0xb6>
 8006e14:	f109 0901 	add.w	r9, r9, #1
 8006e18:	e7e8      	b.n	8006dec <_printf_float+0x238>
 8006e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	dc39      	bgt.n	8006e94 <_printf_float+0x2e0>
 8006e20:	4a1b      	ldr	r2, [pc, #108]	@ (8006e90 <_printf_float+0x2dc>)
 8006e22:	2301      	movs	r3, #1
 8006e24:	4631      	mov	r1, r6
 8006e26:	4628      	mov	r0, r5
 8006e28:	47b8      	blx	r7
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	f43f af1d 	beq.w	8006c6a <_printf_float+0xb6>
 8006e30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006e34:	ea59 0303 	orrs.w	r3, r9, r3
 8006e38:	d102      	bne.n	8006e40 <_printf_float+0x28c>
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	07d9      	lsls	r1, r3, #31
 8006e3e:	d5d7      	bpl.n	8006df0 <_printf_float+0x23c>
 8006e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e44:	4631      	mov	r1, r6
 8006e46:	4628      	mov	r0, r5
 8006e48:	47b8      	blx	r7
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	f43f af0d 	beq.w	8006c6a <_printf_float+0xb6>
 8006e50:	f04f 0a00 	mov.w	sl, #0
 8006e54:	f104 0b1a 	add.w	fp, r4, #26
 8006e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e5a:	425b      	negs	r3, r3
 8006e5c:	4553      	cmp	r3, sl
 8006e5e:	dc01      	bgt.n	8006e64 <_printf_float+0x2b0>
 8006e60:	464b      	mov	r3, r9
 8006e62:	e793      	b.n	8006d8c <_printf_float+0x1d8>
 8006e64:	2301      	movs	r3, #1
 8006e66:	465a      	mov	r2, fp
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	47b8      	blx	r7
 8006e6e:	3001      	adds	r0, #1
 8006e70:	f43f aefb 	beq.w	8006c6a <_printf_float+0xb6>
 8006e74:	f10a 0a01 	add.w	sl, sl, #1
 8006e78:	e7ee      	b.n	8006e58 <_printf_float+0x2a4>
 8006e7a:	bf00      	nop
 8006e7c:	7fefffff 	.word	0x7fefffff
 8006e80:	0800b1f8 	.word	0x0800b1f8
 8006e84:	0800b1fc 	.word	0x0800b1fc
 8006e88:	0800b200 	.word	0x0800b200
 8006e8c:	0800b204 	.word	0x0800b204
 8006e90:	0800b208 	.word	0x0800b208
 8006e94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e9a:	4553      	cmp	r3, sl
 8006e9c:	bfa8      	it	ge
 8006e9e:	4653      	movge	r3, sl
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	4699      	mov	r9, r3
 8006ea4:	dc36      	bgt.n	8006f14 <_printf_float+0x360>
 8006ea6:	f04f 0b00 	mov.w	fp, #0
 8006eaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006eae:	f104 021a 	add.w	r2, r4, #26
 8006eb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006eb4:	9306      	str	r3, [sp, #24]
 8006eb6:	eba3 0309 	sub.w	r3, r3, r9
 8006eba:	455b      	cmp	r3, fp
 8006ebc:	dc31      	bgt.n	8006f22 <_printf_float+0x36e>
 8006ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec0:	459a      	cmp	sl, r3
 8006ec2:	dc3a      	bgt.n	8006f3a <_printf_float+0x386>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	07da      	lsls	r2, r3, #31
 8006ec8:	d437      	bmi.n	8006f3a <_printf_float+0x386>
 8006eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ecc:	ebaa 0903 	sub.w	r9, sl, r3
 8006ed0:	9b06      	ldr	r3, [sp, #24]
 8006ed2:	ebaa 0303 	sub.w	r3, sl, r3
 8006ed6:	4599      	cmp	r9, r3
 8006ed8:	bfa8      	it	ge
 8006eda:	4699      	movge	r9, r3
 8006edc:	f1b9 0f00 	cmp.w	r9, #0
 8006ee0:	dc33      	bgt.n	8006f4a <_printf_float+0x396>
 8006ee2:	f04f 0800 	mov.w	r8, #0
 8006ee6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006eea:	f104 0b1a 	add.w	fp, r4, #26
 8006eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ef0:	ebaa 0303 	sub.w	r3, sl, r3
 8006ef4:	eba3 0309 	sub.w	r3, r3, r9
 8006ef8:	4543      	cmp	r3, r8
 8006efa:	f77f af79 	ble.w	8006df0 <_printf_float+0x23c>
 8006efe:	2301      	movs	r3, #1
 8006f00:	465a      	mov	r2, fp
 8006f02:	4631      	mov	r1, r6
 8006f04:	4628      	mov	r0, r5
 8006f06:	47b8      	blx	r7
 8006f08:	3001      	adds	r0, #1
 8006f0a:	f43f aeae 	beq.w	8006c6a <_printf_float+0xb6>
 8006f0e:	f108 0801 	add.w	r8, r8, #1
 8006f12:	e7ec      	b.n	8006eee <_printf_float+0x33a>
 8006f14:	4642      	mov	r2, r8
 8006f16:	4631      	mov	r1, r6
 8006f18:	4628      	mov	r0, r5
 8006f1a:	47b8      	blx	r7
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d1c2      	bne.n	8006ea6 <_printf_float+0x2f2>
 8006f20:	e6a3      	b.n	8006c6a <_printf_float+0xb6>
 8006f22:	2301      	movs	r3, #1
 8006f24:	4631      	mov	r1, r6
 8006f26:	4628      	mov	r0, r5
 8006f28:	9206      	str	r2, [sp, #24]
 8006f2a:	47b8      	blx	r7
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	f43f ae9c 	beq.w	8006c6a <_printf_float+0xb6>
 8006f32:	9a06      	ldr	r2, [sp, #24]
 8006f34:	f10b 0b01 	add.w	fp, fp, #1
 8006f38:	e7bb      	b.n	8006eb2 <_printf_float+0x2fe>
 8006f3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f3e:	4631      	mov	r1, r6
 8006f40:	4628      	mov	r0, r5
 8006f42:	47b8      	blx	r7
 8006f44:	3001      	adds	r0, #1
 8006f46:	d1c0      	bne.n	8006eca <_printf_float+0x316>
 8006f48:	e68f      	b.n	8006c6a <_printf_float+0xb6>
 8006f4a:	9a06      	ldr	r2, [sp, #24]
 8006f4c:	464b      	mov	r3, r9
 8006f4e:	4442      	add	r2, r8
 8006f50:	4631      	mov	r1, r6
 8006f52:	4628      	mov	r0, r5
 8006f54:	47b8      	blx	r7
 8006f56:	3001      	adds	r0, #1
 8006f58:	d1c3      	bne.n	8006ee2 <_printf_float+0x32e>
 8006f5a:	e686      	b.n	8006c6a <_printf_float+0xb6>
 8006f5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f60:	f1ba 0f01 	cmp.w	sl, #1
 8006f64:	dc01      	bgt.n	8006f6a <_printf_float+0x3b6>
 8006f66:	07db      	lsls	r3, r3, #31
 8006f68:	d536      	bpl.n	8006fd8 <_printf_float+0x424>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	4642      	mov	r2, r8
 8006f6e:	4631      	mov	r1, r6
 8006f70:	4628      	mov	r0, r5
 8006f72:	47b8      	blx	r7
 8006f74:	3001      	adds	r0, #1
 8006f76:	f43f ae78 	beq.w	8006c6a <_printf_float+0xb6>
 8006f7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f7e:	4631      	mov	r1, r6
 8006f80:	4628      	mov	r0, r5
 8006f82:	47b8      	blx	r7
 8006f84:	3001      	adds	r0, #1
 8006f86:	f43f ae70 	beq.w	8006c6a <_printf_float+0xb6>
 8006f8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2300      	movs	r3, #0
 8006f92:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006f96:	f7f9 fdbf 	bl	8000b18 <__aeabi_dcmpeq>
 8006f9a:	b9c0      	cbnz	r0, 8006fce <_printf_float+0x41a>
 8006f9c:	4653      	mov	r3, sl
 8006f9e:	f108 0201 	add.w	r2, r8, #1
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	47b8      	blx	r7
 8006fa8:	3001      	adds	r0, #1
 8006faa:	d10c      	bne.n	8006fc6 <_printf_float+0x412>
 8006fac:	e65d      	b.n	8006c6a <_printf_float+0xb6>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	465a      	mov	r2, fp
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	47b8      	blx	r7
 8006fb8:	3001      	adds	r0, #1
 8006fba:	f43f ae56 	beq.w	8006c6a <_printf_float+0xb6>
 8006fbe:	f108 0801 	add.w	r8, r8, #1
 8006fc2:	45d0      	cmp	r8, sl
 8006fc4:	dbf3      	blt.n	8006fae <_printf_float+0x3fa>
 8006fc6:	464b      	mov	r3, r9
 8006fc8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006fcc:	e6df      	b.n	8006d8e <_printf_float+0x1da>
 8006fce:	f04f 0800 	mov.w	r8, #0
 8006fd2:	f104 0b1a 	add.w	fp, r4, #26
 8006fd6:	e7f4      	b.n	8006fc2 <_printf_float+0x40e>
 8006fd8:	2301      	movs	r3, #1
 8006fda:	4642      	mov	r2, r8
 8006fdc:	e7e1      	b.n	8006fa2 <_printf_float+0x3ee>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	464a      	mov	r2, r9
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	47b8      	blx	r7
 8006fe8:	3001      	adds	r0, #1
 8006fea:	f43f ae3e 	beq.w	8006c6a <_printf_float+0xb6>
 8006fee:	f108 0801 	add.w	r8, r8, #1
 8006ff2:	68e3      	ldr	r3, [r4, #12]
 8006ff4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ff6:	1a5b      	subs	r3, r3, r1
 8006ff8:	4543      	cmp	r3, r8
 8006ffa:	dcf0      	bgt.n	8006fde <_printf_float+0x42a>
 8006ffc:	e6fc      	b.n	8006df8 <_printf_float+0x244>
 8006ffe:	f04f 0800 	mov.w	r8, #0
 8007002:	f104 0919 	add.w	r9, r4, #25
 8007006:	e7f4      	b.n	8006ff2 <_printf_float+0x43e>

08007008 <_printf_common>:
 8007008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800700c:	4616      	mov	r6, r2
 800700e:	4698      	mov	r8, r3
 8007010:	688a      	ldr	r2, [r1, #8]
 8007012:	690b      	ldr	r3, [r1, #16]
 8007014:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007018:	4293      	cmp	r3, r2
 800701a:	bfb8      	it	lt
 800701c:	4613      	movlt	r3, r2
 800701e:	6033      	str	r3, [r6, #0]
 8007020:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007024:	4607      	mov	r7, r0
 8007026:	460c      	mov	r4, r1
 8007028:	b10a      	cbz	r2, 800702e <_printf_common+0x26>
 800702a:	3301      	adds	r3, #1
 800702c:	6033      	str	r3, [r6, #0]
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	0699      	lsls	r1, r3, #26
 8007032:	bf42      	ittt	mi
 8007034:	6833      	ldrmi	r3, [r6, #0]
 8007036:	3302      	addmi	r3, #2
 8007038:	6033      	strmi	r3, [r6, #0]
 800703a:	6825      	ldr	r5, [r4, #0]
 800703c:	f015 0506 	ands.w	r5, r5, #6
 8007040:	d106      	bne.n	8007050 <_printf_common+0x48>
 8007042:	f104 0a19 	add.w	sl, r4, #25
 8007046:	68e3      	ldr	r3, [r4, #12]
 8007048:	6832      	ldr	r2, [r6, #0]
 800704a:	1a9b      	subs	r3, r3, r2
 800704c:	42ab      	cmp	r3, r5
 800704e:	dc26      	bgt.n	800709e <_printf_common+0x96>
 8007050:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007054:	6822      	ldr	r2, [r4, #0]
 8007056:	3b00      	subs	r3, #0
 8007058:	bf18      	it	ne
 800705a:	2301      	movne	r3, #1
 800705c:	0692      	lsls	r2, r2, #26
 800705e:	d42b      	bmi.n	80070b8 <_printf_common+0xb0>
 8007060:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007064:	4641      	mov	r1, r8
 8007066:	4638      	mov	r0, r7
 8007068:	47c8      	blx	r9
 800706a:	3001      	adds	r0, #1
 800706c:	d01e      	beq.n	80070ac <_printf_common+0xa4>
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	6922      	ldr	r2, [r4, #16]
 8007072:	f003 0306 	and.w	r3, r3, #6
 8007076:	2b04      	cmp	r3, #4
 8007078:	bf02      	ittt	eq
 800707a:	68e5      	ldreq	r5, [r4, #12]
 800707c:	6833      	ldreq	r3, [r6, #0]
 800707e:	1aed      	subeq	r5, r5, r3
 8007080:	68a3      	ldr	r3, [r4, #8]
 8007082:	bf0c      	ite	eq
 8007084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007088:	2500      	movne	r5, #0
 800708a:	4293      	cmp	r3, r2
 800708c:	bfc4      	itt	gt
 800708e:	1a9b      	subgt	r3, r3, r2
 8007090:	18ed      	addgt	r5, r5, r3
 8007092:	2600      	movs	r6, #0
 8007094:	341a      	adds	r4, #26
 8007096:	42b5      	cmp	r5, r6
 8007098:	d11a      	bne.n	80070d0 <_printf_common+0xc8>
 800709a:	2000      	movs	r0, #0
 800709c:	e008      	b.n	80070b0 <_printf_common+0xa8>
 800709e:	2301      	movs	r3, #1
 80070a0:	4652      	mov	r2, sl
 80070a2:	4641      	mov	r1, r8
 80070a4:	4638      	mov	r0, r7
 80070a6:	47c8      	blx	r9
 80070a8:	3001      	adds	r0, #1
 80070aa:	d103      	bne.n	80070b4 <_printf_common+0xac>
 80070ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b4:	3501      	adds	r5, #1
 80070b6:	e7c6      	b.n	8007046 <_printf_common+0x3e>
 80070b8:	18e1      	adds	r1, r4, r3
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	2030      	movs	r0, #48	@ 0x30
 80070be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070c2:	4422      	add	r2, r4
 80070c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070cc:	3302      	adds	r3, #2
 80070ce:	e7c7      	b.n	8007060 <_printf_common+0x58>
 80070d0:	2301      	movs	r3, #1
 80070d2:	4622      	mov	r2, r4
 80070d4:	4641      	mov	r1, r8
 80070d6:	4638      	mov	r0, r7
 80070d8:	47c8      	blx	r9
 80070da:	3001      	adds	r0, #1
 80070dc:	d0e6      	beq.n	80070ac <_printf_common+0xa4>
 80070de:	3601      	adds	r6, #1
 80070e0:	e7d9      	b.n	8007096 <_printf_common+0x8e>
	...

080070e4 <_printf_i>:
 80070e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070e8:	7e0f      	ldrb	r7, [r1, #24]
 80070ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070ec:	2f78      	cmp	r7, #120	@ 0x78
 80070ee:	4691      	mov	r9, r2
 80070f0:	4680      	mov	r8, r0
 80070f2:	460c      	mov	r4, r1
 80070f4:	469a      	mov	sl, r3
 80070f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070fa:	d807      	bhi.n	800710c <_printf_i+0x28>
 80070fc:	2f62      	cmp	r7, #98	@ 0x62
 80070fe:	d80a      	bhi.n	8007116 <_printf_i+0x32>
 8007100:	2f00      	cmp	r7, #0
 8007102:	f000 80d2 	beq.w	80072aa <_printf_i+0x1c6>
 8007106:	2f58      	cmp	r7, #88	@ 0x58
 8007108:	f000 80b9 	beq.w	800727e <_printf_i+0x19a>
 800710c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007110:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007114:	e03a      	b.n	800718c <_printf_i+0xa8>
 8007116:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800711a:	2b15      	cmp	r3, #21
 800711c:	d8f6      	bhi.n	800710c <_printf_i+0x28>
 800711e:	a101      	add	r1, pc, #4	@ (adr r1, 8007124 <_printf_i+0x40>)
 8007120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007124:	0800717d 	.word	0x0800717d
 8007128:	08007191 	.word	0x08007191
 800712c:	0800710d 	.word	0x0800710d
 8007130:	0800710d 	.word	0x0800710d
 8007134:	0800710d 	.word	0x0800710d
 8007138:	0800710d 	.word	0x0800710d
 800713c:	08007191 	.word	0x08007191
 8007140:	0800710d 	.word	0x0800710d
 8007144:	0800710d 	.word	0x0800710d
 8007148:	0800710d 	.word	0x0800710d
 800714c:	0800710d 	.word	0x0800710d
 8007150:	08007291 	.word	0x08007291
 8007154:	080071bb 	.word	0x080071bb
 8007158:	0800724b 	.word	0x0800724b
 800715c:	0800710d 	.word	0x0800710d
 8007160:	0800710d 	.word	0x0800710d
 8007164:	080072b3 	.word	0x080072b3
 8007168:	0800710d 	.word	0x0800710d
 800716c:	080071bb 	.word	0x080071bb
 8007170:	0800710d 	.word	0x0800710d
 8007174:	0800710d 	.word	0x0800710d
 8007178:	08007253 	.word	0x08007253
 800717c:	6833      	ldr	r3, [r6, #0]
 800717e:	1d1a      	adds	r2, r3, #4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6032      	str	r2, [r6, #0]
 8007184:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007188:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800718c:	2301      	movs	r3, #1
 800718e:	e09d      	b.n	80072cc <_printf_i+0x1e8>
 8007190:	6833      	ldr	r3, [r6, #0]
 8007192:	6820      	ldr	r0, [r4, #0]
 8007194:	1d19      	adds	r1, r3, #4
 8007196:	6031      	str	r1, [r6, #0]
 8007198:	0606      	lsls	r6, r0, #24
 800719a:	d501      	bpl.n	80071a0 <_printf_i+0xbc>
 800719c:	681d      	ldr	r5, [r3, #0]
 800719e:	e003      	b.n	80071a8 <_printf_i+0xc4>
 80071a0:	0645      	lsls	r5, r0, #25
 80071a2:	d5fb      	bpl.n	800719c <_printf_i+0xb8>
 80071a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071a8:	2d00      	cmp	r5, #0
 80071aa:	da03      	bge.n	80071b4 <_printf_i+0xd0>
 80071ac:	232d      	movs	r3, #45	@ 0x2d
 80071ae:	426d      	negs	r5, r5
 80071b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071b4:	4859      	ldr	r0, [pc, #356]	@ (800731c <_printf_i+0x238>)
 80071b6:	230a      	movs	r3, #10
 80071b8:	e011      	b.n	80071de <_printf_i+0xfa>
 80071ba:	6821      	ldr	r1, [r4, #0]
 80071bc:	6833      	ldr	r3, [r6, #0]
 80071be:	0608      	lsls	r0, r1, #24
 80071c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80071c4:	d402      	bmi.n	80071cc <_printf_i+0xe8>
 80071c6:	0649      	lsls	r1, r1, #25
 80071c8:	bf48      	it	mi
 80071ca:	b2ad      	uxthmi	r5, r5
 80071cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80071ce:	4853      	ldr	r0, [pc, #332]	@ (800731c <_printf_i+0x238>)
 80071d0:	6033      	str	r3, [r6, #0]
 80071d2:	bf14      	ite	ne
 80071d4:	230a      	movne	r3, #10
 80071d6:	2308      	moveq	r3, #8
 80071d8:	2100      	movs	r1, #0
 80071da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071de:	6866      	ldr	r6, [r4, #4]
 80071e0:	60a6      	str	r6, [r4, #8]
 80071e2:	2e00      	cmp	r6, #0
 80071e4:	bfa2      	ittt	ge
 80071e6:	6821      	ldrge	r1, [r4, #0]
 80071e8:	f021 0104 	bicge.w	r1, r1, #4
 80071ec:	6021      	strge	r1, [r4, #0]
 80071ee:	b90d      	cbnz	r5, 80071f4 <_printf_i+0x110>
 80071f0:	2e00      	cmp	r6, #0
 80071f2:	d04b      	beq.n	800728c <_printf_i+0x1a8>
 80071f4:	4616      	mov	r6, r2
 80071f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80071fa:	fb03 5711 	mls	r7, r3, r1, r5
 80071fe:	5dc7      	ldrb	r7, [r0, r7]
 8007200:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007204:	462f      	mov	r7, r5
 8007206:	42bb      	cmp	r3, r7
 8007208:	460d      	mov	r5, r1
 800720a:	d9f4      	bls.n	80071f6 <_printf_i+0x112>
 800720c:	2b08      	cmp	r3, #8
 800720e:	d10b      	bne.n	8007228 <_printf_i+0x144>
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	07df      	lsls	r7, r3, #31
 8007214:	d508      	bpl.n	8007228 <_printf_i+0x144>
 8007216:	6923      	ldr	r3, [r4, #16]
 8007218:	6861      	ldr	r1, [r4, #4]
 800721a:	4299      	cmp	r1, r3
 800721c:	bfde      	ittt	le
 800721e:	2330      	movle	r3, #48	@ 0x30
 8007220:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007224:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007228:	1b92      	subs	r2, r2, r6
 800722a:	6122      	str	r2, [r4, #16]
 800722c:	f8cd a000 	str.w	sl, [sp]
 8007230:	464b      	mov	r3, r9
 8007232:	aa03      	add	r2, sp, #12
 8007234:	4621      	mov	r1, r4
 8007236:	4640      	mov	r0, r8
 8007238:	f7ff fee6 	bl	8007008 <_printf_common>
 800723c:	3001      	adds	r0, #1
 800723e:	d14a      	bne.n	80072d6 <_printf_i+0x1f2>
 8007240:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007244:	b004      	add	sp, #16
 8007246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	f043 0320 	orr.w	r3, r3, #32
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	4833      	ldr	r0, [pc, #204]	@ (8007320 <_printf_i+0x23c>)
 8007254:	2778      	movs	r7, #120	@ 0x78
 8007256:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	6831      	ldr	r1, [r6, #0]
 800725e:	061f      	lsls	r7, r3, #24
 8007260:	f851 5b04 	ldr.w	r5, [r1], #4
 8007264:	d402      	bmi.n	800726c <_printf_i+0x188>
 8007266:	065f      	lsls	r7, r3, #25
 8007268:	bf48      	it	mi
 800726a:	b2ad      	uxthmi	r5, r5
 800726c:	6031      	str	r1, [r6, #0]
 800726e:	07d9      	lsls	r1, r3, #31
 8007270:	bf44      	itt	mi
 8007272:	f043 0320 	orrmi.w	r3, r3, #32
 8007276:	6023      	strmi	r3, [r4, #0]
 8007278:	b11d      	cbz	r5, 8007282 <_printf_i+0x19e>
 800727a:	2310      	movs	r3, #16
 800727c:	e7ac      	b.n	80071d8 <_printf_i+0xf4>
 800727e:	4827      	ldr	r0, [pc, #156]	@ (800731c <_printf_i+0x238>)
 8007280:	e7e9      	b.n	8007256 <_printf_i+0x172>
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	f023 0320 	bic.w	r3, r3, #32
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	e7f6      	b.n	800727a <_printf_i+0x196>
 800728c:	4616      	mov	r6, r2
 800728e:	e7bd      	b.n	800720c <_printf_i+0x128>
 8007290:	6833      	ldr	r3, [r6, #0]
 8007292:	6825      	ldr	r5, [r4, #0]
 8007294:	6961      	ldr	r1, [r4, #20]
 8007296:	1d18      	adds	r0, r3, #4
 8007298:	6030      	str	r0, [r6, #0]
 800729a:	062e      	lsls	r6, r5, #24
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	d501      	bpl.n	80072a4 <_printf_i+0x1c0>
 80072a0:	6019      	str	r1, [r3, #0]
 80072a2:	e002      	b.n	80072aa <_printf_i+0x1c6>
 80072a4:	0668      	lsls	r0, r5, #25
 80072a6:	d5fb      	bpl.n	80072a0 <_printf_i+0x1bc>
 80072a8:	8019      	strh	r1, [r3, #0]
 80072aa:	2300      	movs	r3, #0
 80072ac:	6123      	str	r3, [r4, #16]
 80072ae:	4616      	mov	r6, r2
 80072b0:	e7bc      	b.n	800722c <_printf_i+0x148>
 80072b2:	6833      	ldr	r3, [r6, #0]
 80072b4:	1d1a      	adds	r2, r3, #4
 80072b6:	6032      	str	r2, [r6, #0]
 80072b8:	681e      	ldr	r6, [r3, #0]
 80072ba:	6862      	ldr	r2, [r4, #4]
 80072bc:	2100      	movs	r1, #0
 80072be:	4630      	mov	r0, r6
 80072c0:	f7f8 ffae 	bl	8000220 <memchr>
 80072c4:	b108      	cbz	r0, 80072ca <_printf_i+0x1e6>
 80072c6:	1b80      	subs	r0, r0, r6
 80072c8:	6060      	str	r0, [r4, #4]
 80072ca:	6863      	ldr	r3, [r4, #4]
 80072cc:	6123      	str	r3, [r4, #16]
 80072ce:	2300      	movs	r3, #0
 80072d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072d4:	e7aa      	b.n	800722c <_printf_i+0x148>
 80072d6:	6923      	ldr	r3, [r4, #16]
 80072d8:	4632      	mov	r2, r6
 80072da:	4649      	mov	r1, r9
 80072dc:	4640      	mov	r0, r8
 80072de:	47d0      	blx	sl
 80072e0:	3001      	adds	r0, #1
 80072e2:	d0ad      	beq.n	8007240 <_printf_i+0x15c>
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	079b      	lsls	r3, r3, #30
 80072e8:	d413      	bmi.n	8007312 <_printf_i+0x22e>
 80072ea:	68e0      	ldr	r0, [r4, #12]
 80072ec:	9b03      	ldr	r3, [sp, #12]
 80072ee:	4298      	cmp	r0, r3
 80072f0:	bfb8      	it	lt
 80072f2:	4618      	movlt	r0, r3
 80072f4:	e7a6      	b.n	8007244 <_printf_i+0x160>
 80072f6:	2301      	movs	r3, #1
 80072f8:	4632      	mov	r2, r6
 80072fa:	4649      	mov	r1, r9
 80072fc:	4640      	mov	r0, r8
 80072fe:	47d0      	blx	sl
 8007300:	3001      	adds	r0, #1
 8007302:	d09d      	beq.n	8007240 <_printf_i+0x15c>
 8007304:	3501      	adds	r5, #1
 8007306:	68e3      	ldr	r3, [r4, #12]
 8007308:	9903      	ldr	r1, [sp, #12]
 800730a:	1a5b      	subs	r3, r3, r1
 800730c:	42ab      	cmp	r3, r5
 800730e:	dcf2      	bgt.n	80072f6 <_printf_i+0x212>
 8007310:	e7eb      	b.n	80072ea <_printf_i+0x206>
 8007312:	2500      	movs	r5, #0
 8007314:	f104 0619 	add.w	r6, r4, #25
 8007318:	e7f5      	b.n	8007306 <_printf_i+0x222>
 800731a:	bf00      	nop
 800731c:	0800b20a 	.word	0x0800b20a
 8007320:	0800b21b 	.word	0x0800b21b

08007324 <_scanf_float>:
 8007324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007328:	b087      	sub	sp, #28
 800732a:	4617      	mov	r7, r2
 800732c:	9303      	str	r3, [sp, #12]
 800732e:	688b      	ldr	r3, [r1, #8]
 8007330:	1e5a      	subs	r2, r3, #1
 8007332:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007336:	bf81      	itttt	hi
 8007338:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800733c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007340:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007344:	608b      	strhi	r3, [r1, #8]
 8007346:	680b      	ldr	r3, [r1, #0]
 8007348:	460a      	mov	r2, r1
 800734a:	f04f 0500 	mov.w	r5, #0
 800734e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007352:	f842 3b1c 	str.w	r3, [r2], #28
 8007356:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800735a:	4680      	mov	r8, r0
 800735c:	460c      	mov	r4, r1
 800735e:	bf98      	it	ls
 8007360:	f04f 0b00 	movls.w	fp, #0
 8007364:	9201      	str	r2, [sp, #4]
 8007366:	4616      	mov	r6, r2
 8007368:	46aa      	mov	sl, r5
 800736a:	46a9      	mov	r9, r5
 800736c:	9502      	str	r5, [sp, #8]
 800736e:	68a2      	ldr	r2, [r4, #8]
 8007370:	b152      	cbz	r2, 8007388 <_scanf_float+0x64>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	2b4e      	cmp	r3, #78	@ 0x4e
 8007378:	d864      	bhi.n	8007444 <_scanf_float+0x120>
 800737a:	2b40      	cmp	r3, #64	@ 0x40
 800737c:	d83c      	bhi.n	80073f8 <_scanf_float+0xd4>
 800737e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007382:	b2c8      	uxtb	r0, r1
 8007384:	280e      	cmp	r0, #14
 8007386:	d93a      	bls.n	80073fe <_scanf_float+0xda>
 8007388:	f1b9 0f00 	cmp.w	r9, #0
 800738c:	d003      	beq.n	8007396 <_scanf_float+0x72>
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800739a:	f1ba 0f01 	cmp.w	sl, #1
 800739e:	f200 8117 	bhi.w	80075d0 <_scanf_float+0x2ac>
 80073a2:	9b01      	ldr	r3, [sp, #4]
 80073a4:	429e      	cmp	r6, r3
 80073a6:	f200 8108 	bhi.w	80075ba <_scanf_float+0x296>
 80073aa:	2001      	movs	r0, #1
 80073ac:	b007      	add	sp, #28
 80073ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80073b6:	2a0d      	cmp	r2, #13
 80073b8:	d8e6      	bhi.n	8007388 <_scanf_float+0x64>
 80073ba:	a101      	add	r1, pc, #4	@ (adr r1, 80073c0 <_scanf_float+0x9c>)
 80073bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80073c0:	08007507 	.word	0x08007507
 80073c4:	08007389 	.word	0x08007389
 80073c8:	08007389 	.word	0x08007389
 80073cc:	08007389 	.word	0x08007389
 80073d0:	08007567 	.word	0x08007567
 80073d4:	0800753f 	.word	0x0800753f
 80073d8:	08007389 	.word	0x08007389
 80073dc:	08007389 	.word	0x08007389
 80073e0:	08007515 	.word	0x08007515
 80073e4:	08007389 	.word	0x08007389
 80073e8:	08007389 	.word	0x08007389
 80073ec:	08007389 	.word	0x08007389
 80073f0:	08007389 	.word	0x08007389
 80073f4:	080074cd 	.word	0x080074cd
 80073f8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80073fc:	e7db      	b.n	80073b6 <_scanf_float+0x92>
 80073fe:	290e      	cmp	r1, #14
 8007400:	d8c2      	bhi.n	8007388 <_scanf_float+0x64>
 8007402:	a001      	add	r0, pc, #4	@ (adr r0, 8007408 <_scanf_float+0xe4>)
 8007404:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007408:	080074bd 	.word	0x080074bd
 800740c:	08007389 	.word	0x08007389
 8007410:	080074bd 	.word	0x080074bd
 8007414:	08007553 	.word	0x08007553
 8007418:	08007389 	.word	0x08007389
 800741c:	08007465 	.word	0x08007465
 8007420:	080074a3 	.word	0x080074a3
 8007424:	080074a3 	.word	0x080074a3
 8007428:	080074a3 	.word	0x080074a3
 800742c:	080074a3 	.word	0x080074a3
 8007430:	080074a3 	.word	0x080074a3
 8007434:	080074a3 	.word	0x080074a3
 8007438:	080074a3 	.word	0x080074a3
 800743c:	080074a3 	.word	0x080074a3
 8007440:	080074a3 	.word	0x080074a3
 8007444:	2b6e      	cmp	r3, #110	@ 0x6e
 8007446:	d809      	bhi.n	800745c <_scanf_float+0x138>
 8007448:	2b60      	cmp	r3, #96	@ 0x60
 800744a:	d8b2      	bhi.n	80073b2 <_scanf_float+0x8e>
 800744c:	2b54      	cmp	r3, #84	@ 0x54
 800744e:	d07b      	beq.n	8007548 <_scanf_float+0x224>
 8007450:	2b59      	cmp	r3, #89	@ 0x59
 8007452:	d199      	bne.n	8007388 <_scanf_float+0x64>
 8007454:	2d07      	cmp	r5, #7
 8007456:	d197      	bne.n	8007388 <_scanf_float+0x64>
 8007458:	2508      	movs	r5, #8
 800745a:	e02c      	b.n	80074b6 <_scanf_float+0x192>
 800745c:	2b74      	cmp	r3, #116	@ 0x74
 800745e:	d073      	beq.n	8007548 <_scanf_float+0x224>
 8007460:	2b79      	cmp	r3, #121	@ 0x79
 8007462:	e7f6      	b.n	8007452 <_scanf_float+0x12e>
 8007464:	6821      	ldr	r1, [r4, #0]
 8007466:	05c8      	lsls	r0, r1, #23
 8007468:	d51b      	bpl.n	80074a2 <_scanf_float+0x17e>
 800746a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800746e:	6021      	str	r1, [r4, #0]
 8007470:	f109 0901 	add.w	r9, r9, #1
 8007474:	f1bb 0f00 	cmp.w	fp, #0
 8007478:	d003      	beq.n	8007482 <_scanf_float+0x15e>
 800747a:	3201      	adds	r2, #1
 800747c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8007480:	60a2      	str	r2, [r4, #8]
 8007482:	68a3      	ldr	r3, [r4, #8]
 8007484:	3b01      	subs	r3, #1
 8007486:	60a3      	str	r3, [r4, #8]
 8007488:	6923      	ldr	r3, [r4, #16]
 800748a:	3301      	adds	r3, #1
 800748c:	6123      	str	r3, [r4, #16]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3b01      	subs	r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	607b      	str	r3, [r7, #4]
 8007496:	f340 8087 	ble.w	80075a8 <_scanf_float+0x284>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	3301      	adds	r3, #1
 800749e:	603b      	str	r3, [r7, #0]
 80074a0:	e765      	b.n	800736e <_scanf_float+0x4a>
 80074a2:	eb1a 0105 	adds.w	r1, sl, r5
 80074a6:	f47f af6f 	bne.w	8007388 <_scanf_float+0x64>
 80074aa:	6822      	ldr	r2, [r4, #0]
 80074ac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80074b0:	6022      	str	r2, [r4, #0]
 80074b2:	460d      	mov	r5, r1
 80074b4:	468a      	mov	sl, r1
 80074b6:	f806 3b01 	strb.w	r3, [r6], #1
 80074ba:	e7e2      	b.n	8007482 <_scanf_float+0x15e>
 80074bc:	6822      	ldr	r2, [r4, #0]
 80074be:	0610      	lsls	r0, r2, #24
 80074c0:	f57f af62 	bpl.w	8007388 <_scanf_float+0x64>
 80074c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074c8:	6022      	str	r2, [r4, #0]
 80074ca:	e7f4      	b.n	80074b6 <_scanf_float+0x192>
 80074cc:	f1ba 0f00 	cmp.w	sl, #0
 80074d0:	d10e      	bne.n	80074f0 <_scanf_float+0x1cc>
 80074d2:	f1b9 0f00 	cmp.w	r9, #0
 80074d6:	d10e      	bne.n	80074f6 <_scanf_float+0x1d2>
 80074d8:	6822      	ldr	r2, [r4, #0]
 80074da:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80074de:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80074e2:	d108      	bne.n	80074f6 <_scanf_float+0x1d2>
 80074e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80074e8:	6022      	str	r2, [r4, #0]
 80074ea:	f04f 0a01 	mov.w	sl, #1
 80074ee:	e7e2      	b.n	80074b6 <_scanf_float+0x192>
 80074f0:	f1ba 0f02 	cmp.w	sl, #2
 80074f4:	d055      	beq.n	80075a2 <_scanf_float+0x27e>
 80074f6:	2d01      	cmp	r5, #1
 80074f8:	d002      	beq.n	8007500 <_scanf_float+0x1dc>
 80074fa:	2d04      	cmp	r5, #4
 80074fc:	f47f af44 	bne.w	8007388 <_scanf_float+0x64>
 8007500:	3501      	adds	r5, #1
 8007502:	b2ed      	uxtb	r5, r5
 8007504:	e7d7      	b.n	80074b6 <_scanf_float+0x192>
 8007506:	f1ba 0f01 	cmp.w	sl, #1
 800750a:	f47f af3d 	bne.w	8007388 <_scanf_float+0x64>
 800750e:	f04f 0a02 	mov.w	sl, #2
 8007512:	e7d0      	b.n	80074b6 <_scanf_float+0x192>
 8007514:	b97d      	cbnz	r5, 8007536 <_scanf_float+0x212>
 8007516:	f1b9 0f00 	cmp.w	r9, #0
 800751a:	f47f af38 	bne.w	800738e <_scanf_float+0x6a>
 800751e:	6822      	ldr	r2, [r4, #0]
 8007520:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007524:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007528:	f040 8108 	bne.w	800773c <_scanf_float+0x418>
 800752c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007530:	6022      	str	r2, [r4, #0]
 8007532:	2501      	movs	r5, #1
 8007534:	e7bf      	b.n	80074b6 <_scanf_float+0x192>
 8007536:	2d03      	cmp	r5, #3
 8007538:	d0e2      	beq.n	8007500 <_scanf_float+0x1dc>
 800753a:	2d05      	cmp	r5, #5
 800753c:	e7de      	b.n	80074fc <_scanf_float+0x1d8>
 800753e:	2d02      	cmp	r5, #2
 8007540:	f47f af22 	bne.w	8007388 <_scanf_float+0x64>
 8007544:	2503      	movs	r5, #3
 8007546:	e7b6      	b.n	80074b6 <_scanf_float+0x192>
 8007548:	2d06      	cmp	r5, #6
 800754a:	f47f af1d 	bne.w	8007388 <_scanf_float+0x64>
 800754e:	2507      	movs	r5, #7
 8007550:	e7b1      	b.n	80074b6 <_scanf_float+0x192>
 8007552:	6822      	ldr	r2, [r4, #0]
 8007554:	0591      	lsls	r1, r2, #22
 8007556:	f57f af17 	bpl.w	8007388 <_scanf_float+0x64>
 800755a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800755e:	6022      	str	r2, [r4, #0]
 8007560:	f8cd 9008 	str.w	r9, [sp, #8]
 8007564:	e7a7      	b.n	80074b6 <_scanf_float+0x192>
 8007566:	6822      	ldr	r2, [r4, #0]
 8007568:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800756c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007570:	d006      	beq.n	8007580 <_scanf_float+0x25c>
 8007572:	0550      	lsls	r0, r2, #21
 8007574:	f57f af08 	bpl.w	8007388 <_scanf_float+0x64>
 8007578:	f1b9 0f00 	cmp.w	r9, #0
 800757c:	f000 80de 	beq.w	800773c <_scanf_float+0x418>
 8007580:	0591      	lsls	r1, r2, #22
 8007582:	bf58      	it	pl
 8007584:	9902      	ldrpl	r1, [sp, #8]
 8007586:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800758a:	bf58      	it	pl
 800758c:	eba9 0101 	subpl.w	r1, r9, r1
 8007590:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007594:	bf58      	it	pl
 8007596:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800759a:	6022      	str	r2, [r4, #0]
 800759c:	f04f 0900 	mov.w	r9, #0
 80075a0:	e789      	b.n	80074b6 <_scanf_float+0x192>
 80075a2:	f04f 0a03 	mov.w	sl, #3
 80075a6:	e786      	b.n	80074b6 <_scanf_float+0x192>
 80075a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80075ac:	4639      	mov	r1, r7
 80075ae:	4640      	mov	r0, r8
 80075b0:	4798      	blx	r3
 80075b2:	2800      	cmp	r0, #0
 80075b4:	f43f aedb 	beq.w	800736e <_scanf_float+0x4a>
 80075b8:	e6e6      	b.n	8007388 <_scanf_float+0x64>
 80075ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075c2:	463a      	mov	r2, r7
 80075c4:	4640      	mov	r0, r8
 80075c6:	4798      	blx	r3
 80075c8:	6923      	ldr	r3, [r4, #16]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	6123      	str	r3, [r4, #16]
 80075ce:	e6e8      	b.n	80073a2 <_scanf_float+0x7e>
 80075d0:	1e6b      	subs	r3, r5, #1
 80075d2:	2b06      	cmp	r3, #6
 80075d4:	d824      	bhi.n	8007620 <_scanf_float+0x2fc>
 80075d6:	2d02      	cmp	r5, #2
 80075d8:	d836      	bhi.n	8007648 <_scanf_float+0x324>
 80075da:	9b01      	ldr	r3, [sp, #4]
 80075dc:	429e      	cmp	r6, r3
 80075de:	f67f aee4 	bls.w	80073aa <_scanf_float+0x86>
 80075e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075ea:	463a      	mov	r2, r7
 80075ec:	4640      	mov	r0, r8
 80075ee:	4798      	blx	r3
 80075f0:	6923      	ldr	r3, [r4, #16]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	6123      	str	r3, [r4, #16]
 80075f6:	e7f0      	b.n	80075da <_scanf_float+0x2b6>
 80075f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007600:	463a      	mov	r2, r7
 8007602:	4640      	mov	r0, r8
 8007604:	4798      	blx	r3
 8007606:	6923      	ldr	r3, [r4, #16]
 8007608:	3b01      	subs	r3, #1
 800760a:	6123      	str	r3, [r4, #16]
 800760c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007610:	fa5f fa8a 	uxtb.w	sl, sl
 8007614:	f1ba 0f02 	cmp.w	sl, #2
 8007618:	d1ee      	bne.n	80075f8 <_scanf_float+0x2d4>
 800761a:	3d03      	subs	r5, #3
 800761c:	b2ed      	uxtb	r5, r5
 800761e:	1b76      	subs	r6, r6, r5
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	05da      	lsls	r2, r3, #23
 8007624:	d530      	bpl.n	8007688 <_scanf_float+0x364>
 8007626:	055b      	lsls	r3, r3, #21
 8007628:	d511      	bpl.n	800764e <_scanf_float+0x32a>
 800762a:	9b01      	ldr	r3, [sp, #4]
 800762c:	429e      	cmp	r6, r3
 800762e:	f67f aebc 	bls.w	80073aa <_scanf_float+0x86>
 8007632:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007636:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800763a:	463a      	mov	r2, r7
 800763c:	4640      	mov	r0, r8
 800763e:	4798      	blx	r3
 8007640:	6923      	ldr	r3, [r4, #16]
 8007642:	3b01      	subs	r3, #1
 8007644:	6123      	str	r3, [r4, #16]
 8007646:	e7f0      	b.n	800762a <_scanf_float+0x306>
 8007648:	46aa      	mov	sl, r5
 800764a:	46b3      	mov	fp, r6
 800764c:	e7de      	b.n	800760c <_scanf_float+0x2e8>
 800764e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007652:	6923      	ldr	r3, [r4, #16]
 8007654:	2965      	cmp	r1, #101	@ 0x65
 8007656:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800765a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800765e:	6123      	str	r3, [r4, #16]
 8007660:	d00c      	beq.n	800767c <_scanf_float+0x358>
 8007662:	2945      	cmp	r1, #69	@ 0x45
 8007664:	d00a      	beq.n	800767c <_scanf_float+0x358>
 8007666:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800766a:	463a      	mov	r2, r7
 800766c:	4640      	mov	r0, r8
 800766e:	4798      	blx	r3
 8007670:	6923      	ldr	r3, [r4, #16]
 8007672:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007676:	3b01      	subs	r3, #1
 8007678:	1eb5      	subs	r5, r6, #2
 800767a:	6123      	str	r3, [r4, #16]
 800767c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007680:	463a      	mov	r2, r7
 8007682:	4640      	mov	r0, r8
 8007684:	4798      	blx	r3
 8007686:	462e      	mov	r6, r5
 8007688:	6822      	ldr	r2, [r4, #0]
 800768a:	f012 0210 	ands.w	r2, r2, #16
 800768e:	d001      	beq.n	8007694 <_scanf_float+0x370>
 8007690:	2000      	movs	r0, #0
 8007692:	e68b      	b.n	80073ac <_scanf_float+0x88>
 8007694:	7032      	strb	r2, [r6, #0]
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800769c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076a0:	d11c      	bne.n	80076dc <_scanf_float+0x3b8>
 80076a2:	9b02      	ldr	r3, [sp, #8]
 80076a4:	454b      	cmp	r3, r9
 80076a6:	eba3 0209 	sub.w	r2, r3, r9
 80076aa:	d123      	bne.n	80076f4 <_scanf_float+0x3d0>
 80076ac:	9901      	ldr	r1, [sp, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	4640      	mov	r0, r8
 80076b2:	f002 fbf9 	bl	8009ea8 <_strtod_r>
 80076b6:	9b03      	ldr	r3, [sp, #12]
 80076b8:	6821      	ldr	r1, [r4, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f011 0f02 	tst.w	r1, #2
 80076c0:	ec57 6b10 	vmov	r6, r7, d0
 80076c4:	f103 0204 	add.w	r2, r3, #4
 80076c8:	d01f      	beq.n	800770a <_scanf_float+0x3e6>
 80076ca:	9903      	ldr	r1, [sp, #12]
 80076cc:	600a      	str	r2, [r1, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	e9c3 6700 	strd	r6, r7, [r3]
 80076d4:	68e3      	ldr	r3, [r4, #12]
 80076d6:	3301      	adds	r3, #1
 80076d8:	60e3      	str	r3, [r4, #12]
 80076da:	e7d9      	b.n	8007690 <_scanf_float+0x36c>
 80076dc:	9b04      	ldr	r3, [sp, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0e4      	beq.n	80076ac <_scanf_float+0x388>
 80076e2:	9905      	ldr	r1, [sp, #20]
 80076e4:	230a      	movs	r3, #10
 80076e6:	3101      	adds	r1, #1
 80076e8:	4640      	mov	r0, r8
 80076ea:	f002 fc5d 	bl	8009fa8 <_strtol_r>
 80076ee:	9b04      	ldr	r3, [sp, #16]
 80076f0:	9e05      	ldr	r6, [sp, #20]
 80076f2:	1ac2      	subs	r2, r0, r3
 80076f4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80076f8:	429e      	cmp	r6, r3
 80076fa:	bf28      	it	cs
 80076fc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007700:	4910      	ldr	r1, [pc, #64]	@ (8007744 <_scanf_float+0x420>)
 8007702:	4630      	mov	r0, r6
 8007704:	f000 f8e4 	bl	80078d0 <siprintf>
 8007708:	e7d0      	b.n	80076ac <_scanf_float+0x388>
 800770a:	f011 0f04 	tst.w	r1, #4
 800770e:	9903      	ldr	r1, [sp, #12]
 8007710:	600a      	str	r2, [r1, #0]
 8007712:	d1dc      	bne.n	80076ce <_scanf_float+0x3aa>
 8007714:	681d      	ldr	r5, [r3, #0]
 8007716:	4632      	mov	r2, r6
 8007718:	463b      	mov	r3, r7
 800771a:	4630      	mov	r0, r6
 800771c:	4639      	mov	r1, r7
 800771e:	f7f9 fa2d 	bl	8000b7c <__aeabi_dcmpun>
 8007722:	b128      	cbz	r0, 8007730 <_scanf_float+0x40c>
 8007724:	4808      	ldr	r0, [pc, #32]	@ (8007748 <_scanf_float+0x424>)
 8007726:	f000 f9b7 	bl	8007a98 <nanf>
 800772a:	ed85 0a00 	vstr	s0, [r5]
 800772e:	e7d1      	b.n	80076d4 <_scanf_float+0x3b0>
 8007730:	4630      	mov	r0, r6
 8007732:	4639      	mov	r1, r7
 8007734:	f7f9 fa80 	bl	8000c38 <__aeabi_d2f>
 8007738:	6028      	str	r0, [r5, #0]
 800773a:	e7cb      	b.n	80076d4 <_scanf_float+0x3b0>
 800773c:	f04f 0900 	mov.w	r9, #0
 8007740:	e629      	b.n	8007396 <_scanf_float+0x72>
 8007742:	bf00      	nop
 8007744:	0800b22c 	.word	0x0800b22c
 8007748:	0800b5c5 	.word	0x0800b5c5

0800774c <std>:
 800774c:	2300      	movs	r3, #0
 800774e:	b510      	push	{r4, lr}
 8007750:	4604      	mov	r4, r0
 8007752:	e9c0 3300 	strd	r3, r3, [r0]
 8007756:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800775a:	6083      	str	r3, [r0, #8]
 800775c:	8181      	strh	r1, [r0, #12]
 800775e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007760:	81c2      	strh	r2, [r0, #14]
 8007762:	6183      	str	r3, [r0, #24]
 8007764:	4619      	mov	r1, r3
 8007766:	2208      	movs	r2, #8
 8007768:	305c      	adds	r0, #92	@ 0x5c
 800776a:	f000 f914 	bl	8007996 <memset>
 800776e:	4b0d      	ldr	r3, [pc, #52]	@ (80077a4 <std+0x58>)
 8007770:	6263      	str	r3, [r4, #36]	@ 0x24
 8007772:	4b0d      	ldr	r3, [pc, #52]	@ (80077a8 <std+0x5c>)
 8007774:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007776:	4b0d      	ldr	r3, [pc, #52]	@ (80077ac <std+0x60>)
 8007778:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800777a:	4b0d      	ldr	r3, [pc, #52]	@ (80077b0 <std+0x64>)
 800777c:	6323      	str	r3, [r4, #48]	@ 0x30
 800777e:	4b0d      	ldr	r3, [pc, #52]	@ (80077b4 <std+0x68>)
 8007780:	6224      	str	r4, [r4, #32]
 8007782:	429c      	cmp	r4, r3
 8007784:	d006      	beq.n	8007794 <std+0x48>
 8007786:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800778a:	4294      	cmp	r4, r2
 800778c:	d002      	beq.n	8007794 <std+0x48>
 800778e:	33d0      	adds	r3, #208	@ 0xd0
 8007790:	429c      	cmp	r4, r3
 8007792:	d105      	bne.n	80077a0 <std+0x54>
 8007794:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800779c:	f000 b978 	b.w	8007a90 <__retarget_lock_init_recursive>
 80077a0:	bd10      	pop	{r4, pc}
 80077a2:	bf00      	nop
 80077a4:	08007911 	.word	0x08007911
 80077a8:	08007933 	.word	0x08007933
 80077ac:	0800796b 	.word	0x0800796b
 80077b0:	0800798f 	.word	0x0800798f
 80077b4:	2000036c 	.word	0x2000036c

080077b8 <stdio_exit_handler>:
 80077b8:	4a02      	ldr	r2, [pc, #8]	@ (80077c4 <stdio_exit_handler+0xc>)
 80077ba:	4903      	ldr	r1, [pc, #12]	@ (80077c8 <stdio_exit_handler+0x10>)
 80077bc:	4803      	ldr	r0, [pc, #12]	@ (80077cc <stdio_exit_handler+0x14>)
 80077be:	f000 b869 	b.w	8007894 <_fwalk_sglue>
 80077c2:	bf00      	nop
 80077c4:	2000000c 	.word	0x2000000c
 80077c8:	0800a365 	.word	0x0800a365
 80077cc:	2000001c 	.word	0x2000001c

080077d0 <cleanup_stdio>:
 80077d0:	6841      	ldr	r1, [r0, #4]
 80077d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007804 <cleanup_stdio+0x34>)
 80077d4:	4299      	cmp	r1, r3
 80077d6:	b510      	push	{r4, lr}
 80077d8:	4604      	mov	r4, r0
 80077da:	d001      	beq.n	80077e0 <cleanup_stdio+0x10>
 80077dc:	f002 fdc2 	bl	800a364 <_fflush_r>
 80077e0:	68a1      	ldr	r1, [r4, #8]
 80077e2:	4b09      	ldr	r3, [pc, #36]	@ (8007808 <cleanup_stdio+0x38>)
 80077e4:	4299      	cmp	r1, r3
 80077e6:	d002      	beq.n	80077ee <cleanup_stdio+0x1e>
 80077e8:	4620      	mov	r0, r4
 80077ea:	f002 fdbb 	bl	800a364 <_fflush_r>
 80077ee:	68e1      	ldr	r1, [r4, #12]
 80077f0:	4b06      	ldr	r3, [pc, #24]	@ (800780c <cleanup_stdio+0x3c>)
 80077f2:	4299      	cmp	r1, r3
 80077f4:	d004      	beq.n	8007800 <cleanup_stdio+0x30>
 80077f6:	4620      	mov	r0, r4
 80077f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077fc:	f002 bdb2 	b.w	800a364 <_fflush_r>
 8007800:	bd10      	pop	{r4, pc}
 8007802:	bf00      	nop
 8007804:	2000036c 	.word	0x2000036c
 8007808:	200003d4 	.word	0x200003d4
 800780c:	2000043c 	.word	0x2000043c

08007810 <global_stdio_init.part.0>:
 8007810:	b510      	push	{r4, lr}
 8007812:	4b0b      	ldr	r3, [pc, #44]	@ (8007840 <global_stdio_init.part.0+0x30>)
 8007814:	4c0b      	ldr	r4, [pc, #44]	@ (8007844 <global_stdio_init.part.0+0x34>)
 8007816:	4a0c      	ldr	r2, [pc, #48]	@ (8007848 <global_stdio_init.part.0+0x38>)
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	4620      	mov	r0, r4
 800781c:	2200      	movs	r2, #0
 800781e:	2104      	movs	r1, #4
 8007820:	f7ff ff94 	bl	800774c <std>
 8007824:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007828:	2201      	movs	r2, #1
 800782a:	2109      	movs	r1, #9
 800782c:	f7ff ff8e 	bl	800774c <std>
 8007830:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007834:	2202      	movs	r2, #2
 8007836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800783a:	2112      	movs	r1, #18
 800783c:	f7ff bf86 	b.w	800774c <std>
 8007840:	200004a4 	.word	0x200004a4
 8007844:	2000036c 	.word	0x2000036c
 8007848:	080077b9 	.word	0x080077b9

0800784c <__sfp_lock_acquire>:
 800784c:	4801      	ldr	r0, [pc, #4]	@ (8007854 <__sfp_lock_acquire+0x8>)
 800784e:	f000 b920 	b.w	8007a92 <__retarget_lock_acquire_recursive>
 8007852:	bf00      	nop
 8007854:	200004ad 	.word	0x200004ad

08007858 <__sfp_lock_release>:
 8007858:	4801      	ldr	r0, [pc, #4]	@ (8007860 <__sfp_lock_release+0x8>)
 800785a:	f000 b91b 	b.w	8007a94 <__retarget_lock_release_recursive>
 800785e:	bf00      	nop
 8007860:	200004ad 	.word	0x200004ad

08007864 <__sinit>:
 8007864:	b510      	push	{r4, lr}
 8007866:	4604      	mov	r4, r0
 8007868:	f7ff fff0 	bl	800784c <__sfp_lock_acquire>
 800786c:	6a23      	ldr	r3, [r4, #32]
 800786e:	b11b      	cbz	r3, 8007878 <__sinit+0x14>
 8007870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007874:	f7ff bff0 	b.w	8007858 <__sfp_lock_release>
 8007878:	4b04      	ldr	r3, [pc, #16]	@ (800788c <__sinit+0x28>)
 800787a:	6223      	str	r3, [r4, #32]
 800787c:	4b04      	ldr	r3, [pc, #16]	@ (8007890 <__sinit+0x2c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1f5      	bne.n	8007870 <__sinit+0xc>
 8007884:	f7ff ffc4 	bl	8007810 <global_stdio_init.part.0>
 8007888:	e7f2      	b.n	8007870 <__sinit+0xc>
 800788a:	bf00      	nop
 800788c:	080077d1 	.word	0x080077d1
 8007890:	200004a4 	.word	0x200004a4

08007894 <_fwalk_sglue>:
 8007894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007898:	4607      	mov	r7, r0
 800789a:	4688      	mov	r8, r1
 800789c:	4614      	mov	r4, r2
 800789e:	2600      	movs	r6, #0
 80078a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078a4:	f1b9 0901 	subs.w	r9, r9, #1
 80078a8:	d505      	bpl.n	80078b6 <_fwalk_sglue+0x22>
 80078aa:	6824      	ldr	r4, [r4, #0]
 80078ac:	2c00      	cmp	r4, #0
 80078ae:	d1f7      	bne.n	80078a0 <_fwalk_sglue+0xc>
 80078b0:	4630      	mov	r0, r6
 80078b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078b6:	89ab      	ldrh	r3, [r5, #12]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d907      	bls.n	80078cc <_fwalk_sglue+0x38>
 80078bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078c0:	3301      	adds	r3, #1
 80078c2:	d003      	beq.n	80078cc <_fwalk_sglue+0x38>
 80078c4:	4629      	mov	r1, r5
 80078c6:	4638      	mov	r0, r7
 80078c8:	47c0      	blx	r8
 80078ca:	4306      	orrs	r6, r0
 80078cc:	3568      	adds	r5, #104	@ 0x68
 80078ce:	e7e9      	b.n	80078a4 <_fwalk_sglue+0x10>

080078d0 <siprintf>:
 80078d0:	b40e      	push	{r1, r2, r3}
 80078d2:	b500      	push	{lr}
 80078d4:	b09c      	sub	sp, #112	@ 0x70
 80078d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80078d8:	9002      	str	r0, [sp, #8]
 80078da:	9006      	str	r0, [sp, #24]
 80078dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80078e0:	4809      	ldr	r0, [pc, #36]	@ (8007908 <siprintf+0x38>)
 80078e2:	9107      	str	r1, [sp, #28]
 80078e4:	9104      	str	r1, [sp, #16]
 80078e6:	4909      	ldr	r1, [pc, #36]	@ (800790c <siprintf+0x3c>)
 80078e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80078ec:	9105      	str	r1, [sp, #20]
 80078ee:	6800      	ldr	r0, [r0, #0]
 80078f0:	9301      	str	r3, [sp, #4]
 80078f2:	a902      	add	r1, sp, #8
 80078f4:	f002 fbb6 	bl	800a064 <_svfiprintf_r>
 80078f8:	9b02      	ldr	r3, [sp, #8]
 80078fa:	2200      	movs	r2, #0
 80078fc:	701a      	strb	r2, [r3, #0]
 80078fe:	b01c      	add	sp, #112	@ 0x70
 8007900:	f85d eb04 	ldr.w	lr, [sp], #4
 8007904:	b003      	add	sp, #12
 8007906:	4770      	bx	lr
 8007908:	20000018 	.word	0x20000018
 800790c:	ffff0208 	.word	0xffff0208

08007910 <__sread>:
 8007910:	b510      	push	{r4, lr}
 8007912:	460c      	mov	r4, r1
 8007914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007918:	f000 f86c 	bl	80079f4 <_read_r>
 800791c:	2800      	cmp	r0, #0
 800791e:	bfab      	itete	ge
 8007920:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007922:	89a3      	ldrhlt	r3, [r4, #12]
 8007924:	181b      	addge	r3, r3, r0
 8007926:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800792a:	bfac      	ite	ge
 800792c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800792e:	81a3      	strhlt	r3, [r4, #12]
 8007930:	bd10      	pop	{r4, pc}

08007932 <__swrite>:
 8007932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007936:	461f      	mov	r7, r3
 8007938:	898b      	ldrh	r3, [r1, #12]
 800793a:	05db      	lsls	r3, r3, #23
 800793c:	4605      	mov	r5, r0
 800793e:	460c      	mov	r4, r1
 8007940:	4616      	mov	r6, r2
 8007942:	d505      	bpl.n	8007950 <__swrite+0x1e>
 8007944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007948:	2302      	movs	r3, #2
 800794a:	2200      	movs	r2, #0
 800794c:	f000 f840 	bl	80079d0 <_lseek_r>
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007956:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800795a:	81a3      	strh	r3, [r4, #12]
 800795c:	4632      	mov	r2, r6
 800795e:	463b      	mov	r3, r7
 8007960:	4628      	mov	r0, r5
 8007962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007966:	f000 b857 	b.w	8007a18 <_write_r>

0800796a <__sseek>:
 800796a:	b510      	push	{r4, lr}
 800796c:	460c      	mov	r4, r1
 800796e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007972:	f000 f82d 	bl	80079d0 <_lseek_r>
 8007976:	1c43      	adds	r3, r0, #1
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	bf15      	itete	ne
 800797c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800797e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007982:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007986:	81a3      	strheq	r3, [r4, #12]
 8007988:	bf18      	it	ne
 800798a:	81a3      	strhne	r3, [r4, #12]
 800798c:	bd10      	pop	{r4, pc}

0800798e <__sclose>:
 800798e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007992:	f000 b80d 	b.w	80079b0 <_close_r>

08007996 <memset>:
 8007996:	4402      	add	r2, r0
 8007998:	4603      	mov	r3, r0
 800799a:	4293      	cmp	r3, r2
 800799c:	d100      	bne.n	80079a0 <memset+0xa>
 800799e:	4770      	bx	lr
 80079a0:	f803 1b01 	strb.w	r1, [r3], #1
 80079a4:	e7f9      	b.n	800799a <memset+0x4>
	...

080079a8 <_localeconv_r>:
 80079a8:	4800      	ldr	r0, [pc, #0]	@ (80079ac <_localeconv_r+0x4>)
 80079aa:	4770      	bx	lr
 80079ac:	20000158 	.word	0x20000158

080079b0 <_close_r>:
 80079b0:	b538      	push	{r3, r4, r5, lr}
 80079b2:	4d06      	ldr	r5, [pc, #24]	@ (80079cc <_close_r+0x1c>)
 80079b4:	2300      	movs	r3, #0
 80079b6:	4604      	mov	r4, r0
 80079b8:	4608      	mov	r0, r1
 80079ba:	602b      	str	r3, [r5, #0]
 80079bc:	f7fa f8e4 	bl	8001b88 <_close>
 80079c0:	1c43      	adds	r3, r0, #1
 80079c2:	d102      	bne.n	80079ca <_close_r+0x1a>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	b103      	cbz	r3, 80079ca <_close_r+0x1a>
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	bd38      	pop	{r3, r4, r5, pc}
 80079cc:	200004a8 	.word	0x200004a8

080079d0 <_lseek_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4d07      	ldr	r5, [pc, #28]	@ (80079f0 <_lseek_r+0x20>)
 80079d4:	4604      	mov	r4, r0
 80079d6:	4608      	mov	r0, r1
 80079d8:	4611      	mov	r1, r2
 80079da:	2200      	movs	r2, #0
 80079dc:	602a      	str	r2, [r5, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	f7fa f8f9 	bl	8001bd6 <_lseek>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d102      	bne.n	80079ee <_lseek_r+0x1e>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	b103      	cbz	r3, 80079ee <_lseek_r+0x1e>
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	200004a8 	.word	0x200004a8

080079f4 <_read_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	4d07      	ldr	r5, [pc, #28]	@ (8007a14 <_read_r+0x20>)
 80079f8:	4604      	mov	r4, r0
 80079fa:	4608      	mov	r0, r1
 80079fc:	4611      	mov	r1, r2
 80079fe:	2200      	movs	r2, #0
 8007a00:	602a      	str	r2, [r5, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	f7fa f887 	bl	8001b16 <_read>
 8007a08:	1c43      	adds	r3, r0, #1
 8007a0a:	d102      	bne.n	8007a12 <_read_r+0x1e>
 8007a0c:	682b      	ldr	r3, [r5, #0]
 8007a0e:	b103      	cbz	r3, 8007a12 <_read_r+0x1e>
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	bd38      	pop	{r3, r4, r5, pc}
 8007a14:	200004a8 	.word	0x200004a8

08007a18 <_write_r>:
 8007a18:	b538      	push	{r3, r4, r5, lr}
 8007a1a:	4d07      	ldr	r5, [pc, #28]	@ (8007a38 <_write_r+0x20>)
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	4608      	mov	r0, r1
 8007a20:	4611      	mov	r1, r2
 8007a22:	2200      	movs	r2, #0
 8007a24:	602a      	str	r2, [r5, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	f7fa f892 	bl	8001b50 <_write>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	d102      	bne.n	8007a36 <_write_r+0x1e>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	b103      	cbz	r3, 8007a36 <_write_r+0x1e>
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	bd38      	pop	{r3, r4, r5, pc}
 8007a38:	200004a8 	.word	0x200004a8

08007a3c <__errno>:
 8007a3c:	4b01      	ldr	r3, [pc, #4]	@ (8007a44 <__errno+0x8>)
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	20000018 	.word	0x20000018

08007a48 <__libc_init_array>:
 8007a48:	b570      	push	{r4, r5, r6, lr}
 8007a4a:	4d0d      	ldr	r5, [pc, #52]	@ (8007a80 <__libc_init_array+0x38>)
 8007a4c:	4c0d      	ldr	r4, [pc, #52]	@ (8007a84 <__libc_init_array+0x3c>)
 8007a4e:	1b64      	subs	r4, r4, r5
 8007a50:	10a4      	asrs	r4, r4, #2
 8007a52:	2600      	movs	r6, #0
 8007a54:	42a6      	cmp	r6, r4
 8007a56:	d109      	bne.n	8007a6c <__libc_init_array+0x24>
 8007a58:	4d0b      	ldr	r5, [pc, #44]	@ (8007a88 <__libc_init_array+0x40>)
 8007a5a:	4c0c      	ldr	r4, [pc, #48]	@ (8007a8c <__libc_init_array+0x44>)
 8007a5c:	f003 fb72 	bl	800b144 <_init>
 8007a60:	1b64      	subs	r4, r4, r5
 8007a62:	10a4      	asrs	r4, r4, #2
 8007a64:	2600      	movs	r6, #0
 8007a66:	42a6      	cmp	r6, r4
 8007a68:	d105      	bne.n	8007a76 <__libc_init_array+0x2e>
 8007a6a:	bd70      	pop	{r4, r5, r6, pc}
 8007a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a70:	4798      	blx	r3
 8007a72:	3601      	adds	r6, #1
 8007a74:	e7ee      	b.n	8007a54 <__libc_init_array+0xc>
 8007a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a7a:	4798      	blx	r3
 8007a7c:	3601      	adds	r6, #1
 8007a7e:	e7f2      	b.n	8007a66 <__libc_init_array+0x1e>
 8007a80:	0800b630 	.word	0x0800b630
 8007a84:	0800b630 	.word	0x0800b630
 8007a88:	0800b630 	.word	0x0800b630
 8007a8c:	0800b634 	.word	0x0800b634

08007a90 <__retarget_lock_init_recursive>:
 8007a90:	4770      	bx	lr

08007a92 <__retarget_lock_acquire_recursive>:
 8007a92:	4770      	bx	lr

08007a94 <__retarget_lock_release_recursive>:
 8007a94:	4770      	bx	lr
	...

08007a98 <nanf>:
 8007a98:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007aa0 <nanf+0x8>
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	7fc00000 	.word	0x7fc00000

08007aa4 <quorem>:
 8007aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa8:	6903      	ldr	r3, [r0, #16]
 8007aaa:	690c      	ldr	r4, [r1, #16]
 8007aac:	42a3      	cmp	r3, r4
 8007aae:	4607      	mov	r7, r0
 8007ab0:	db7e      	blt.n	8007bb0 <quorem+0x10c>
 8007ab2:	3c01      	subs	r4, #1
 8007ab4:	f101 0814 	add.w	r8, r1, #20
 8007ab8:	00a3      	lsls	r3, r4, #2
 8007aba:	f100 0514 	add.w	r5, r0, #20
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ac4:	9301      	str	r3, [sp, #4]
 8007ac6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007aca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ad6:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ada:	d32e      	bcc.n	8007b3a <quorem+0x96>
 8007adc:	f04f 0a00 	mov.w	sl, #0
 8007ae0:	46c4      	mov	ip, r8
 8007ae2:	46ae      	mov	lr, r5
 8007ae4:	46d3      	mov	fp, sl
 8007ae6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007aea:	b298      	uxth	r0, r3
 8007aec:	fb06 a000 	mla	r0, r6, r0, sl
 8007af0:	0c02      	lsrs	r2, r0, #16
 8007af2:	0c1b      	lsrs	r3, r3, #16
 8007af4:	fb06 2303 	mla	r3, r6, r3, r2
 8007af8:	f8de 2000 	ldr.w	r2, [lr]
 8007afc:	b280      	uxth	r0, r0
 8007afe:	b292      	uxth	r2, r2
 8007b00:	1a12      	subs	r2, r2, r0
 8007b02:	445a      	add	r2, fp
 8007b04:	f8de 0000 	ldr.w	r0, [lr]
 8007b08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007b12:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007b16:	b292      	uxth	r2, r2
 8007b18:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b1c:	45e1      	cmp	r9, ip
 8007b1e:	f84e 2b04 	str.w	r2, [lr], #4
 8007b22:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007b26:	d2de      	bcs.n	8007ae6 <quorem+0x42>
 8007b28:	9b00      	ldr	r3, [sp, #0]
 8007b2a:	58eb      	ldr	r3, [r5, r3]
 8007b2c:	b92b      	cbnz	r3, 8007b3a <quorem+0x96>
 8007b2e:	9b01      	ldr	r3, [sp, #4]
 8007b30:	3b04      	subs	r3, #4
 8007b32:	429d      	cmp	r5, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	d32f      	bcc.n	8007b98 <quorem+0xf4>
 8007b38:	613c      	str	r4, [r7, #16]
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	f001 f9c4 	bl	8008ec8 <__mcmp>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	db25      	blt.n	8007b90 <quorem+0xec>
 8007b44:	4629      	mov	r1, r5
 8007b46:	2000      	movs	r0, #0
 8007b48:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b4c:	f8d1 c000 	ldr.w	ip, [r1]
 8007b50:	fa1f fe82 	uxth.w	lr, r2
 8007b54:	fa1f f38c 	uxth.w	r3, ip
 8007b58:	eba3 030e 	sub.w	r3, r3, lr
 8007b5c:	4403      	add	r3, r0
 8007b5e:	0c12      	lsrs	r2, r2, #16
 8007b60:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007b64:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b6e:	45c1      	cmp	r9, r8
 8007b70:	f841 3b04 	str.w	r3, [r1], #4
 8007b74:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b78:	d2e6      	bcs.n	8007b48 <quorem+0xa4>
 8007b7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b82:	b922      	cbnz	r2, 8007b8e <quorem+0xea>
 8007b84:	3b04      	subs	r3, #4
 8007b86:	429d      	cmp	r5, r3
 8007b88:	461a      	mov	r2, r3
 8007b8a:	d30b      	bcc.n	8007ba4 <quorem+0x100>
 8007b8c:	613c      	str	r4, [r7, #16]
 8007b8e:	3601      	adds	r6, #1
 8007b90:	4630      	mov	r0, r6
 8007b92:	b003      	add	sp, #12
 8007b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b98:	6812      	ldr	r2, [r2, #0]
 8007b9a:	3b04      	subs	r3, #4
 8007b9c:	2a00      	cmp	r2, #0
 8007b9e:	d1cb      	bne.n	8007b38 <quorem+0x94>
 8007ba0:	3c01      	subs	r4, #1
 8007ba2:	e7c6      	b.n	8007b32 <quorem+0x8e>
 8007ba4:	6812      	ldr	r2, [r2, #0]
 8007ba6:	3b04      	subs	r3, #4
 8007ba8:	2a00      	cmp	r2, #0
 8007baa:	d1ef      	bne.n	8007b8c <quorem+0xe8>
 8007bac:	3c01      	subs	r4, #1
 8007bae:	e7ea      	b.n	8007b86 <quorem+0xe2>
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	e7ee      	b.n	8007b92 <quorem+0xee>
 8007bb4:	0000      	movs	r0, r0
	...

08007bb8 <_dtoa_r>:
 8007bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bbc:	69c7      	ldr	r7, [r0, #28]
 8007bbe:	b099      	sub	sp, #100	@ 0x64
 8007bc0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007bc4:	ec55 4b10 	vmov	r4, r5, d0
 8007bc8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007bca:	9109      	str	r1, [sp, #36]	@ 0x24
 8007bcc:	4683      	mov	fp, r0
 8007bce:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007bd2:	b97f      	cbnz	r7, 8007bf4 <_dtoa_r+0x3c>
 8007bd4:	2010      	movs	r0, #16
 8007bd6:	f000 fdfd 	bl	80087d4 <malloc>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	f8cb 001c 	str.w	r0, [fp, #28]
 8007be0:	b920      	cbnz	r0, 8007bec <_dtoa_r+0x34>
 8007be2:	4ba7      	ldr	r3, [pc, #668]	@ (8007e80 <_dtoa_r+0x2c8>)
 8007be4:	21ef      	movs	r1, #239	@ 0xef
 8007be6:	48a7      	ldr	r0, [pc, #668]	@ (8007e84 <_dtoa_r+0x2cc>)
 8007be8:	f002 fc36 	bl	800a458 <__assert_func>
 8007bec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007bf0:	6007      	str	r7, [r0, #0]
 8007bf2:	60c7      	str	r7, [r0, #12]
 8007bf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007bf8:	6819      	ldr	r1, [r3, #0]
 8007bfa:	b159      	cbz	r1, 8007c14 <_dtoa_r+0x5c>
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	604a      	str	r2, [r1, #4]
 8007c00:	2301      	movs	r3, #1
 8007c02:	4093      	lsls	r3, r2
 8007c04:	608b      	str	r3, [r1, #8]
 8007c06:	4658      	mov	r0, fp
 8007c08:	f000 feda 	bl	80089c0 <_Bfree>
 8007c0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c10:	2200      	movs	r2, #0
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	1e2b      	subs	r3, r5, #0
 8007c16:	bfb9      	ittee	lt
 8007c18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007c1c:	9303      	strlt	r3, [sp, #12]
 8007c1e:	2300      	movge	r3, #0
 8007c20:	6033      	strge	r3, [r6, #0]
 8007c22:	9f03      	ldr	r7, [sp, #12]
 8007c24:	4b98      	ldr	r3, [pc, #608]	@ (8007e88 <_dtoa_r+0x2d0>)
 8007c26:	bfbc      	itt	lt
 8007c28:	2201      	movlt	r2, #1
 8007c2a:	6032      	strlt	r2, [r6, #0]
 8007c2c:	43bb      	bics	r3, r7
 8007c2e:	d112      	bne.n	8007c56 <_dtoa_r+0x9e>
 8007c30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007c32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c3c:	4323      	orrs	r3, r4
 8007c3e:	f000 854d 	beq.w	80086dc <_dtoa_r+0xb24>
 8007c42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007e9c <_dtoa_r+0x2e4>
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 854f 	beq.w	80086ec <_dtoa_r+0xb34>
 8007c4e:	f10a 0303 	add.w	r3, sl, #3
 8007c52:	f000 bd49 	b.w	80086e8 <_dtoa_r+0xb30>
 8007c56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	ec51 0b17 	vmov	r0, r1, d7
 8007c60:	2300      	movs	r3, #0
 8007c62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007c66:	f7f8 ff57 	bl	8000b18 <__aeabi_dcmpeq>
 8007c6a:	4680      	mov	r8, r0
 8007c6c:	b158      	cbz	r0, 8007c86 <_dtoa_r+0xce>
 8007c6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007c70:	2301      	movs	r3, #1
 8007c72:	6013      	str	r3, [r2, #0]
 8007c74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c76:	b113      	cbz	r3, 8007c7e <_dtoa_r+0xc6>
 8007c78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007c7a:	4b84      	ldr	r3, [pc, #528]	@ (8007e8c <_dtoa_r+0x2d4>)
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007ea0 <_dtoa_r+0x2e8>
 8007c82:	f000 bd33 	b.w	80086ec <_dtoa_r+0xb34>
 8007c86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007c8a:	aa16      	add	r2, sp, #88	@ 0x58
 8007c8c:	a917      	add	r1, sp, #92	@ 0x5c
 8007c8e:	4658      	mov	r0, fp
 8007c90:	f001 fa3a 	bl	8009108 <__d2b>
 8007c94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007c98:	4681      	mov	r9, r0
 8007c9a:	2e00      	cmp	r6, #0
 8007c9c:	d077      	beq.n	8007d8e <_dtoa_r+0x1d6>
 8007c9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ca0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007ca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007cb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007cb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007cb8:	4619      	mov	r1, r3
 8007cba:	2200      	movs	r2, #0
 8007cbc:	4b74      	ldr	r3, [pc, #464]	@ (8007e90 <_dtoa_r+0x2d8>)
 8007cbe:	f7f8 fb0b 	bl	80002d8 <__aeabi_dsub>
 8007cc2:	a369      	add	r3, pc, #420	@ (adr r3, 8007e68 <_dtoa_r+0x2b0>)
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	f7f8 fcbe 	bl	8000648 <__aeabi_dmul>
 8007ccc:	a368      	add	r3, pc, #416	@ (adr r3, 8007e70 <_dtoa_r+0x2b8>)
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	f7f8 fb03 	bl	80002dc <__adddf3>
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	4630      	mov	r0, r6
 8007cda:	460d      	mov	r5, r1
 8007cdc:	f7f8 fc4a 	bl	8000574 <__aeabi_i2d>
 8007ce0:	a365      	add	r3, pc, #404	@ (adr r3, 8007e78 <_dtoa_r+0x2c0>)
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	f7f8 fcaf 	bl	8000648 <__aeabi_dmul>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4620      	mov	r0, r4
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	f7f8 faf3 	bl	80002dc <__adddf3>
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	460d      	mov	r5, r1
 8007cfa:	f7f8 ff55 	bl	8000ba8 <__aeabi_d2iz>
 8007cfe:	2200      	movs	r2, #0
 8007d00:	4607      	mov	r7, r0
 8007d02:	2300      	movs	r3, #0
 8007d04:	4620      	mov	r0, r4
 8007d06:	4629      	mov	r1, r5
 8007d08:	f7f8 ff10 	bl	8000b2c <__aeabi_dcmplt>
 8007d0c:	b140      	cbz	r0, 8007d20 <_dtoa_r+0x168>
 8007d0e:	4638      	mov	r0, r7
 8007d10:	f7f8 fc30 	bl	8000574 <__aeabi_i2d>
 8007d14:	4622      	mov	r2, r4
 8007d16:	462b      	mov	r3, r5
 8007d18:	f7f8 fefe 	bl	8000b18 <__aeabi_dcmpeq>
 8007d1c:	b900      	cbnz	r0, 8007d20 <_dtoa_r+0x168>
 8007d1e:	3f01      	subs	r7, #1
 8007d20:	2f16      	cmp	r7, #22
 8007d22:	d851      	bhi.n	8007dc8 <_dtoa_r+0x210>
 8007d24:	4b5b      	ldr	r3, [pc, #364]	@ (8007e94 <_dtoa_r+0x2dc>)
 8007d26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d32:	f7f8 fefb 	bl	8000b2c <__aeabi_dcmplt>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d048      	beq.n	8007dcc <_dtoa_r+0x214>
 8007d3a:	3f01      	subs	r7, #1
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007d40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007d42:	1b9b      	subs	r3, r3, r6
 8007d44:	1e5a      	subs	r2, r3, #1
 8007d46:	bf44      	itt	mi
 8007d48:	f1c3 0801 	rsbmi	r8, r3, #1
 8007d4c:	2300      	movmi	r3, #0
 8007d4e:	9208      	str	r2, [sp, #32]
 8007d50:	bf54      	ite	pl
 8007d52:	f04f 0800 	movpl.w	r8, #0
 8007d56:	9308      	strmi	r3, [sp, #32]
 8007d58:	2f00      	cmp	r7, #0
 8007d5a:	db39      	blt.n	8007dd0 <_dtoa_r+0x218>
 8007d5c:	9b08      	ldr	r3, [sp, #32]
 8007d5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007d60:	443b      	add	r3, r7
 8007d62:	9308      	str	r3, [sp, #32]
 8007d64:	2300      	movs	r3, #0
 8007d66:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d6a:	2b09      	cmp	r3, #9
 8007d6c:	d864      	bhi.n	8007e38 <_dtoa_r+0x280>
 8007d6e:	2b05      	cmp	r3, #5
 8007d70:	bfc4      	itt	gt
 8007d72:	3b04      	subgt	r3, #4
 8007d74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d78:	f1a3 0302 	sub.w	r3, r3, #2
 8007d7c:	bfcc      	ite	gt
 8007d7e:	2400      	movgt	r4, #0
 8007d80:	2401      	movle	r4, #1
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d863      	bhi.n	8007e4e <_dtoa_r+0x296>
 8007d86:	e8df f003 	tbb	[pc, r3]
 8007d8a:	372a      	.short	0x372a
 8007d8c:	5535      	.short	0x5535
 8007d8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007d92:	441e      	add	r6, r3
 8007d94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	bfc1      	itttt	gt
 8007d9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007da0:	409f      	lslgt	r7, r3
 8007da2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007da6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007daa:	bfd6      	itet	le
 8007dac:	f1c3 0320 	rsble	r3, r3, #32
 8007db0:	ea47 0003 	orrgt.w	r0, r7, r3
 8007db4:	fa04 f003 	lslle.w	r0, r4, r3
 8007db8:	f7f8 fbcc 	bl	8000554 <__aeabi_ui2d>
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007dc2:	3e01      	subs	r6, #1
 8007dc4:	9214      	str	r2, [sp, #80]	@ 0x50
 8007dc6:	e777      	b.n	8007cb8 <_dtoa_r+0x100>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e7b8      	b.n	8007d3e <_dtoa_r+0x186>
 8007dcc:	9012      	str	r0, [sp, #72]	@ 0x48
 8007dce:	e7b7      	b.n	8007d40 <_dtoa_r+0x188>
 8007dd0:	427b      	negs	r3, r7
 8007dd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	eba8 0807 	sub.w	r8, r8, r7
 8007dda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ddc:	e7c4      	b.n	8007d68 <_dtoa_r+0x1b0>
 8007dde:	2300      	movs	r3, #0
 8007de0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007de2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	dc35      	bgt.n	8007e54 <_dtoa_r+0x29c>
 8007de8:	2301      	movs	r3, #1
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	9307      	str	r3, [sp, #28]
 8007dee:	461a      	mov	r2, r3
 8007df0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007df2:	e00b      	b.n	8007e0c <_dtoa_r+0x254>
 8007df4:	2301      	movs	r3, #1
 8007df6:	e7f3      	b.n	8007de0 <_dtoa_r+0x228>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dfe:	18fb      	adds	r3, r7, r3
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	3301      	adds	r3, #1
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	9307      	str	r3, [sp, #28]
 8007e08:	bfb8      	it	lt
 8007e0a:	2301      	movlt	r3, #1
 8007e0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007e10:	2100      	movs	r1, #0
 8007e12:	2204      	movs	r2, #4
 8007e14:	f102 0514 	add.w	r5, r2, #20
 8007e18:	429d      	cmp	r5, r3
 8007e1a:	d91f      	bls.n	8007e5c <_dtoa_r+0x2a4>
 8007e1c:	6041      	str	r1, [r0, #4]
 8007e1e:	4658      	mov	r0, fp
 8007e20:	f000 fd8e 	bl	8008940 <_Balloc>
 8007e24:	4682      	mov	sl, r0
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d13c      	bne.n	8007ea4 <_dtoa_r+0x2ec>
 8007e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8007e98 <_dtoa_r+0x2e0>)
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e32:	e6d8      	b.n	8007be6 <_dtoa_r+0x2e>
 8007e34:	2301      	movs	r3, #1
 8007e36:	e7e0      	b.n	8007dfa <_dtoa_r+0x242>
 8007e38:	2401      	movs	r4, #1
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007e40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	9307      	str	r3, [sp, #28]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	2312      	movs	r3, #18
 8007e4c:	e7d0      	b.n	8007df0 <_dtoa_r+0x238>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e52:	e7f5      	b.n	8007e40 <_dtoa_r+0x288>
 8007e54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	9307      	str	r3, [sp, #28]
 8007e5a:	e7d7      	b.n	8007e0c <_dtoa_r+0x254>
 8007e5c:	3101      	adds	r1, #1
 8007e5e:	0052      	lsls	r2, r2, #1
 8007e60:	e7d8      	b.n	8007e14 <_dtoa_r+0x25c>
 8007e62:	bf00      	nop
 8007e64:	f3af 8000 	nop.w
 8007e68:	636f4361 	.word	0x636f4361
 8007e6c:	3fd287a7 	.word	0x3fd287a7
 8007e70:	8b60c8b3 	.word	0x8b60c8b3
 8007e74:	3fc68a28 	.word	0x3fc68a28
 8007e78:	509f79fb 	.word	0x509f79fb
 8007e7c:	3fd34413 	.word	0x3fd34413
 8007e80:	0800b23e 	.word	0x0800b23e
 8007e84:	0800b255 	.word	0x0800b255
 8007e88:	7ff00000 	.word	0x7ff00000
 8007e8c:	0800b209 	.word	0x0800b209
 8007e90:	3ff80000 	.word	0x3ff80000
 8007e94:	0800b350 	.word	0x0800b350
 8007e98:	0800b2ad 	.word	0x0800b2ad
 8007e9c:	0800b23a 	.word	0x0800b23a
 8007ea0:	0800b208 	.word	0x0800b208
 8007ea4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ea8:	6018      	str	r0, [r3, #0]
 8007eaa:	9b07      	ldr	r3, [sp, #28]
 8007eac:	2b0e      	cmp	r3, #14
 8007eae:	f200 80a4 	bhi.w	8007ffa <_dtoa_r+0x442>
 8007eb2:	2c00      	cmp	r4, #0
 8007eb4:	f000 80a1 	beq.w	8007ffa <_dtoa_r+0x442>
 8007eb8:	2f00      	cmp	r7, #0
 8007eba:	dd33      	ble.n	8007f24 <_dtoa_r+0x36c>
 8007ebc:	4bad      	ldr	r3, [pc, #692]	@ (8008174 <_dtoa_r+0x5bc>)
 8007ebe:	f007 020f 	and.w	r2, r7, #15
 8007ec2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ec6:	ed93 7b00 	vldr	d7, [r3]
 8007eca:	05f8      	lsls	r0, r7, #23
 8007ecc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007ed0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007ed4:	d516      	bpl.n	8007f04 <_dtoa_r+0x34c>
 8007ed6:	4ba8      	ldr	r3, [pc, #672]	@ (8008178 <_dtoa_r+0x5c0>)
 8007ed8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007edc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ee0:	f7f8 fcdc 	bl	800089c <__aeabi_ddiv>
 8007ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ee8:	f004 040f 	and.w	r4, r4, #15
 8007eec:	2603      	movs	r6, #3
 8007eee:	4da2      	ldr	r5, [pc, #648]	@ (8008178 <_dtoa_r+0x5c0>)
 8007ef0:	b954      	cbnz	r4, 8007f08 <_dtoa_r+0x350>
 8007ef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007efa:	f7f8 fccf 	bl	800089c <__aeabi_ddiv>
 8007efe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f02:	e028      	b.n	8007f56 <_dtoa_r+0x39e>
 8007f04:	2602      	movs	r6, #2
 8007f06:	e7f2      	b.n	8007eee <_dtoa_r+0x336>
 8007f08:	07e1      	lsls	r1, r4, #31
 8007f0a:	d508      	bpl.n	8007f1e <_dtoa_r+0x366>
 8007f0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f14:	f7f8 fb98 	bl	8000648 <__aeabi_dmul>
 8007f18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f1c:	3601      	adds	r6, #1
 8007f1e:	1064      	asrs	r4, r4, #1
 8007f20:	3508      	adds	r5, #8
 8007f22:	e7e5      	b.n	8007ef0 <_dtoa_r+0x338>
 8007f24:	f000 80d2 	beq.w	80080cc <_dtoa_r+0x514>
 8007f28:	427c      	negs	r4, r7
 8007f2a:	4b92      	ldr	r3, [pc, #584]	@ (8008174 <_dtoa_r+0x5bc>)
 8007f2c:	4d92      	ldr	r5, [pc, #584]	@ (8008178 <_dtoa_r+0x5c0>)
 8007f2e:	f004 020f 	and.w	r2, r4, #15
 8007f32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f3e:	f7f8 fb83 	bl	8000648 <__aeabi_dmul>
 8007f42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f46:	1124      	asrs	r4, r4, #4
 8007f48:	2300      	movs	r3, #0
 8007f4a:	2602      	movs	r6, #2
 8007f4c:	2c00      	cmp	r4, #0
 8007f4e:	f040 80b2 	bne.w	80080b6 <_dtoa_r+0x4fe>
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1d3      	bne.n	8007efe <_dtoa_r+0x346>
 8007f56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f000 80b7 	beq.w	80080d0 <_dtoa_r+0x518>
 8007f62:	4b86      	ldr	r3, [pc, #536]	@ (800817c <_dtoa_r+0x5c4>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	4620      	mov	r0, r4
 8007f68:	4629      	mov	r1, r5
 8007f6a:	f7f8 fddf 	bl	8000b2c <__aeabi_dcmplt>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	f000 80ae 	beq.w	80080d0 <_dtoa_r+0x518>
 8007f74:	9b07      	ldr	r3, [sp, #28]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f000 80aa 	beq.w	80080d0 <_dtoa_r+0x518>
 8007f7c:	9b00      	ldr	r3, [sp, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	dd37      	ble.n	8007ff2 <_dtoa_r+0x43a>
 8007f82:	1e7b      	subs	r3, r7, #1
 8007f84:	9304      	str	r3, [sp, #16]
 8007f86:	4620      	mov	r0, r4
 8007f88:	4b7d      	ldr	r3, [pc, #500]	@ (8008180 <_dtoa_r+0x5c8>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	f7f8 fb5b 	bl	8000648 <__aeabi_dmul>
 8007f92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f96:	9c00      	ldr	r4, [sp, #0]
 8007f98:	3601      	adds	r6, #1
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f7f8 faea 	bl	8000574 <__aeabi_i2d>
 8007fa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fa4:	f7f8 fb50 	bl	8000648 <__aeabi_dmul>
 8007fa8:	4b76      	ldr	r3, [pc, #472]	@ (8008184 <_dtoa_r+0x5cc>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	f7f8 f996 	bl	80002dc <__adddf3>
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007fb6:	2c00      	cmp	r4, #0
 8007fb8:	f040 808d 	bne.w	80080d6 <_dtoa_r+0x51e>
 8007fbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fc0:	4b71      	ldr	r3, [pc, #452]	@ (8008188 <_dtoa_r+0x5d0>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f7f8 f988 	bl	80002d8 <__aeabi_dsub>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fd0:	462a      	mov	r2, r5
 8007fd2:	4633      	mov	r3, r6
 8007fd4:	f7f8 fdc8 	bl	8000b68 <__aeabi_dcmpgt>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	f040 828b 	bne.w	80084f4 <_dtoa_r+0x93c>
 8007fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fe2:	462a      	mov	r2, r5
 8007fe4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007fe8:	f7f8 fda0 	bl	8000b2c <__aeabi_dcmplt>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	f040 8128 	bne.w	8008242 <_dtoa_r+0x68a>
 8007ff2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007ff6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007ffa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f2c0 815a 	blt.w	80082b6 <_dtoa_r+0x6fe>
 8008002:	2f0e      	cmp	r7, #14
 8008004:	f300 8157 	bgt.w	80082b6 <_dtoa_r+0x6fe>
 8008008:	4b5a      	ldr	r3, [pc, #360]	@ (8008174 <_dtoa_r+0x5bc>)
 800800a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800800e:	ed93 7b00 	vldr	d7, [r3]
 8008012:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008014:	2b00      	cmp	r3, #0
 8008016:	ed8d 7b00 	vstr	d7, [sp]
 800801a:	da03      	bge.n	8008024 <_dtoa_r+0x46c>
 800801c:	9b07      	ldr	r3, [sp, #28]
 800801e:	2b00      	cmp	r3, #0
 8008020:	f340 8101 	ble.w	8008226 <_dtoa_r+0x66e>
 8008024:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008028:	4656      	mov	r6, sl
 800802a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800802e:	4620      	mov	r0, r4
 8008030:	4629      	mov	r1, r5
 8008032:	f7f8 fc33 	bl	800089c <__aeabi_ddiv>
 8008036:	f7f8 fdb7 	bl	8000ba8 <__aeabi_d2iz>
 800803a:	4680      	mov	r8, r0
 800803c:	f7f8 fa9a 	bl	8000574 <__aeabi_i2d>
 8008040:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008044:	f7f8 fb00 	bl	8000648 <__aeabi_dmul>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	4620      	mov	r0, r4
 800804e:	4629      	mov	r1, r5
 8008050:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008054:	f7f8 f940 	bl	80002d8 <__aeabi_dsub>
 8008058:	f806 4b01 	strb.w	r4, [r6], #1
 800805c:	9d07      	ldr	r5, [sp, #28]
 800805e:	eba6 040a 	sub.w	r4, r6, sl
 8008062:	42a5      	cmp	r5, r4
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	f040 8117 	bne.w	800829a <_dtoa_r+0x6e2>
 800806c:	f7f8 f936 	bl	80002dc <__adddf3>
 8008070:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008074:	4604      	mov	r4, r0
 8008076:	460d      	mov	r5, r1
 8008078:	f7f8 fd76 	bl	8000b68 <__aeabi_dcmpgt>
 800807c:	2800      	cmp	r0, #0
 800807e:	f040 80f9 	bne.w	8008274 <_dtoa_r+0x6bc>
 8008082:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008086:	4620      	mov	r0, r4
 8008088:	4629      	mov	r1, r5
 800808a:	f7f8 fd45 	bl	8000b18 <__aeabi_dcmpeq>
 800808e:	b118      	cbz	r0, 8008098 <_dtoa_r+0x4e0>
 8008090:	f018 0f01 	tst.w	r8, #1
 8008094:	f040 80ee 	bne.w	8008274 <_dtoa_r+0x6bc>
 8008098:	4649      	mov	r1, r9
 800809a:	4658      	mov	r0, fp
 800809c:	f000 fc90 	bl	80089c0 <_Bfree>
 80080a0:	2300      	movs	r3, #0
 80080a2:	7033      	strb	r3, [r6, #0]
 80080a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80080a6:	3701      	adds	r7, #1
 80080a8:	601f      	str	r7, [r3, #0]
 80080aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 831d 	beq.w	80086ec <_dtoa_r+0xb34>
 80080b2:	601e      	str	r6, [r3, #0]
 80080b4:	e31a      	b.n	80086ec <_dtoa_r+0xb34>
 80080b6:	07e2      	lsls	r2, r4, #31
 80080b8:	d505      	bpl.n	80080c6 <_dtoa_r+0x50e>
 80080ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080be:	f7f8 fac3 	bl	8000648 <__aeabi_dmul>
 80080c2:	3601      	adds	r6, #1
 80080c4:	2301      	movs	r3, #1
 80080c6:	1064      	asrs	r4, r4, #1
 80080c8:	3508      	adds	r5, #8
 80080ca:	e73f      	b.n	8007f4c <_dtoa_r+0x394>
 80080cc:	2602      	movs	r6, #2
 80080ce:	e742      	b.n	8007f56 <_dtoa_r+0x39e>
 80080d0:	9c07      	ldr	r4, [sp, #28]
 80080d2:	9704      	str	r7, [sp, #16]
 80080d4:	e761      	b.n	8007f9a <_dtoa_r+0x3e2>
 80080d6:	4b27      	ldr	r3, [pc, #156]	@ (8008174 <_dtoa_r+0x5bc>)
 80080d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80080de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080e2:	4454      	add	r4, sl
 80080e4:	2900      	cmp	r1, #0
 80080e6:	d053      	beq.n	8008190 <_dtoa_r+0x5d8>
 80080e8:	4928      	ldr	r1, [pc, #160]	@ (800818c <_dtoa_r+0x5d4>)
 80080ea:	2000      	movs	r0, #0
 80080ec:	f7f8 fbd6 	bl	800089c <__aeabi_ddiv>
 80080f0:	4633      	mov	r3, r6
 80080f2:	462a      	mov	r2, r5
 80080f4:	f7f8 f8f0 	bl	80002d8 <__aeabi_dsub>
 80080f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080fc:	4656      	mov	r6, sl
 80080fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008102:	f7f8 fd51 	bl	8000ba8 <__aeabi_d2iz>
 8008106:	4605      	mov	r5, r0
 8008108:	f7f8 fa34 	bl	8000574 <__aeabi_i2d>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008114:	f7f8 f8e0 	bl	80002d8 <__aeabi_dsub>
 8008118:	3530      	adds	r5, #48	@ 0x30
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008122:	f806 5b01 	strb.w	r5, [r6], #1
 8008126:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800812a:	f7f8 fcff 	bl	8000b2c <__aeabi_dcmplt>
 800812e:	2800      	cmp	r0, #0
 8008130:	d171      	bne.n	8008216 <_dtoa_r+0x65e>
 8008132:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008136:	4911      	ldr	r1, [pc, #68]	@ (800817c <_dtoa_r+0x5c4>)
 8008138:	2000      	movs	r0, #0
 800813a:	f7f8 f8cd 	bl	80002d8 <__aeabi_dsub>
 800813e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008142:	f7f8 fcf3 	bl	8000b2c <__aeabi_dcmplt>
 8008146:	2800      	cmp	r0, #0
 8008148:	f040 8095 	bne.w	8008276 <_dtoa_r+0x6be>
 800814c:	42a6      	cmp	r6, r4
 800814e:	f43f af50 	beq.w	8007ff2 <_dtoa_r+0x43a>
 8008152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008156:	4b0a      	ldr	r3, [pc, #40]	@ (8008180 <_dtoa_r+0x5c8>)
 8008158:	2200      	movs	r2, #0
 800815a:	f7f8 fa75 	bl	8000648 <__aeabi_dmul>
 800815e:	4b08      	ldr	r3, [pc, #32]	@ (8008180 <_dtoa_r+0x5c8>)
 8008160:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008164:	2200      	movs	r2, #0
 8008166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800816a:	f7f8 fa6d 	bl	8000648 <__aeabi_dmul>
 800816e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008172:	e7c4      	b.n	80080fe <_dtoa_r+0x546>
 8008174:	0800b350 	.word	0x0800b350
 8008178:	0800b328 	.word	0x0800b328
 800817c:	3ff00000 	.word	0x3ff00000
 8008180:	40240000 	.word	0x40240000
 8008184:	401c0000 	.word	0x401c0000
 8008188:	40140000 	.word	0x40140000
 800818c:	3fe00000 	.word	0x3fe00000
 8008190:	4631      	mov	r1, r6
 8008192:	4628      	mov	r0, r5
 8008194:	f7f8 fa58 	bl	8000648 <__aeabi_dmul>
 8008198:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800819c:	9415      	str	r4, [sp, #84]	@ 0x54
 800819e:	4656      	mov	r6, sl
 80081a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081a4:	f7f8 fd00 	bl	8000ba8 <__aeabi_d2iz>
 80081a8:	4605      	mov	r5, r0
 80081aa:	f7f8 f9e3 	bl	8000574 <__aeabi_i2d>
 80081ae:	4602      	mov	r2, r0
 80081b0:	460b      	mov	r3, r1
 80081b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081b6:	f7f8 f88f 	bl	80002d8 <__aeabi_dsub>
 80081ba:	3530      	adds	r5, #48	@ 0x30
 80081bc:	f806 5b01 	strb.w	r5, [r6], #1
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	42a6      	cmp	r6, r4
 80081c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081ca:	f04f 0200 	mov.w	r2, #0
 80081ce:	d124      	bne.n	800821a <_dtoa_r+0x662>
 80081d0:	4bac      	ldr	r3, [pc, #688]	@ (8008484 <_dtoa_r+0x8cc>)
 80081d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80081d6:	f7f8 f881 	bl	80002dc <__adddf3>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081e2:	f7f8 fcc1 	bl	8000b68 <__aeabi_dcmpgt>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d145      	bne.n	8008276 <_dtoa_r+0x6be>
 80081ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081ee:	49a5      	ldr	r1, [pc, #660]	@ (8008484 <_dtoa_r+0x8cc>)
 80081f0:	2000      	movs	r0, #0
 80081f2:	f7f8 f871 	bl	80002d8 <__aeabi_dsub>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081fe:	f7f8 fc95 	bl	8000b2c <__aeabi_dcmplt>
 8008202:	2800      	cmp	r0, #0
 8008204:	f43f aef5 	beq.w	8007ff2 <_dtoa_r+0x43a>
 8008208:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800820a:	1e73      	subs	r3, r6, #1
 800820c:	9315      	str	r3, [sp, #84]	@ 0x54
 800820e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008212:	2b30      	cmp	r3, #48	@ 0x30
 8008214:	d0f8      	beq.n	8008208 <_dtoa_r+0x650>
 8008216:	9f04      	ldr	r7, [sp, #16]
 8008218:	e73e      	b.n	8008098 <_dtoa_r+0x4e0>
 800821a:	4b9b      	ldr	r3, [pc, #620]	@ (8008488 <_dtoa_r+0x8d0>)
 800821c:	f7f8 fa14 	bl	8000648 <__aeabi_dmul>
 8008220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008224:	e7bc      	b.n	80081a0 <_dtoa_r+0x5e8>
 8008226:	d10c      	bne.n	8008242 <_dtoa_r+0x68a>
 8008228:	4b98      	ldr	r3, [pc, #608]	@ (800848c <_dtoa_r+0x8d4>)
 800822a:	2200      	movs	r2, #0
 800822c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008230:	f7f8 fa0a 	bl	8000648 <__aeabi_dmul>
 8008234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008238:	f7f8 fc8c 	bl	8000b54 <__aeabi_dcmpge>
 800823c:	2800      	cmp	r0, #0
 800823e:	f000 8157 	beq.w	80084f0 <_dtoa_r+0x938>
 8008242:	2400      	movs	r4, #0
 8008244:	4625      	mov	r5, r4
 8008246:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008248:	43db      	mvns	r3, r3
 800824a:	9304      	str	r3, [sp, #16]
 800824c:	4656      	mov	r6, sl
 800824e:	2700      	movs	r7, #0
 8008250:	4621      	mov	r1, r4
 8008252:	4658      	mov	r0, fp
 8008254:	f000 fbb4 	bl	80089c0 <_Bfree>
 8008258:	2d00      	cmp	r5, #0
 800825a:	d0dc      	beq.n	8008216 <_dtoa_r+0x65e>
 800825c:	b12f      	cbz	r7, 800826a <_dtoa_r+0x6b2>
 800825e:	42af      	cmp	r7, r5
 8008260:	d003      	beq.n	800826a <_dtoa_r+0x6b2>
 8008262:	4639      	mov	r1, r7
 8008264:	4658      	mov	r0, fp
 8008266:	f000 fbab 	bl	80089c0 <_Bfree>
 800826a:	4629      	mov	r1, r5
 800826c:	4658      	mov	r0, fp
 800826e:	f000 fba7 	bl	80089c0 <_Bfree>
 8008272:	e7d0      	b.n	8008216 <_dtoa_r+0x65e>
 8008274:	9704      	str	r7, [sp, #16]
 8008276:	4633      	mov	r3, r6
 8008278:	461e      	mov	r6, r3
 800827a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800827e:	2a39      	cmp	r2, #57	@ 0x39
 8008280:	d107      	bne.n	8008292 <_dtoa_r+0x6da>
 8008282:	459a      	cmp	sl, r3
 8008284:	d1f8      	bne.n	8008278 <_dtoa_r+0x6c0>
 8008286:	9a04      	ldr	r2, [sp, #16]
 8008288:	3201      	adds	r2, #1
 800828a:	9204      	str	r2, [sp, #16]
 800828c:	2230      	movs	r2, #48	@ 0x30
 800828e:	f88a 2000 	strb.w	r2, [sl]
 8008292:	781a      	ldrb	r2, [r3, #0]
 8008294:	3201      	adds	r2, #1
 8008296:	701a      	strb	r2, [r3, #0]
 8008298:	e7bd      	b.n	8008216 <_dtoa_r+0x65e>
 800829a:	4b7b      	ldr	r3, [pc, #492]	@ (8008488 <_dtoa_r+0x8d0>)
 800829c:	2200      	movs	r2, #0
 800829e:	f7f8 f9d3 	bl	8000648 <__aeabi_dmul>
 80082a2:	2200      	movs	r2, #0
 80082a4:	2300      	movs	r3, #0
 80082a6:	4604      	mov	r4, r0
 80082a8:	460d      	mov	r5, r1
 80082aa:	f7f8 fc35 	bl	8000b18 <__aeabi_dcmpeq>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f43f aebb 	beq.w	800802a <_dtoa_r+0x472>
 80082b4:	e6f0      	b.n	8008098 <_dtoa_r+0x4e0>
 80082b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80082b8:	2a00      	cmp	r2, #0
 80082ba:	f000 80db 	beq.w	8008474 <_dtoa_r+0x8bc>
 80082be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082c0:	2a01      	cmp	r2, #1
 80082c2:	f300 80bf 	bgt.w	8008444 <_dtoa_r+0x88c>
 80082c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80082c8:	2a00      	cmp	r2, #0
 80082ca:	f000 80b7 	beq.w	800843c <_dtoa_r+0x884>
 80082ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80082d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80082d4:	4646      	mov	r6, r8
 80082d6:	9a08      	ldr	r2, [sp, #32]
 80082d8:	2101      	movs	r1, #1
 80082da:	441a      	add	r2, r3
 80082dc:	4658      	mov	r0, fp
 80082de:	4498      	add	r8, r3
 80082e0:	9208      	str	r2, [sp, #32]
 80082e2:	f000 fc6b 	bl	8008bbc <__i2b>
 80082e6:	4605      	mov	r5, r0
 80082e8:	b15e      	cbz	r6, 8008302 <_dtoa_r+0x74a>
 80082ea:	9b08      	ldr	r3, [sp, #32]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	dd08      	ble.n	8008302 <_dtoa_r+0x74a>
 80082f0:	42b3      	cmp	r3, r6
 80082f2:	9a08      	ldr	r2, [sp, #32]
 80082f4:	bfa8      	it	ge
 80082f6:	4633      	movge	r3, r6
 80082f8:	eba8 0803 	sub.w	r8, r8, r3
 80082fc:	1af6      	subs	r6, r6, r3
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	9308      	str	r3, [sp, #32]
 8008302:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008304:	b1f3      	cbz	r3, 8008344 <_dtoa_r+0x78c>
 8008306:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 80b7 	beq.w	800847c <_dtoa_r+0x8c4>
 800830e:	b18c      	cbz	r4, 8008334 <_dtoa_r+0x77c>
 8008310:	4629      	mov	r1, r5
 8008312:	4622      	mov	r2, r4
 8008314:	4658      	mov	r0, fp
 8008316:	f000 fd11 	bl	8008d3c <__pow5mult>
 800831a:	464a      	mov	r2, r9
 800831c:	4601      	mov	r1, r0
 800831e:	4605      	mov	r5, r0
 8008320:	4658      	mov	r0, fp
 8008322:	f000 fc61 	bl	8008be8 <__multiply>
 8008326:	4649      	mov	r1, r9
 8008328:	9004      	str	r0, [sp, #16]
 800832a:	4658      	mov	r0, fp
 800832c:	f000 fb48 	bl	80089c0 <_Bfree>
 8008330:	9b04      	ldr	r3, [sp, #16]
 8008332:	4699      	mov	r9, r3
 8008334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008336:	1b1a      	subs	r2, r3, r4
 8008338:	d004      	beq.n	8008344 <_dtoa_r+0x78c>
 800833a:	4649      	mov	r1, r9
 800833c:	4658      	mov	r0, fp
 800833e:	f000 fcfd 	bl	8008d3c <__pow5mult>
 8008342:	4681      	mov	r9, r0
 8008344:	2101      	movs	r1, #1
 8008346:	4658      	mov	r0, fp
 8008348:	f000 fc38 	bl	8008bbc <__i2b>
 800834c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800834e:	4604      	mov	r4, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 81cf 	beq.w	80086f4 <_dtoa_r+0xb3c>
 8008356:	461a      	mov	r2, r3
 8008358:	4601      	mov	r1, r0
 800835a:	4658      	mov	r0, fp
 800835c:	f000 fcee 	bl	8008d3c <__pow5mult>
 8008360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008362:	2b01      	cmp	r3, #1
 8008364:	4604      	mov	r4, r0
 8008366:	f300 8095 	bgt.w	8008494 <_dtoa_r+0x8dc>
 800836a:	9b02      	ldr	r3, [sp, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	f040 8087 	bne.w	8008480 <_dtoa_r+0x8c8>
 8008372:	9b03      	ldr	r3, [sp, #12]
 8008374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008378:	2b00      	cmp	r3, #0
 800837a:	f040 8089 	bne.w	8008490 <_dtoa_r+0x8d8>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008384:	0d1b      	lsrs	r3, r3, #20
 8008386:	051b      	lsls	r3, r3, #20
 8008388:	b12b      	cbz	r3, 8008396 <_dtoa_r+0x7de>
 800838a:	9b08      	ldr	r3, [sp, #32]
 800838c:	3301      	adds	r3, #1
 800838e:	9308      	str	r3, [sp, #32]
 8008390:	f108 0801 	add.w	r8, r8, #1
 8008394:	2301      	movs	r3, #1
 8008396:	930a      	str	r3, [sp, #40]	@ 0x28
 8008398:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 81b0 	beq.w	8008700 <_dtoa_r+0xb48>
 80083a0:	6923      	ldr	r3, [r4, #16]
 80083a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083a6:	6918      	ldr	r0, [r3, #16]
 80083a8:	f000 fbbc 	bl	8008b24 <__hi0bits>
 80083ac:	f1c0 0020 	rsb	r0, r0, #32
 80083b0:	9b08      	ldr	r3, [sp, #32]
 80083b2:	4418      	add	r0, r3
 80083b4:	f010 001f 	ands.w	r0, r0, #31
 80083b8:	d077      	beq.n	80084aa <_dtoa_r+0x8f2>
 80083ba:	f1c0 0320 	rsb	r3, r0, #32
 80083be:	2b04      	cmp	r3, #4
 80083c0:	dd6b      	ble.n	800849a <_dtoa_r+0x8e2>
 80083c2:	9b08      	ldr	r3, [sp, #32]
 80083c4:	f1c0 001c 	rsb	r0, r0, #28
 80083c8:	4403      	add	r3, r0
 80083ca:	4480      	add	r8, r0
 80083cc:	4406      	add	r6, r0
 80083ce:	9308      	str	r3, [sp, #32]
 80083d0:	f1b8 0f00 	cmp.w	r8, #0
 80083d4:	dd05      	ble.n	80083e2 <_dtoa_r+0x82a>
 80083d6:	4649      	mov	r1, r9
 80083d8:	4642      	mov	r2, r8
 80083da:	4658      	mov	r0, fp
 80083dc:	f000 fd08 	bl	8008df0 <__lshift>
 80083e0:	4681      	mov	r9, r0
 80083e2:	9b08      	ldr	r3, [sp, #32]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	dd05      	ble.n	80083f4 <_dtoa_r+0x83c>
 80083e8:	4621      	mov	r1, r4
 80083ea:	461a      	mov	r2, r3
 80083ec:	4658      	mov	r0, fp
 80083ee:	f000 fcff 	bl	8008df0 <__lshift>
 80083f2:	4604      	mov	r4, r0
 80083f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d059      	beq.n	80084ae <_dtoa_r+0x8f6>
 80083fa:	4621      	mov	r1, r4
 80083fc:	4648      	mov	r0, r9
 80083fe:	f000 fd63 	bl	8008ec8 <__mcmp>
 8008402:	2800      	cmp	r0, #0
 8008404:	da53      	bge.n	80084ae <_dtoa_r+0x8f6>
 8008406:	1e7b      	subs	r3, r7, #1
 8008408:	9304      	str	r3, [sp, #16]
 800840a:	4649      	mov	r1, r9
 800840c:	2300      	movs	r3, #0
 800840e:	220a      	movs	r2, #10
 8008410:	4658      	mov	r0, fp
 8008412:	f000 faf7 	bl	8008a04 <__multadd>
 8008416:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008418:	4681      	mov	r9, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 8172 	beq.w	8008704 <_dtoa_r+0xb4c>
 8008420:	2300      	movs	r3, #0
 8008422:	4629      	mov	r1, r5
 8008424:	220a      	movs	r2, #10
 8008426:	4658      	mov	r0, fp
 8008428:	f000 faec 	bl	8008a04 <__multadd>
 800842c:	9b00      	ldr	r3, [sp, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	4605      	mov	r5, r0
 8008432:	dc67      	bgt.n	8008504 <_dtoa_r+0x94c>
 8008434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008436:	2b02      	cmp	r3, #2
 8008438:	dc41      	bgt.n	80084be <_dtoa_r+0x906>
 800843a:	e063      	b.n	8008504 <_dtoa_r+0x94c>
 800843c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800843e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008442:	e746      	b.n	80082d2 <_dtoa_r+0x71a>
 8008444:	9b07      	ldr	r3, [sp, #28]
 8008446:	1e5c      	subs	r4, r3, #1
 8008448:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800844a:	42a3      	cmp	r3, r4
 800844c:	bfbf      	itttt	lt
 800844e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008450:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008452:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008454:	1ae3      	sublt	r3, r4, r3
 8008456:	bfb4      	ite	lt
 8008458:	18d2      	addlt	r2, r2, r3
 800845a:	1b1c      	subge	r4, r3, r4
 800845c:	9b07      	ldr	r3, [sp, #28]
 800845e:	bfbc      	itt	lt
 8008460:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008462:	2400      	movlt	r4, #0
 8008464:	2b00      	cmp	r3, #0
 8008466:	bfb5      	itete	lt
 8008468:	eba8 0603 	sublt.w	r6, r8, r3
 800846c:	9b07      	ldrge	r3, [sp, #28]
 800846e:	2300      	movlt	r3, #0
 8008470:	4646      	movge	r6, r8
 8008472:	e730      	b.n	80082d6 <_dtoa_r+0x71e>
 8008474:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008476:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008478:	4646      	mov	r6, r8
 800847a:	e735      	b.n	80082e8 <_dtoa_r+0x730>
 800847c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800847e:	e75c      	b.n	800833a <_dtoa_r+0x782>
 8008480:	2300      	movs	r3, #0
 8008482:	e788      	b.n	8008396 <_dtoa_r+0x7de>
 8008484:	3fe00000 	.word	0x3fe00000
 8008488:	40240000 	.word	0x40240000
 800848c:	40140000 	.word	0x40140000
 8008490:	9b02      	ldr	r3, [sp, #8]
 8008492:	e780      	b.n	8008396 <_dtoa_r+0x7de>
 8008494:	2300      	movs	r3, #0
 8008496:	930a      	str	r3, [sp, #40]	@ 0x28
 8008498:	e782      	b.n	80083a0 <_dtoa_r+0x7e8>
 800849a:	d099      	beq.n	80083d0 <_dtoa_r+0x818>
 800849c:	9a08      	ldr	r2, [sp, #32]
 800849e:	331c      	adds	r3, #28
 80084a0:	441a      	add	r2, r3
 80084a2:	4498      	add	r8, r3
 80084a4:	441e      	add	r6, r3
 80084a6:	9208      	str	r2, [sp, #32]
 80084a8:	e792      	b.n	80083d0 <_dtoa_r+0x818>
 80084aa:	4603      	mov	r3, r0
 80084ac:	e7f6      	b.n	800849c <_dtoa_r+0x8e4>
 80084ae:	9b07      	ldr	r3, [sp, #28]
 80084b0:	9704      	str	r7, [sp, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	dc20      	bgt.n	80084f8 <_dtoa_r+0x940>
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	dd1e      	ble.n	80084fc <_dtoa_r+0x944>
 80084be:	9b00      	ldr	r3, [sp, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f47f aec0 	bne.w	8008246 <_dtoa_r+0x68e>
 80084c6:	4621      	mov	r1, r4
 80084c8:	2205      	movs	r2, #5
 80084ca:	4658      	mov	r0, fp
 80084cc:	f000 fa9a 	bl	8008a04 <__multadd>
 80084d0:	4601      	mov	r1, r0
 80084d2:	4604      	mov	r4, r0
 80084d4:	4648      	mov	r0, r9
 80084d6:	f000 fcf7 	bl	8008ec8 <__mcmp>
 80084da:	2800      	cmp	r0, #0
 80084dc:	f77f aeb3 	ble.w	8008246 <_dtoa_r+0x68e>
 80084e0:	4656      	mov	r6, sl
 80084e2:	2331      	movs	r3, #49	@ 0x31
 80084e4:	f806 3b01 	strb.w	r3, [r6], #1
 80084e8:	9b04      	ldr	r3, [sp, #16]
 80084ea:	3301      	adds	r3, #1
 80084ec:	9304      	str	r3, [sp, #16]
 80084ee:	e6ae      	b.n	800824e <_dtoa_r+0x696>
 80084f0:	9c07      	ldr	r4, [sp, #28]
 80084f2:	9704      	str	r7, [sp, #16]
 80084f4:	4625      	mov	r5, r4
 80084f6:	e7f3      	b.n	80084e0 <_dtoa_r+0x928>
 80084f8:	9b07      	ldr	r3, [sp, #28]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 8104 	beq.w	800870c <_dtoa_r+0xb54>
 8008504:	2e00      	cmp	r6, #0
 8008506:	dd05      	ble.n	8008514 <_dtoa_r+0x95c>
 8008508:	4629      	mov	r1, r5
 800850a:	4632      	mov	r2, r6
 800850c:	4658      	mov	r0, fp
 800850e:	f000 fc6f 	bl	8008df0 <__lshift>
 8008512:	4605      	mov	r5, r0
 8008514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008516:	2b00      	cmp	r3, #0
 8008518:	d05a      	beq.n	80085d0 <_dtoa_r+0xa18>
 800851a:	6869      	ldr	r1, [r5, #4]
 800851c:	4658      	mov	r0, fp
 800851e:	f000 fa0f 	bl	8008940 <_Balloc>
 8008522:	4606      	mov	r6, r0
 8008524:	b928      	cbnz	r0, 8008532 <_dtoa_r+0x97a>
 8008526:	4b84      	ldr	r3, [pc, #528]	@ (8008738 <_dtoa_r+0xb80>)
 8008528:	4602      	mov	r2, r0
 800852a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800852e:	f7ff bb5a 	b.w	8007be6 <_dtoa_r+0x2e>
 8008532:	692a      	ldr	r2, [r5, #16]
 8008534:	3202      	adds	r2, #2
 8008536:	0092      	lsls	r2, r2, #2
 8008538:	f105 010c 	add.w	r1, r5, #12
 800853c:	300c      	adds	r0, #12
 800853e:	f001 ff75 	bl	800a42c <memcpy>
 8008542:	2201      	movs	r2, #1
 8008544:	4631      	mov	r1, r6
 8008546:	4658      	mov	r0, fp
 8008548:	f000 fc52 	bl	8008df0 <__lshift>
 800854c:	f10a 0301 	add.w	r3, sl, #1
 8008550:	9307      	str	r3, [sp, #28]
 8008552:	9b00      	ldr	r3, [sp, #0]
 8008554:	4453      	add	r3, sl
 8008556:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008558:	9b02      	ldr	r3, [sp, #8]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	462f      	mov	r7, r5
 8008560:	930a      	str	r3, [sp, #40]	@ 0x28
 8008562:	4605      	mov	r5, r0
 8008564:	9b07      	ldr	r3, [sp, #28]
 8008566:	4621      	mov	r1, r4
 8008568:	3b01      	subs	r3, #1
 800856a:	4648      	mov	r0, r9
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	f7ff fa99 	bl	8007aa4 <quorem>
 8008572:	4639      	mov	r1, r7
 8008574:	9002      	str	r0, [sp, #8]
 8008576:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800857a:	4648      	mov	r0, r9
 800857c:	f000 fca4 	bl	8008ec8 <__mcmp>
 8008580:	462a      	mov	r2, r5
 8008582:	9008      	str	r0, [sp, #32]
 8008584:	4621      	mov	r1, r4
 8008586:	4658      	mov	r0, fp
 8008588:	f000 fcba 	bl	8008f00 <__mdiff>
 800858c:	68c2      	ldr	r2, [r0, #12]
 800858e:	4606      	mov	r6, r0
 8008590:	bb02      	cbnz	r2, 80085d4 <_dtoa_r+0xa1c>
 8008592:	4601      	mov	r1, r0
 8008594:	4648      	mov	r0, r9
 8008596:	f000 fc97 	bl	8008ec8 <__mcmp>
 800859a:	4602      	mov	r2, r0
 800859c:	4631      	mov	r1, r6
 800859e:	4658      	mov	r0, fp
 80085a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80085a2:	f000 fa0d 	bl	80089c0 <_Bfree>
 80085a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085aa:	9e07      	ldr	r6, [sp, #28]
 80085ac:	ea43 0102 	orr.w	r1, r3, r2
 80085b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085b2:	4319      	orrs	r1, r3
 80085b4:	d110      	bne.n	80085d8 <_dtoa_r+0xa20>
 80085b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80085ba:	d029      	beq.n	8008610 <_dtoa_r+0xa58>
 80085bc:	9b08      	ldr	r3, [sp, #32]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	dd02      	ble.n	80085c8 <_dtoa_r+0xa10>
 80085c2:	9b02      	ldr	r3, [sp, #8]
 80085c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80085c8:	9b00      	ldr	r3, [sp, #0]
 80085ca:	f883 8000 	strb.w	r8, [r3]
 80085ce:	e63f      	b.n	8008250 <_dtoa_r+0x698>
 80085d0:	4628      	mov	r0, r5
 80085d2:	e7bb      	b.n	800854c <_dtoa_r+0x994>
 80085d4:	2201      	movs	r2, #1
 80085d6:	e7e1      	b.n	800859c <_dtoa_r+0x9e4>
 80085d8:	9b08      	ldr	r3, [sp, #32]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	db04      	blt.n	80085e8 <_dtoa_r+0xa30>
 80085de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085e0:	430b      	orrs	r3, r1
 80085e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085e4:	430b      	orrs	r3, r1
 80085e6:	d120      	bne.n	800862a <_dtoa_r+0xa72>
 80085e8:	2a00      	cmp	r2, #0
 80085ea:	dded      	ble.n	80085c8 <_dtoa_r+0xa10>
 80085ec:	4649      	mov	r1, r9
 80085ee:	2201      	movs	r2, #1
 80085f0:	4658      	mov	r0, fp
 80085f2:	f000 fbfd 	bl	8008df0 <__lshift>
 80085f6:	4621      	mov	r1, r4
 80085f8:	4681      	mov	r9, r0
 80085fa:	f000 fc65 	bl	8008ec8 <__mcmp>
 80085fe:	2800      	cmp	r0, #0
 8008600:	dc03      	bgt.n	800860a <_dtoa_r+0xa52>
 8008602:	d1e1      	bne.n	80085c8 <_dtoa_r+0xa10>
 8008604:	f018 0f01 	tst.w	r8, #1
 8008608:	d0de      	beq.n	80085c8 <_dtoa_r+0xa10>
 800860a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800860e:	d1d8      	bne.n	80085c2 <_dtoa_r+0xa0a>
 8008610:	9a00      	ldr	r2, [sp, #0]
 8008612:	2339      	movs	r3, #57	@ 0x39
 8008614:	7013      	strb	r3, [r2, #0]
 8008616:	4633      	mov	r3, r6
 8008618:	461e      	mov	r6, r3
 800861a:	3b01      	subs	r3, #1
 800861c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008620:	2a39      	cmp	r2, #57	@ 0x39
 8008622:	d052      	beq.n	80086ca <_dtoa_r+0xb12>
 8008624:	3201      	adds	r2, #1
 8008626:	701a      	strb	r2, [r3, #0]
 8008628:	e612      	b.n	8008250 <_dtoa_r+0x698>
 800862a:	2a00      	cmp	r2, #0
 800862c:	dd07      	ble.n	800863e <_dtoa_r+0xa86>
 800862e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008632:	d0ed      	beq.n	8008610 <_dtoa_r+0xa58>
 8008634:	9a00      	ldr	r2, [sp, #0]
 8008636:	f108 0301 	add.w	r3, r8, #1
 800863a:	7013      	strb	r3, [r2, #0]
 800863c:	e608      	b.n	8008250 <_dtoa_r+0x698>
 800863e:	9b07      	ldr	r3, [sp, #28]
 8008640:	9a07      	ldr	r2, [sp, #28]
 8008642:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008646:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008648:	4293      	cmp	r3, r2
 800864a:	d028      	beq.n	800869e <_dtoa_r+0xae6>
 800864c:	4649      	mov	r1, r9
 800864e:	2300      	movs	r3, #0
 8008650:	220a      	movs	r2, #10
 8008652:	4658      	mov	r0, fp
 8008654:	f000 f9d6 	bl	8008a04 <__multadd>
 8008658:	42af      	cmp	r7, r5
 800865a:	4681      	mov	r9, r0
 800865c:	f04f 0300 	mov.w	r3, #0
 8008660:	f04f 020a 	mov.w	r2, #10
 8008664:	4639      	mov	r1, r7
 8008666:	4658      	mov	r0, fp
 8008668:	d107      	bne.n	800867a <_dtoa_r+0xac2>
 800866a:	f000 f9cb 	bl	8008a04 <__multadd>
 800866e:	4607      	mov	r7, r0
 8008670:	4605      	mov	r5, r0
 8008672:	9b07      	ldr	r3, [sp, #28]
 8008674:	3301      	adds	r3, #1
 8008676:	9307      	str	r3, [sp, #28]
 8008678:	e774      	b.n	8008564 <_dtoa_r+0x9ac>
 800867a:	f000 f9c3 	bl	8008a04 <__multadd>
 800867e:	4629      	mov	r1, r5
 8008680:	4607      	mov	r7, r0
 8008682:	2300      	movs	r3, #0
 8008684:	220a      	movs	r2, #10
 8008686:	4658      	mov	r0, fp
 8008688:	f000 f9bc 	bl	8008a04 <__multadd>
 800868c:	4605      	mov	r5, r0
 800868e:	e7f0      	b.n	8008672 <_dtoa_r+0xaba>
 8008690:	9b00      	ldr	r3, [sp, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	bfcc      	ite	gt
 8008696:	461e      	movgt	r6, r3
 8008698:	2601      	movle	r6, #1
 800869a:	4456      	add	r6, sl
 800869c:	2700      	movs	r7, #0
 800869e:	4649      	mov	r1, r9
 80086a0:	2201      	movs	r2, #1
 80086a2:	4658      	mov	r0, fp
 80086a4:	f000 fba4 	bl	8008df0 <__lshift>
 80086a8:	4621      	mov	r1, r4
 80086aa:	4681      	mov	r9, r0
 80086ac:	f000 fc0c 	bl	8008ec8 <__mcmp>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	dcb0      	bgt.n	8008616 <_dtoa_r+0xa5e>
 80086b4:	d102      	bne.n	80086bc <_dtoa_r+0xb04>
 80086b6:	f018 0f01 	tst.w	r8, #1
 80086ba:	d1ac      	bne.n	8008616 <_dtoa_r+0xa5e>
 80086bc:	4633      	mov	r3, r6
 80086be:	461e      	mov	r6, r3
 80086c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086c4:	2a30      	cmp	r2, #48	@ 0x30
 80086c6:	d0fa      	beq.n	80086be <_dtoa_r+0xb06>
 80086c8:	e5c2      	b.n	8008250 <_dtoa_r+0x698>
 80086ca:	459a      	cmp	sl, r3
 80086cc:	d1a4      	bne.n	8008618 <_dtoa_r+0xa60>
 80086ce:	9b04      	ldr	r3, [sp, #16]
 80086d0:	3301      	adds	r3, #1
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	2331      	movs	r3, #49	@ 0x31
 80086d6:	f88a 3000 	strb.w	r3, [sl]
 80086da:	e5b9      	b.n	8008250 <_dtoa_r+0x698>
 80086dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800873c <_dtoa_r+0xb84>
 80086e2:	b11b      	cbz	r3, 80086ec <_dtoa_r+0xb34>
 80086e4:	f10a 0308 	add.w	r3, sl, #8
 80086e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80086ea:	6013      	str	r3, [r2, #0]
 80086ec:	4650      	mov	r0, sl
 80086ee:	b019      	add	sp, #100	@ 0x64
 80086f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	f77f ae37 	ble.w	800836a <_dtoa_r+0x7b2>
 80086fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008700:	2001      	movs	r0, #1
 8008702:	e655      	b.n	80083b0 <_dtoa_r+0x7f8>
 8008704:	9b00      	ldr	r3, [sp, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	f77f aed6 	ble.w	80084b8 <_dtoa_r+0x900>
 800870c:	4656      	mov	r6, sl
 800870e:	4621      	mov	r1, r4
 8008710:	4648      	mov	r0, r9
 8008712:	f7ff f9c7 	bl	8007aa4 <quorem>
 8008716:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800871a:	f806 8b01 	strb.w	r8, [r6], #1
 800871e:	9b00      	ldr	r3, [sp, #0]
 8008720:	eba6 020a 	sub.w	r2, r6, sl
 8008724:	4293      	cmp	r3, r2
 8008726:	ddb3      	ble.n	8008690 <_dtoa_r+0xad8>
 8008728:	4649      	mov	r1, r9
 800872a:	2300      	movs	r3, #0
 800872c:	220a      	movs	r2, #10
 800872e:	4658      	mov	r0, fp
 8008730:	f000 f968 	bl	8008a04 <__multadd>
 8008734:	4681      	mov	r9, r0
 8008736:	e7ea      	b.n	800870e <_dtoa_r+0xb56>
 8008738:	0800b2ad 	.word	0x0800b2ad
 800873c:	0800b231 	.word	0x0800b231

08008740 <_free_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4605      	mov	r5, r0
 8008744:	2900      	cmp	r1, #0
 8008746:	d041      	beq.n	80087cc <_free_r+0x8c>
 8008748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800874c:	1f0c      	subs	r4, r1, #4
 800874e:	2b00      	cmp	r3, #0
 8008750:	bfb8      	it	lt
 8008752:	18e4      	addlt	r4, r4, r3
 8008754:	f000 f8e8 	bl	8008928 <__malloc_lock>
 8008758:	4a1d      	ldr	r2, [pc, #116]	@ (80087d0 <_free_r+0x90>)
 800875a:	6813      	ldr	r3, [r2, #0]
 800875c:	b933      	cbnz	r3, 800876c <_free_r+0x2c>
 800875e:	6063      	str	r3, [r4, #4]
 8008760:	6014      	str	r4, [r2, #0]
 8008762:	4628      	mov	r0, r5
 8008764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008768:	f000 b8e4 	b.w	8008934 <__malloc_unlock>
 800876c:	42a3      	cmp	r3, r4
 800876e:	d908      	bls.n	8008782 <_free_r+0x42>
 8008770:	6820      	ldr	r0, [r4, #0]
 8008772:	1821      	adds	r1, r4, r0
 8008774:	428b      	cmp	r3, r1
 8008776:	bf01      	itttt	eq
 8008778:	6819      	ldreq	r1, [r3, #0]
 800877a:	685b      	ldreq	r3, [r3, #4]
 800877c:	1809      	addeq	r1, r1, r0
 800877e:	6021      	streq	r1, [r4, #0]
 8008780:	e7ed      	b.n	800875e <_free_r+0x1e>
 8008782:	461a      	mov	r2, r3
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	b10b      	cbz	r3, 800878c <_free_r+0x4c>
 8008788:	42a3      	cmp	r3, r4
 800878a:	d9fa      	bls.n	8008782 <_free_r+0x42>
 800878c:	6811      	ldr	r1, [r2, #0]
 800878e:	1850      	adds	r0, r2, r1
 8008790:	42a0      	cmp	r0, r4
 8008792:	d10b      	bne.n	80087ac <_free_r+0x6c>
 8008794:	6820      	ldr	r0, [r4, #0]
 8008796:	4401      	add	r1, r0
 8008798:	1850      	adds	r0, r2, r1
 800879a:	4283      	cmp	r3, r0
 800879c:	6011      	str	r1, [r2, #0]
 800879e:	d1e0      	bne.n	8008762 <_free_r+0x22>
 80087a0:	6818      	ldr	r0, [r3, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	6053      	str	r3, [r2, #4]
 80087a6:	4408      	add	r0, r1
 80087a8:	6010      	str	r0, [r2, #0]
 80087aa:	e7da      	b.n	8008762 <_free_r+0x22>
 80087ac:	d902      	bls.n	80087b4 <_free_r+0x74>
 80087ae:	230c      	movs	r3, #12
 80087b0:	602b      	str	r3, [r5, #0]
 80087b2:	e7d6      	b.n	8008762 <_free_r+0x22>
 80087b4:	6820      	ldr	r0, [r4, #0]
 80087b6:	1821      	adds	r1, r4, r0
 80087b8:	428b      	cmp	r3, r1
 80087ba:	bf04      	itt	eq
 80087bc:	6819      	ldreq	r1, [r3, #0]
 80087be:	685b      	ldreq	r3, [r3, #4]
 80087c0:	6063      	str	r3, [r4, #4]
 80087c2:	bf04      	itt	eq
 80087c4:	1809      	addeq	r1, r1, r0
 80087c6:	6021      	streq	r1, [r4, #0]
 80087c8:	6054      	str	r4, [r2, #4]
 80087ca:	e7ca      	b.n	8008762 <_free_r+0x22>
 80087cc:	bd38      	pop	{r3, r4, r5, pc}
 80087ce:	bf00      	nop
 80087d0:	200004b4 	.word	0x200004b4

080087d4 <malloc>:
 80087d4:	4b02      	ldr	r3, [pc, #8]	@ (80087e0 <malloc+0xc>)
 80087d6:	4601      	mov	r1, r0
 80087d8:	6818      	ldr	r0, [r3, #0]
 80087da:	f000 b825 	b.w	8008828 <_malloc_r>
 80087de:	bf00      	nop
 80087e0:	20000018 	.word	0x20000018

080087e4 <sbrk_aligned>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	4e0f      	ldr	r6, [pc, #60]	@ (8008824 <sbrk_aligned+0x40>)
 80087e8:	460c      	mov	r4, r1
 80087ea:	6831      	ldr	r1, [r6, #0]
 80087ec:	4605      	mov	r5, r0
 80087ee:	b911      	cbnz	r1, 80087f6 <sbrk_aligned+0x12>
 80087f0:	f001 fe0c 	bl	800a40c <_sbrk_r>
 80087f4:	6030      	str	r0, [r6, #0]
 80087f6:	4621      	mov	r1, r4
 80087f8:	4628      	mov	r0, r5
 80087fa:	f001 fe07 	bl	800a40c <_sbrk_r>
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	d103      	bne.n	800880a <sbrk_aligned+0x26>
 8008802:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008806:	4620      	mov	r0, r4
 8008808:	bd70      	pop	{r4, r5, r6, pc}
 800880a:	1cc4      	adds	r4, r0, #3
 800880c:	f024 0403 	bic.w	r4, r4, #3
 8008810:	42a0      	cmp	r0, r4
 8008812:	d0f8      	beq.n	8008806 <sbrk_aligned+0x22>
 8008814:	1a21      	subs	r1, r4, r0
 8008816:	4628      	mov	r0, r5
 8008818:	f001 fdf8 	bl	800a40c <_sbrk_r>
 800881c:	3001      	adds	r0, #1
 800881e:	d1f2      	bne.n	8008806 <sbrk_aligned+0x22>
 8008820:	e7ef      	b.n	8008802 <sbrk_aligned+0x1e>
 8008822:	bf00      	nop
 8008824:	200004b0 	.word	0x200004b0

08008828 <_malloc_r>:
 8008828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800882c:	1ccd      	adds	r5, r1, #3
 800882e:	f025 0503 	bic.w	r5, r5, #3
 8008832:	3508      	adds	r5, #8
 8008834:	2d0c      	cmp	r5, #12
 8008836:	bf38      	it	cc
 8008838:	250c      	movcc	r5, #12
 800883a:	2d00      	cmp	r5, #0
 800883c:	4606      	mov	r6, r0
 800883e:	db01      	blt.n	8008844 <_malloc_r+0x1c>
 8008840:	42a9      	cmp	r1, r5
 8008842:	d904      	bls.n	800884e <_malloc_r+0x26>
 8008844:	230c      	movs	r3, #12
 8008846:	6033      	str	r3, [r6, #0]
 8008848:	2000      	movs	r0, #0
 800884a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800884e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008924 <_malloc_r+0xfc>
 8008852:	f000 f869 	bl	8008928 <__malloc_lock>
 8008856:	f8d8 3000 	ldr.w	r3, [r8]
 800885a:	461c      	mov	r4, r3
 800885c:	bb44      	cbnz	r4, 80088b0 <_malloc_r+0x88>
 800885e:	4629      	mov	r1, r5
 8008860:	4630      	mov	r0, r6
 8008862:	f7ff ffbf 	bl	80087e4 <sbrk_aligned>
 8008866:	1c43      	adds	r3, r0, #1
 8008868:	4604      	mov	r4, r0
 800886a:	d158      	bne.n	800891e <_malloc_r+0xf6>
 800886c:	f8d8 4000 	ldr.w	r4, [r8]
 8008870:	4627      	mov	r7, r4
 8008872:	2f00      	cmp	r7, #0
 8008874:	d143      	bne.n	80088fe <_malloc_r+0xd6>
 8008876:	2c00      	cmp	r4, #0
 8008878:	d04b      	beq.n	8008912 <_malloc_r+0xea>
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	4639      	mov	r1, r7
 800887e:	4630      	mov	r0, r6
 8008880:	eb04 0903 	add.w	r9, r4, r3
 8008884:	f001 fdc2 	bl	800a40c <_sbrk_r>
 8008888:	4581      	cmp	r9, r0
 800888a:	d142      	bne.n	8008912 <_malloc_r+0xea>
 800888c:	6821      	ldr	r1, [r4, #0]
 800888e:	1a6d      	subs	r5, r5, r1
 8008890:	4629      	mov	r1, r5
 8008892:	4630      	mov	r0, r6
 8008894:	f7ff ffa6 	bl	80087e4 <sbrk_aligned>
 8008898:	3001      	adds	r0, #1
 800889a:	d03a      	beq.n	8008912 <_malloc_r+0xea>
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	442b      	add	r3, r5
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	f8d8 3000 	ldr.w	r3, [r8]
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	bb62      	cbnz	r2, 8008904 <_malloc_r+0xdc>
 80088aa:	f8c8 7000 	str.w	r7, [r8]
 80088ae:	e00f      	b.n	80088d0 <_malloc_r+0xa8>
 80088b0:	6822      	ldr	r2, [r4, #0]
 80088b2:	1b52      	subs	r2, r2, r5
 80088b4:	d420      	bmi.n	80088f8 <_malloc_r+0xd0>
 80088b6:	2a0b      	cmp	r2, #11
 80088b8:	d917      	bls.n	80088ea <_malloc_r+0xc2>
 80088ba:	1961      	adds	r1, r4, r5
 80088bc:	42a3      	cmp	r3, r4
 80088be:	6025      	str	r5, [r4, #0]
 80088c0:	bf18      	it	ne
 80088c2:	6059      	strne	r1, [r3, #4]
 80088c4:	6863      	ldr	r3, [r4, #4]
 80088c6:	bf08      	it	eq
 80088c8:	f8c8 1000 	streq.w	r1, [r8]
 80088cc:	5162      	str	r2, [r4, r5]
 80088ce:	604b      	str	r3, [r1, #4]
 80088d0:	4630      	mov	r0, r6
 80088d2:	f000 f82f 	bl	8008934 <__malloc_unlock>
 80088d6:	f104 000b 	add.w	r0, r4, #11
 80088da:	1d23      	adds	r3, r4, #4
 80088dc:	f020 0007 	bic.w	r0, r0, #7
 80088e0:	1ac2      	subs	r2, r0, r3
 80088e2:	bf1c      	itt	ne
 80088e4:	1a1b      	subne	r3, r3, r0
 80088e6:	50a3      	strne	r3, [r4, r2]
 80088e8:	e7af      	b.n	800884a <_malloc_r+0x22>
 80088ea:	6862      	ldr	r2, [r4, #4]
 80088ec:	42a3      	cmp	r3, r4
 80088ee:	bf0c      	ite	eq
 80088f0:	f8c8 2000 	streq.w	r2, [r8]
 80088f4:	605a      	strne	r2, [r3, #4]
 80088f6:	e7eb      	b.n	80088d0 <_malloc_r+0xa8>
 80088f8:	4623      	mov	r3, r4
 80088fa:	6864      	ldr	r4, [r4, #4]
 80088fc:	e7ae      	b.n	800885c <_malloc_r+0x34>
 80088fe:	463c      	mov	r4, r7
 8008900:	687f      	ldr	r7, [r7, #4]
 8008902:	e7b6      	b.n	8008872 <_malloc_r+0x4a>
 8008904:	461a      	mov	r2, r3
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	42a3      	cmp	r3, r4
 800890a:	d1fb      	bne.n	8008904 <_malloc_r+0xdc>
 800890c:	2300      	movs	r3, #0
 800890e:	6053      	str	r3, [r2, #4]
 8008910:	e7de      	b.n	80088d0 <_malloc_r+0xa8>
 8008912:	230c      	movs	r3, #12
 8008914:	6033      	str	r3, [r6, #0]
 8008916:	4630      	mov	r0, r6
 8008918:	f000 f80c 	bl	8008934 <__malloc_unlock>
 800891c:	e794      	b.n	8008848 <_malloc_r+0x20>
 800891e:	6005      	str	r5, [r0, #0]
 8008920:	e7d6      	b.n	80088d0 <_malloc_r+0xa8>
 8008922:	bf00      	nop
 8008924:	200004b4 	.word	0x200004b4

08008928 <__malloc_lock>:
 8008928:	4801      	ldr	r0, [pc, #4]	@ (8008930 <__malloc_lock+0x8>)
 800892a:	f7ff b8b2 	b.w	8007a92 <__retarget_lock_acquire_recursive>
 800892e:	bf00      	nop
 8008930:	200004ac 	.word	0x200004ac

08008934 <__malloc_unlock>:
 8008934:	4801      	ldr	r0, [pc, #4]	@ (800893c <__malloc_unlock+0x8>)
 8008936:	f7ff b8ad 	b.w	8007a94 <__retarget_lock_release_recursive>
 800893a:	bf00      	nop
 800893c:	200004ac 	.word	0x200004ac

08008940 <_Balloc>:
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	69c6      	ldr	r6, [r0, #28]
 8008944:	4604      	mov	r4, r0
 8008946:	460d      	mov	r5, r1
 8008948:	b976      	cbnz	r6, 8008968 <_Balloc+0x28>
 800894a:	2010      	movs	r0, #16
 800894c:	f7ff ff42 	bl	80087d4 <malloc>
 8008950:	4602      	mov	r2, r0
 8008952:	61e0      	str	r0, [r4, #28]
 8008954:	b920      	cbnz	r0, 8008960 <_Balloc+0x20>
 8008956:	4b18      	ldr	r3, [pc, #96]	@ (80089b8 <_Balloc+0x78>)
 8008958:	4818      	ldr	r0, [pc, #96]	@ (80089bc <_Balloc+0x7c>)
 800895a:	216b      	movs	r1, #107	@ 0x6b
 800895c:	f001 fd7c 	bl	800a458 <__assert_func>
 8008960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008964:	6006      	str	r6, [r0, #0]
 8008966:	60c6      	str	r6, [r0, #12]
 8008968:	69e6      	ldr	r6, [r4, #28]
 800896a:	68f3      	ldr	r3, [r6, #12]
 800896c:	b183      	cbz	r3, 8008990 <_Balloc+0x50>
 800896e:	69e3      	ldr	r3, [r4, #28]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008976:	b9b8      	cbnz	r0, 80089a8 <_Balloc+0x68>
 8008978:	2101      	movs	r1, #1
 800897a:	fa01 f605 	lsl.w	r6, r1, r5
 800897e:	1d72      	adds	r2, r6, #5
 8008980:	0092      	lsls	r2, r2, #2
 8008982:	4620      	mov	r0, r4
 8008984:	f001 fd86 	bl	800a494 <_calloc_r>
 8008988:	b160      	cbz	r0, 80089a4 <_Balloc+0x64>
 800898a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800898e:	e00e      	b.n	80089ae <_Balloc+0x6e>
 8008990:	2221      	movs	r2, #33	@ 0x21
 8008992:	2104      	movs	r1, #4
 8008994:	4620      	mov	r0, r4
 8008996:	f001 fd7d 	bl	800a494 <_calloc_r>
 800899a:	69e3      	ldr	r3, [r4, #28]
 800899c:	60f0      	str	r0, [r6, #12]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1e4      	bne.n	800896e <_Balloc+0x2e>
 80089a4:	2000      	movs	r0, #0
 80089a6:	bd70      	pop	{r4, r5, r6, pc}
 80089a8:	6802      	ldr	r2, [r0, #0]
 80089aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089ae:	2300      	movs	r3, #0
 80089b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089b4:	e7f7      	b.n	80089a6 <_Balloc+0x66>
 80089b6:	bf00      	nop
 80089b8:	0800b23e 	.word	0x0800b23e
 80089bc:	0800b2be 	.word	0x0800b2be

080089c0 <_Bfree>:
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	69c6      	ldr	r6, [r0, #28]
 80089c4:	4605      	mov	r5, r0
 80089c6:	460c      	mov	r4, r1
 80089c8:	b976      	cbnz	r6, 80089e8 <_Bfree+0x28>
 80089ca:	2010      	movs	r0, #16
 80089cc:	f7ff ff02 	bl	80087d4 <malloc>
 80089d0:	4602      	mov	r2, r0
 80089d2:	61e8      	str	r0, [r5, #28]
 80089d4:	b920      	cbnz	r0, 80089e0 <_Bfree+0x20>
 80089d6:	4b09      	ldr	r3, [pc, #36]	@ (80089fc <_Bfree+0x3c>)
 80089d8:	4809      	ldr	r0, [pc, #36]	@ (8008a00 <_Bfree+0x40>)
 80089da:	218f      	movs	r1, #143	@ 0x8f
 80089dc:	f001 fd3c 	bl	800a458 <__assert_func>
 80089e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089e4:	6006      	str	r6, [r0, #0]
 80089e6:	60c6      	str	r6, [r0, #12]
 80089e8:	b13c      	cbz	r4, 80089fa <_Bfree+0x3a>
 80089ea:	69eb      	ldr	r3, [r5, #28]
 80089ec:	6862      	ldr	r2, [r4, #4]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089f4:	6021      	str	r1, [r4, #0]
 80089f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089fa:	bd70      	pop	{r4, r5, r6, pc}
 80089fc:	0800b23e 	.word	0x0800b23e
 8008a00:	0800b2be 	.word	0x0800b2be

08008a04 <__multadd>:
 8008a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a08:	690d      	ldr	r5, [r1, #16]
 8008a0a:	4607      	mov	r7, r0
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	461e      	mov	r6, r3
 8008a10:	f101 0c14 	add.w	ip, r1, #20
 8008a14:	2000      	movs	r0, #0
 8008a16:	f8dc 3000 	ldr.w	r3, [ip]
 8008a1a:	b299      	uxth	r1, r3
 8008a1c:	fb02 6101 	mla	r1, r2, r1, r6
 8008a20:	0c1e      	lsrs	r6, r3, #16
 8008a22:	0c0b      	lsrs	r3, r1, #16
 8008a24:	fb02 3306 	mla	r3, r2, r6, r3
 8008a28:	b289      	uxth	r1, r1
 8008a2a:	3001      	adds	r0, #1
 8008a2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a30:	4285      	cmp	r5, r0
 8008a32:	f84c 1b04 	str.w	r1, [ip], #4
 8008a36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a3a:	dcec      	bgt.n	8008a16 <__multadd+0x12>
 8008a3c:	b30e      	cbz	r6, 8008a82 <__multadd+0x7e>
 8008a3e:	68a3      	ldr	r3, [r4, #8]
 8008a40:	42ab      	cmp	r3, r5
 8008a42:	dc19      	bgt.n	8008a78 <__multadd+0x74>
 8008a44:	6861      	ldr	r1, [r4, #4]
 8008a46:	4638      	mov	r0, r7
 8008a48:	3101      	adds	r1, #1
 8008a4a:	f7ff ff79 	bl	8008940 <_Balloc>
 8008a4e:	4680      	mov	r8, r0
 8008a50:	b928      	cbnz	r0, 8008a5e <__multadd+0x5a>
 8008a52:	4602      	mov	r2, r0
 8008a54:	4b0c      	ldr	r3, [pc, #48]	@ (8008a88 <__multadd+0x84>)
 8008a56:	480d      	ldr	r0, [pc, #52]	@ (8008a8c <__multadd+0x88>)
 8008a58:	21ba      	movs	r1, #186	@ 0xba
 8008a5a:	f001 fcfd 	bl	800a458 <__assert_func>
 8008a5e:	6922      	ldr	r2, [r4, #16]
 8008a60:	3202      	adds	r2, #2
 8008a62:	f104 010c 	add.w	r1, r4, #12
 8008a66:	0092      	lsls	r2, r2, #2
 8008a68:	300c      	adds	r0, #12
 8008a6a:	f001 fcdf 	bl	800a42c <memcpy>
 8008a6e:	4621      	mov	r1, r4
 8008a70:	4638      	mov	r0, r7
 8008a72:	f7ff ffa5 	bl	80089c0 <_Bfree>
 8008a76:	4644      	mov	r4, r8
 8008a78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a7c:	3501      	adds	r5, #1
 8008a7e:	615e      	str	r6, [r3, #20]
 8008a80:	6125      	str	r5, [r4, #16]
 8008a82:	4620      	mov	r0, r4
 8008a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a88:	0800b2ad 	.word	0x0800b2ad
 8008a8c:	0800b2be 	.word	0x0800b2be

08008a90 <__s2b>:
 8008a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a94:	460c      	mov	r4, r1
 8008a96:	4615      	mov	r5, r2
 8008a98:	461f      	mov	r7, r3
 8008a9a:	2209      	movs	r2, #9
 8008a9c:	3308      	adds	r3, #8
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	db09      	blt.n	8008ac0 <__s2b+0x30>
 8008aac:	4630      	mov	r0, r6
 8008aae:	f7ff ff47 	bl	8008940 <_Balloc>
 8008ab2:	b940      	cbnz	r0, 8008ac6 <__s2b+0x36>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	4b19      	ldr	r3, [pc, #100]	@ (8008b1c <__s2b+0x8c>)
 8008ab8:	4819      	ldr	r0, [pc, #100]	@ (8008b20 <__s2b+0x90>)
 8008aba:	21d3      	movs	r1, #211	@ 0xd3
 8008abc:	f001 fccc 	bl	800a458 <__assert_func>
 8008ac0:	0052      	lsls	r2, r2, #1
 8008ac2:	3101      	adds	r1, #1
 8008ac4:	e7f0      	b.n	8008aa8 <__s2b+0x18>
 8008ac6:	9b08      	ldr	r3, [sp, #32]
 8008ac8:	6143      	str	r3, [r0, #20]
 8008aca:	2d09      	cmp	r5, #9
 8008acc:	f04f 0301 	mov.w	r3, #1
 8008ad0:	6103      	str	r3, [r0, #16]
 8008ad2:	dd16      	ble.n	8008b02 <__s2b+0x72>
 8008ad4:	f104 0909 	add.w	r9, r4, #9
 8008ad8:	46c8      	mov	r8, r9
 8008ada:	442c      	add	r4, r5
 8008adc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ae0:	4601      	mov	r1, r0
 8008ae2:	3b30      	subs	r3, #48	@ 0x30
 8008ae4:	220a      	movs	r2, #10
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	f7ff ff8c 	bl	8008a04 <__multadd>
 8008aec:	45a0      	cmp	r8, r4
 8008aee:	d1f5      	bne.n	8008adc <__s2b+0x4c>
 8008af0:	f1a5 0408 	sub.w	r4, r5, #8
 8008af4:	444c      	add	r4, r9
 8008af6:	1b2d      	subs	r5, r5, r4
 8008af8:	1963      	adds	r3, r4, r5
 8008afa:	42bb      	cmp	r3, r7
 8008afc:	db04      	blt.n	8008b08 <__s2b+0x78>
 8008afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b02:	340a      	adds	r4, #10
 8008b04:	2509      	movs	r5, #9
 8008b06:	e7f6      	b.n	8008af6 <__s2b+0x66>
 8008b08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b0c:	4601      	mov	r1, r0
 8008b0e:	3b30      	subs	r3, #48	@ 0x30
 8008b10:	220a      	movs	r2, #10
 8008b12:	4630      	mov	r0, r6
 8008b14:	f7ff ff76 	bl	8008a04 <__multadd>
 8008b18:	e7ee      	b.n	8008af8 <__s2b+0x68>
 8008b1a:	bf00      	nop
 8008b1c:	0800b2ad 	.word	0x0800b2ad
 8008b20:	0800b2be 	.word	0x0800b2be

08008b24 <__hi0bits>:
 8008b24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008b28:	4603      	mov	r3, r0
 8008b2a:	bf36      	itet	cc
 8008b2c:	0403      	lslcc	r3, r0, #16
 8008b2e:	2000      	movcs	r0, #0
 8008b30:	2010      	movcc	r0, #16
 8008b32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b36:	bf3c      	itt	cc
 8008b38:	021b      	lslcc	r3, r3, #8
 8008b3a:	3008      	addcc	r0, #8
 8008b3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b40:	bf3c      	itt	cc
 8008b42:	011b      	lslcc	r3, r3, #4
 8008b44:	3004      	addcc	r0, #4
 8008b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b4a:	bf3c      	itt	cc
 8008b4c:	009b      	lslcc	r3, r3, #2
 8008b4e:	3002      	addcc	r0, #2
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	db05      	blt.n	8008b60 <__hi0bits+0x3c>
 8008b54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008b58:	f100 0001 	add.w	r0, r0, #1
 8008b5c:	bf08      	it	eq
 8008b5e:	2020      	moveq	r0, #32
 8008b60:	4770      	bx	lr

08008b62 <__lo0bits>:
 8008b62:	6803      	ldr	r3, [r0, #0]
 8008b64:	4602      	mov	r2, r0
 8008b66:	f013 0007 	ands.w	r0, r3, #7
 8008b6a:	d00b      	beq.n	8008b84 <__lo0bits+0x22>
 8008b6c:	07d9      	lsls	r1, r3, #31
 8008b6e:	d421      	bmi.n	8008bb4 <__lo0bits+0x52>
 8008b70:	0798      	lsls	r0, r3, #30
 8008b72:	bf49      	itett	mi
 8008b74:	085b      	lsrmi	r3, r3, #1
 8008b76:	089b      	lsrpl	r3, r3, #2
 8008b78:	2001      	movmi	r0, #1
 8008b7a:	6013      	strmi	r3, [r2, #0]
 8008b7c:	bf5c      	itt	pl
 8008b7e:	6013      	strpl	r3, [r2, #0]
 8008b80:	2002      	movpl	r0, #2
 8008b82:	4770      	bx	lr
 8008b84:	b299      	uxth	r1, r3
 8008b86:	b909      	cbnz	r1, 8008b8c <__lo0bits+0x2a>
 8008b88:	0c1b      	lsrs	r3, r3, #16
 8008b8a:	2010      	movs	r0, #16
 8008b8c:	b2d9      	uxtb	r1, r3
 8008b8e:	b909      	cbnz	r1, 8008b94 <__lo0bits+0x32>
 8008b90:	3008      	adds	r0, #8
 8008b92:	0a1b      	lsrs	r3, r3, #8
 8008b94:	0719      	lsls	r1, r3, #28
 8008b96:	bf04      	itt	eq
 8008b98:	091b      	lsreq	r3, r3, #4
 8008b9a:	3004      	addeq	r0, #4
 8008b9c:	0799      	lsls	r1, r3, #30
 8008b9e:	bf04      	itt	eq
 8008ba0:	089b      	lsreq	r3, r3, #2
 8008ba2:	3002      	addeq	r0, #2
 8008ba4:	07d9      	lsls	r1, r3, #31
 8008ba6:	d403      	bmi.n	8008bb0 <__lo0bits+0x4e>
 8008ba8:	085b      	lsrs	r3, r3, #1
 8008baa:	f100 0001 	add.w	r0, r0, #1
 8008bae:	d003      	beq.n	8008bb8 <__lo0bits+0x56>
 8008bb0:	6013      	str	r3, [r2, #0]
 8008bb2:	4770      	bx	lr
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	4770      	bx	lr
 8008bb8:	2020      	movs	r0, #32
 8008bba:	4770      	bx	lr

08008bbc <__i2b>:
 8008bbc:	b510      	push	{r4, lr}
 8008bbe:	460c      	mov	r4, r1
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	f7ff febd 	bl	8008940 <_Balloc>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	b928      	cbnz	r0, 8008bd6 <__i2b+0x1a>
 8008bca:	4b05      	ldr	r3, [pc, #20]	@ (8008be0 <__i2b+0x24>)
 8008bcc:	4805      	ldr	r0, [pc, #20]	@ (8008be4 <__i2b+0x28>)
 8008bce:	f240 1145 	movw	r1, #325	@ 0x145
 8008bd2:	f001 fc41 	bl	800a458 <__assert_func>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	6144      	str	r4, [r0, #20]
 8008bda:	6103      	str	r3, [r0, #16]
 8008bdc:	bd10      	pop	{r4, pc}
 8008bde:	bf00      	nop
 8008be0:	0800b2ad 	.word	0x0800b2ad
 8008be4:	0800b2be 	.word	0x0800b2be

08008be8 <__multiply>:
 8008be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	4614      	mov	r4, r2
 8008bee:	690a      	ldr	r2, [r1, #16]
 8008bf0:	6923      	ldr	r3, [r4, #16]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	bfa8      	it	ge
 8008bf6:	4623      	movge	r3, r4
 8008bf8:	460f      	mov	r7, r1
 8008bfa:	bfa4      	itt	ge
 8008bfc:	460c      	movge	r4, r1
 8008bfe:	461f      	movge	r7, r3
 8008c00:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008c04:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008c08:	68a3      	ldr	r3, [r4, #8]
 8008c0a:	6861      	ldr	r1, [r4, #4]
 8008c0c:	eb0a 0609 	add.w	r6, sl, r9
 8008c10:	42b3      	cmp	r3, r6
 8008c12:	b085      	sub	sp, #20
 8008c14:	bfb8      	it	lt
 8008c16:	3101      	addlt	r1, #1
 8008c18:	f7ff fe92 	bl	8008940 <_Balloc>
 8008c1c:	b930      	cbnz	r0, 8008c2c <__multiply+0x44>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	4b44      	ldr	r3, [pc, #272]	@ (8008d34 <__multiply+0x14c>)
 8008c22:	4845      	ldr	r0, [pc, #276]	@ (8008d38 <__multiply+0x150>)
 8008c24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008c28:	f001 fc16 	bl	800a458 <__assert_func>
 8008c2c:	f100 0514 	add.w	r5, r0, #20
 8008c30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c34:	462b      	mov	r3, r5
 8008c36:	2200      	movs	r2, #0
 8008c38:	4543      	cmp	r3, r8
 8008c3a:	d321      	bcc.n	8008c80 <__multiply+0x98>
 8008c3c:	f107 0114 	add.w	r1, r7, #20
 8008c40:	f104 0214 	add.w	r2, r4, #20
 8008c44:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008c48:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008c4c:	9302      	str	r3, [sp, #8]
 8008c4e:	1b13      	subs	r3, r2, r4
 8008c50:	3b15      	subs	r3, #21
 8008c52:	f023 0303 	bic.w	r3, r3, #3
 8008c56:	3304      	adds	r3, #4
 8008c58:	f104 0715 	add.w	r7, r4, #21
 8008c5c:	42ba      	cmp	r2, r7
 8008c5e:	bf38      	it	cc
 8008c60:	2304      	movcc	r3, #4
 8008c62:	9301      	str	r3, [sp, #4]
 8008c64:	9b02      	ldr	r3, [sp, #8]
 8008c66:	9103      	str	r1, [sp, #12]
 8008c68:	428b      	cmp	r3, r1
 8008c6a:	d80c      	bhi.n	8008c86 <__multiply+0x9e>
 8008c6c:	2e00      	cmp	r6, #0
 8008c6e:	dd03      	ble.n	8008c78 <__multiply+0x90>
 8008c70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d05b      	beq.n	8008d30 <__multiply+0x148>
 8008c78:	6106      	str	r6, [r0, #16]
 8008c7a:	b005      	add	sp, #20
 8008c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c80:	f843 2b04 	str.w	r2, [r3], #4
 8008c84:	e7d8      	b.n	8008c38 <__multiply+0x50>
 8008c86:	f8b1 a000 	ldrh.w	sl, [r1]
 8008c8a:	f1ba 0f00 	cmp.w	sl, #0
 8008c8e:	d024      	beq.n	8008cda <__multiply+0xf2>
 8008c90:	f104 0e14 	add.w	lr, r4, #20
 8008c94:	46a9      	mov	r9, r5
 8008c96:	f04f 0c00 	mov.w	ip, #0
 8008c9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c9e:	f8d9 3000 	ldr.w	r3, [r9]
 8008ca2:	fa1f fb87 	uxth.w	fp, r7
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	fb0a 330b 	mla	r3, sl, fp, r3
 8008cac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008cb0:	f8d9 7000 	ldr.w	r7, [r9]
 8008cb4:	4463      	add	r3, ip
 8008cb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008cba:	fb0a c70b 	mla	r7, sl, fp, ip
 8008cbe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008cc8:	4572      	cmp	r2, lr
 8008cca:	f849 3b04 	str.w	r3, [r9], #4
 8008cce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008cd2:	d8e2      	bhi.n	8008c9a <__multiply+0xb2>
 8008cd4:	9b01      	ldr	r3, [sp, #4]
 8008cd6:	f845 c003 	str.w	ip, [r5, r3]
 8008cda:	9b03      	ldr	r3, [sp, #12]
 8008cdc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008ce0:	3104      	adds	r1, #4
 8008ce2:	f1b9 0f00 	cmp.w	r9, #0
 8008ce6:	d021      	beq.n	8008d2c <__multiply+0x144>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	f104 0c14 	add.w	ip, r4, #20
 8008cee:	46ae      	mov	lr, r5
 8008cf0:	f04f 0a00 	mov.w	sl, #0
 8008cf4:	f8bc b000 	ldrh.w	fp, [ip]
 8008cf8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008cfc:	fb09 770b 	mla	r7, r9, fp, r7
 8008d00:	4457      	add	r7, sl
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d08:	f84e 3b04 	str.w	r3, [lr], #4
 8008d0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d14:	f8be 3000 	ldrh.w	r3, [lr]
 8008d18:	fb09 330a 	mla	r3, r9, sl, r3
 8008d1c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008d20:	4562      	cmp	r2, ip
 8008d22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d26:	d8e5      	bhi.n	8008cf4 <__multiply+0x10c>
 8008d28:	9f01      	ldr	r7, [sp, #4]
 8008d2a:	51eb      	str	r3, [r5, r7]
 8008d2c:	3504      	adds	r5, #4
 8008d2e:	e799      	b.n	8008c64 <__multiply+0x7c>
 8008d30:	3e01      	subs	r6, #1
 8008d32:	e79b      	b.n	8008c6c <__multiply+0x84>
 8008d34:	0800b2ad 	.word	0x0800b2ad
 8008d38:	0800b2be 	.word	0x0800b2be

08008d3c <__pow5mult>:
 8008d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d40:	4615      	mov	r5, r2
 8008d42:	f012 0203 	ands.w	r2, r2, #3
 8008d46:	4607      	mov	r7, r0
 8008d48:	460e      	mov	r6, r1
 8008d4a:	d007      	beq.n	8008d5c <__pow5mult+0x20>
 8008d4c:	4c25      	ldr	r4, [pc, #148]	@ (8008de4 <__pow5mult+0xa8>)
 8008d4e:	3a01      	subs	r2, #1
 8008d50:	2300      	movs	r3, #0
 8008d52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d56:	f7ff fe55 	bl	8008a04 <__multadd>
 8008d5a:	4606      	mov	r6, r0
 8008d5c:	10ad      	asrs	r5, r5, #2
 8008d5e:	d03d      	beq.n	8008ddc <__pow5mult+0xa0>
 8008d60:	69fc      	ldr	r4, [r7, #28]
 8008d62:	b97c      	cbnz	r4, 8008d84 <__pow5mult+0x48>
 8008d64:	2010      	movs	r0, #16
 8008d66:	f7ff fd35 	bl	80087d4 <malloc>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	61f8      	str	r0, [r7, #28]
 8008d6e:	b928      	cbnz	r0, 8008d7c <__pow5mult+0x40>
 8008d70:	4b1d      	ldr	r3, [pc, #116]	@ (8008de8 <__pow5mult+0xac>)
 8008d72:	481e      	ldr	r0, [pc, #120]	@ (8008dec <__pow5mult+0xb0>)
 8008d74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008d78:	f001 fb6e 	bl	800a458 <__assert_func>
 8008d7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d80:	6004      	str	r4, [r0, #0]
 8008d82:	60c4      	str	r4, [r0, #12]
 8008d84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008d88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d8c:	b94c      	cbnz	r4, 8008da2 <__pow5mult+0x66>
 8008d8e:	f240 2171 	movw	r1, #625	@ 0x271
 8008d92:	4638      	mov	r0, r7
 8008d94:	f7ff ff12 	bl	8008bbc <__i2b>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d9e:	4604      	mov	r4, r0
 8008da0:	6003      	str	r3, [r0, #0]
 8008da2:	f04f 0900 	mov.w	r9, #0
 8008da6:	07eb      	lsls	r3, r5, #31
 8008da8:	d50a      	bpl.n	8008dc0 <__pow5mult+0x84>
 8008daa:	4631      	mov	r1, r6
 8008dac:	4622      	mov	r2, r4
 8008dae:	4638      	mov	r0, r7
 8008db0:	f7ff ff1a 	bl	8008be8 <__multiply>
 8008db4:	4631      	mov	r1, r6
 8008db6:	4680      	mov	r8, r0
 8008db8:	4638      	mov	r0, r7
 8008dba:	f7ff fe01 	bl	80089c0 <_Bfree>
 8008dbe:	4646      	mov	r6, r8
 8008dc0:	106d      	asrs	r5, r5, #1
 8008dc2:	d00b      	beq.n	8008ddc <__pow5mult+0xa0>
 8008dc4:	6820      	ldr	r0, [r4, #0]
 8008dc6:	b938      	cbnz	r0, 8008dd8 <__pow5mult+0x9c>
 8008dc8:	4622      	mov	r2, r4
 8008dca:	4621      	mov	r1, r4
 8008dcc:	4638      	mov	r0, r7
 8008dce:	f7ff ff0b 	bl	8008be8 <__multiply>
 8008dd2:	6020      	str	r0, [r4, #0]
 8008dd4:	f8c0 9000 	str.w	r9, [r0]
 8008dd8:	4604      	mov	r4, r0
 8008dda:	e7e4      	b.n	8008da6 <__pow5mult+0x6a>
 8008ddc:	4630      	mov	r0, r6
 8008dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008de2:	bf00      	nop
 8008de4:	0800b318 	.word	0x0800b318
 8008de8:	0800b23e 	.word	0x0800b23e
 8008dec:	0800b2be 	.word	0x0800b2be

08008df0 <__lshift>:
 8008df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df4:	460c      	mov	r4, r1
 8008df6:	6849      	ldr	r1, [r1, #4]
 8008df8:	6923      	ldr	r3, [r4, #16]
 8008dfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008dfe:	68a3      	ldr	r3, [r4, #8]
 8008e00:	4607      	mov	r7, r0
 8008e02:	4691      	mov	r9, r2
 8008e04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e08:	f108 0601 	add.w	r6, r8, #1
 8008e0c:	42b3      	cmp	r3, r6
 8008e0e:	db0b      	blt.n	8008e28 <__lshift+0x38>
 8008e10:	4638      	mov	r0, r7
 8008e12:	f7ff fd95 	bl	8008940 <_Balloc>
 8008e16:	4605      	mov	r5, r0
 8008e18:	b948      	cbnz	r0, 8008e2e <__lshift+0x3e>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	4b28      	ldr	r3, [pc, #160]	@ (8008ec0 <__lshift+0xd0>)
 8008e1e:	4829      	ldr	r0, [pc, #164]	@ (8008ec4 <__lshift+0xd4>)
 8008e20:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008e24:	f001 fb18 	bl	800a458 <__assert_func>
 8008e28:	3101      	adds	r1, #1
 8008e2a:	005b      	lsls	r3, r3, #1
 8008e2c:	e7ee      	b.n	8008e0c <__lshift+0x1c>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f100 0114 	add.w	r1, r0, #20
 8008e34:	f100 0210 	add.w	r2, r0, #16
 8008e38:	4618      	mov	r0, r3
 8008e3a:	4553      	cmp	r3, sl
 8008e3c:	db33      	blt.n	8008ea6 <__lshift+0xb6>
 8008e3e:	6920      	ldr	r0, [r4, #16]
 8008e40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e44:	f104 0314 	add.w	r3, r4, #20
 8008e48:	f019 091f 	ands.w	r9, r9, #31
 8008e4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e54:	d02b      	beq.n	8008eae <__lshift+0xbe>
 8008e56:	f1c9 0e20 	rsb	lr, r9, #32
 8008e5a:	468a      	mov	sl, r1
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	6818      	ldr	r0, [r3, #0]
 8008e60:	fa00 f009 	lsl.w	r0, r0, r9
 8008e64:	4310      	orrs	r0, r2
 8008e66:	f84a 0b04 	str.w	r0, [sl], #4
 8008e6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e6e:	459c      	cmp	ip, r3
 8008e70:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e74:	d8f3      	bhi.n	8008e5e <__lshift+0x6e>
 8008e76:	ebac 0304 	sub.w	r3, ip, r4
 8008e7a:	3b15      	subs	r3, #21
 8008e7c:	f023 0303 	bic.w	r3, r3, #3
 8008e80:	3304      	adds	r3, #4
 8008e82:	f104 0015 	add.w	r0, r4, #21
 8008e86:	4584      	cmp	ip, r0
 8008e88:	bf38      	it	cc
 8008e8a:	2304      	movcc	r3, #4
 8008e8c:	50ca      	str	r2, [r1, r3]
 8008e8e:	b10a      	cbz	r2, 8008e94 <__lshift+0xa4>
 8008e90:	f108 0602 	add.w	r6, r8, #2
 8008e94:	3e01      	subs	r6, #1
 8008e96:	4638      	mov	r0, r7
 8008e98:	612e      	str	r6, [r5, #16]
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	f7ff fd90 	bl	80089c0 <_Bfree>
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008eaa:	3301      	adds	r3, #1
 8008eac:	e7c5      	b.n	8008e3a <__lshift+0x4a>
 8008eae:	3904      	subs	r1, #4
 8008eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008eb8:	459c      	cmp	ip, r3
 8008eba:	d8f9      	bhi.n	8008eb0 <__lshift+0xc0>
 8008ebc:	e7ea      	b.n	8008e94 <__lshift+0xa4>
 8008ebe:	bf00      	nop
 8008ec0:	0800b2ad 	.word	0x0800b2ad
 8008ec4:	0800b2be 	.word	0x0800b2be

08008ec8 <__mcmp>:
 8008ec8:	690a      	ldr	r2, [r1, #16]
 8008eca:	4603      	mov	r3, r0
 8008ecc:	6900      	ldr	r0, [r0, #16]
 8008ece:	1a80      	subs	r0, r0, r2
 8008ed0:	b530      	push	{r4, r5, lr}
 8008ed2:	d10e      	bne.n	8008ef2 <__mcmp+0x2a>
 8008ed4:	3314      	adds	r3, #20
 8008ed6:	3114      	adds	r1, #20
 8008ed8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008edc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ee0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ee4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ee8:	4295      	cmp	r5, r2
 8008eea:	d003      	beq.n	8008ef4 <__mcmp+0x2c>
 8008eec:	d205      	bcs.n	8008efa <__mcmp+0x32>
 8008eee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ef2:	bd30      	pop	{r4, r5, pc}
 8008ef4:	42a3      	cmp	r3, r4
 8008ef6:	d3f3      	bcc.n	8008ee0 <__mcmp+0x18>
 8008ef8:	e7fb      	b.n	8008ef2 <__mcmp+0x2a>
 8008efa:	2001      	movs	r0, #1
 8008efc:	e7f9      	b.n	8008ef2 <__mcmp+0x2a>
	...

08008f00 <__mdiff>:
 8008f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f04:	4689      	mov	r9, r1
 8008f06:	4606      	mov	r6, r0
 8008f08:	4611      	mov	r1, r2
 8008f0a:	4648      	mov	r0, r9
 8008f0c:	4614      	mov	r4, r2
 8008f0e:	f7ff ffdb 	bl	8008ec8 <__mcmp>
 8008f12:	1e05      	subs	r5, r0, #0
 8008f14:	d112      	bne.n	8008f3c <__mdiff+0x3c>
 8008f16:	4629      	mov	r1, r5
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f7ff fd11 	bl	8008940 <_Balloc>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	b928      	cbnz	r0, 8008f2e <__mdiff+0x2e>
 8008f22:	4b3f      	ldr	r3, [pc, #252]	@ (8009020 <__mdiff+0x120>)
 8008f24:	f240 2137 	movw	r1, #567	@ 0x237
 8008f28:	483e      	ldr	r0, [pc, #248]	@ (8009024 <__mdiff+0x124>)
 8008f2a:	f001 fa95 	bl	800a458 <__assert_func>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f34:	4610      	mov	r0, r2
 8008f36:	b003      	add	sp, #12
 8008f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f3c:	bfbc      	itt	lt
 8008f3e:	464b      	movlt	r3, r9
 8008f40:	46a1      	movlt	r9, r4
 8008f42:	4630      	mov	r0, r6
 8008f44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008f48:	bfba      	itte	lt
 8008f4a:	461c      	movlt	r4, r3
 8008f4c:	2501      	movlt	r5, #1
 8008f4e:	2500      	movge	r5, #0
 8008f50:	f7ff fcf6 	bl	8008940 <_Balloc>
 8008f54:	4602      	mov	r2, r0
 8008f56:	b918      	cbnz	r0, 8008f60 <__mdiff+0x60>
 8008f58:	4b31      	ldr	r3, [pc, #196]	@ (8009020 <__mdiff+0x120>)
 8008f5a:	f240 2145 	movw	r1, #581	@ 0x245
 8008f5e:	e7e3      	b.n	8008f28 <__mdiff+0x28>
 8008f60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008f64:	6926      	ldr	r6, [r4, #16]
 8008f66:	60c5      	str	r5, [r0, #12]
 8008f68:	f109 0310 	add.w	r3, r9, #16
 8008f6c:	f109 0514 	add.w	r5, r9, #20
 8008f70:	f104 0e14 	add.w	lr, r4, #20
 8008f74:	f100 0b14 	add.w	fp, r0, #20
 8008f78:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008f7c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008f80:	9301      	str	r3, [sp, #4]
 8008f82:	46d9      	mov	r9, fp
 8008f84:	f04f 0c00 	mov.w	ip, #0
 8008f88:	9b01      	ldr	r3, [sp, #4]
 8008f8a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008f8e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008f92:	9301      	str	r3, [sp, #4]
 8008f94:	fa1f f38a 	uxth.w	r3, sl
 8008f98:	4619      	mov	r1, r3
 8008f9a:	b283      	uxth	r3, r0
 8008f9c:	1acb      	subs	r3, r1, r3
 8008f9e:	0c00      	lsrs	r0, r0, #16
 8008fa0:	4463      	add	r3, ip
 8008fa2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008fa6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008fb0:	4576      	cmp	r6, lr
 8008fb2:	f849 3b04 	str.w	r3, [r9], #4
 8008fb6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008fba:	d8e5      	bhi.n	8008f88 <__mdiff+0x88>
 8008fbc:	1b33      	subs	r3, r6, r4
 8008fbe:	3b15      	subs	r3, #21
 8008fc0:	f023 0303 	bic.w	r3, r3, #3
 8008fc4:	3415      	adds	r4, #21
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	42a6      	cmp	r6, r4
 8008fca:	bf38      	it	cc
 8008fcc:	2304      	movcc	r3, #4
 8008fce:	441d      	add	r5, r3
 8008fd0:	445b      	add	r3, fp
 8008fd2:	461e      	mov	r6, r3
 8008fd4:	462c      	mov	r4, r5
 8008fd6:	4544      	cmp	r4, r8
 8008fd8:	d30e      	bcc.n	8008ff8 <__mdiff+0xf8>
 8008fda:	f108 0103 	add.w	r1, r8, #3
 8008fde:	1b49      	subs	r1, r1, r5
 8008fe0:	f021 0103 	bic.w	r1, r1, #3
 8008fe4:	3d03      	subs	r5, #3
 8008fe6:	45a8      	cmp	r8, r5
 8008fe8:	bf38      	it	cc
 8008fea:	2100      	movcc	r1, #0
 8008fec:	440b      	add	r3, r1
 8008fee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ff2:	b191      	cbz	r1, 800901a <__mdiff+0x11a>
 8008ff4:	6117      	str	r7, [r2, #16]
 8008ff6:	e79d      	b.n	8008f34 <__mdiff+0x34>
 8008ff8:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ffc:	46e6      	mov	lr, ip
 8008ffe:	0c08      	lsrs	r0, r1, #16
 8009000:	fa1c fc81 	uxtah	ip, ip, r1
 8009004:	4471      	add	r1, lr
 8009006:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800900a:	b289      	uxth	r1, r1
 800900c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009010:	f846 1b04 	str.w	r1, [r6], #4
 8009014:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009018:	e7dd      	b.n	8008fd6 <__mdiff+0xd6>
 800901a:	3f01      	subs	r7, #1
 800901c:	e7e7      	b.n	8008fee <__mdiff+0xee>
 800901e:	bf00      	nop
 8009020:	0800b2ad 	.word	0x0800b2ad
 8009024:	0800b2be 	.word	0x0800b2be

08009028 <__ulp>:
 8009028:	b082      	sub	sp, #8
 800902a:	ed8d 0b00 	vstr	d0, [sp]
 800902e:	9a01      	ldr	r2, [sp, #4]
 8009030:	4b0f      	ldr	r3, [pc, #60]	@ (8009070 <__ulp+0x48>)
 8009032:	4013      	ands	r3, r2
 8009034:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009038:	2b00      	cmp	r3, #0
 800903a:	dc08      	bgt.n	800904e <__ulp+0x26>
 800903c:	425b      	negs	r3, r3
 800903e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009042:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009046:	da04      	bge.n	8009052 <__ulp+0x2a>
 8009048:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800904c:	4113      	asrs	r3, r2
 800904e:	2200      	movs	r2, #0
 8009050:	e008      	b.n	8009064 <__ulp+0x3c>
 8009052:	f1a2 0314 	sub.w	r3, r2, #20
 8009056:	2b1e      	cmp	r3, #30
 8009058:	bfda      	itte	le
 800905a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800905e:	40da      	lsrle	r2, r3
 8009060:	2201      	movgt	r2, #1
 8009062:	2300      	movs	r3, #0
 8009064:	4619      	mov	r1, r3
 8009066:	4610      	mov	r0, r2
 8009068:	ec41 0b10 	vmov	d0, r0, r1
 800906c:	b002      	add	sp, #8
 800906e:	4770      	bx	lr
 8009070:	7ff00000 	.word	0x7ff00000

08009074 <__b2d>:
 8009074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009078:	6906      	ldr	r6, [r0, #16]
 800907a:	f100 0814 	add.w	r8, r0, #20
 800907e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009082:	1f37      	subs	r7, r6, #4
 8009084:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009088:	4610      	mov	r0, r2
 800908a:	f7ff fd4b 	bl	8008b24 <__hi0bits>
 800908e:	f1c0 0320 	rsb	r3, r0, #32
 8009092:	280a      	cmp	r0, #10
 8009094:	600b      	str	r3, [r1, #0]
 8009096:	491b      	ldr	r1, [pc, #108]	@ (8009104 <__b2d+0x90>)
 8009098:	dc15      	bgt.n	80090c6 <__b2d+0x52>
 800909a:	f1c0 0c0b 	rsb	ip, r0, #11
 800909e:	fa22 f30c 	lsr.w	r3, r2, ip
 80090a2:	45b8      	cmp	r8, r7
 80090a4:	ea43 0501 	orr.w	r5, r3, r1
 80090a8:	bf34      	ite	cc
 80090aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80090ae:	2300      	movcs	r3, #0
 80090b0:	3015      	adds	r0, #21
 80090b2:	fa02 f000 	lsl.w	r0, r2, r0
 80090b6:	fa23 f30c 	lsr.w	r3, r3, ip
 80090ba:	4303      	orrs	r3, r0
 80090bc:	461c      	mov	r4, r3
 80090be:	ec45 4b10 	vmov	d0, r4, r5
 80090c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090c6:	45b8      	cmp	r8, r7
 80090c8:	bf3a      	itte	cc
 80090ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80090ce:	f1a6 0708 	subcc.w	r7, r6, #8
 80090d2:	2300      	movcs	r3, #0
 80090d4:	380b      	subs	r0, #11
 80090d6:	d012      	beq.n	80090fe <__b2d+0x8a>
 80090d8:	f1c0 0120 	rsb	r1, r0, #32
 80090dc:	fa23 f401 	lsr.w	r4, r3, r1
 80090e0:	4082      	lsls	r2, r0
 80090e2:	4322      	orrs	r2, r4
 80090e4:	4547      	cmp	r7, r8
 80090e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80090ea:	bf8c      	ite	hi
 80090ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80090f0:	2200      	movls	r2, #0
 80090f2:	4083      	lsls	r3, r0
 80090f4:	40ca      	lsrs	r2, r1
 80090f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80090fa:	4313      	orrs	r3, r2
 80090fc:	e7de      	b.n	80090bc <__b2d+0x48>
 80090fe:	ea42 0501 	orr.w	r5, r2, r1
 8009102:	e7db      	b.n	80090bc <__b2d+0x48>
 8009104:	3ff00000 	.word	0x3ff00000

08009108 <__d2b>:
 8009108:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800910c:	460f      	mov	r7, r1
 800910e:	2101      	movs	r1, #1
 8009110:	ec59 8b10 	vmov	r8, r9, d0
 8009114:	4616      	mov	r6, r2
 8009116:	f7ff fc13 	bl	8008940 <_Balloc>
 800911a:	4604      	mov	r4, r0
 800911c:	b930      	cbnz	r0, 800912c <__d2b+0x24>
 800911e:	4602      	mov	r2, r0
 8009120:	4b23      	ldr	r3, [pc, #140]	@ (80091b0 <__d2b+0xa8>)
 8009122:	4824      	ldr	r0, [pc, #144]	@ (80091b4 <__d2b+0xac>)
 8009124:	f240 310f 	movw	r1, #783	@ 0x30f
 8009128:	f001 f996 	bl	800a458 <__assert_func>
 800912c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009130:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009134:	b10d      	cbz	r5, 800913a <__d2b+0x32>
 8009136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800913a:	9301      	str	r3, [sp, #4]
 800913c:	f1b8 0300 	subs.w	r3, r8, #0
 8009140:	d023      	beq.n	800918a <__d2b+0x82>
 8009142:	4668      	mov	r0, sp
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	f7ff fd0c 	bl	8008b62 <__lo0bits>
 800914a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800914e:	b1d0      	cbz	r0, 8009186 <__d2b+0x7e>
 8009150:	f1c0 0320 	rsb	r3, r0, #32
 8009154:	fa02 f303 	lsl.w	r3, r2, r3
 8009158:	430b      	orrs	r3, r1
 800915a:	40c2      	lsrs	r2, r0
 800915c:	6163      	str	r3, [r4, #20]
 800915e:	9201      	str	r2, [sp, #4]
 8009160:	9b01      	ldr	r3, [sp, #4]
 8009162:	61a3      	str	r3, [r4, #24]
 8009164:	2b00      	cmp	r3, #0
 8009166:	bf0c      	ite	eq
 8009168:	2201      	moveq	r2, #1
 800916a:	2202      	movne	r2, #2
 800916c:	6122      	str	r2, [r4, #16]
 800916e:	b1a5      	cbz	r5, 800919a <__d2b+0x92>
 8009170:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009174:	4405      	add	r5, r0
 8009176:	603d      	str	r5, [r7, #0]
 8009178:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800917c:	6030      	str	r0, [r6, #0]
 800917e:	4620      	mov	r0, r4
 8009180:	b003      	add	sp, #12
 8009182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009186:	6161      	str	r1, [r4, #20]
 8009188:	e7ea      	b.n	8009160 <__d2b+0x58>
 800918a:	a801      	add	r0, sp, #4
 800918c:	f7ff fce9 	bl	8008b62 <__lo0bits>
 8009190:	9b01      	ldr	r3, [sp, #4]
 8009192:	6163      	str	r3, [r4, #20]
 8009194:	3020      	adds	r0, #32
 8009196:	2201      	movs	r2, #1
 8009198:	e7e8      	b.n	800916c <__d2b+0x64>
 800919a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800919e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80091a2:	6038      	str	r0, [r7, #0]
 80091a4:	6918      	ldr	r0, [r3, #16]
 80091a6:	f7ff fcbd 	bl	8008b24 <__hi0bits>
 80091aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80091ae:	e7e5      	b.n	800917c <__d2b+0x74>
 80091b0:	0800b2ad 	.word	0x0800b2ad
 80091b4:	0800b2be 	.word	0x0800b2be

080091b8 <__ratio>:
 80091b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091bc:	b085      	sub	sp, #20
 80091be:	e9cd 1000 	strd	r1, r0, [sp]
 80091c2:	a902      	add	r1, sp, #8
 80091c4:	f7ff ff56 	bl	8009074 <__b2d>
 80091c8:	9800      	ldr	r0, [sp, #0]
 80091ca:	a903      	add	r1, sp, #12
 80091cc:	ec55 4b10 	vmov	r4, r5, d0
 80091d0:	f7ff ff50 	bl	8009074 <__b2d>
 80091d4:	9b01      	ldr	r3, [sp, #4]
 80091d6:	6919      	ldr	r1, [r3, #16]
 80091d8:	9b00      	ldr	r3, [sp, #0]
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	1ac9      	subs	r1, r1, r3
 80091de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80091e2:	1a9b      	subs	r3, r3, r2
 80091e4:	ec5b ab10 	vmov	sl, fp, d0
 80091e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	bfce      	itee	gt
 80091f0:	462a      	movgt	r2, r5
 80091f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80091f6:	465a      	movle	r2, fp
 80091f8:	462f      	mov	r7, r5
 80091fa:	46d9      	mov	r9, fp
 80091fc:	bfcc      	ite	gt
 80091fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009202:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009206:	464b      	mov	r3, r9
 8009208:	4652      	mov	r2, sl
 800920a:	4620      	mov	r0, r4
 800920c:	4639      	mov	r1, r7
 800920e:	f7f7 fb45 	bl	800089c <__aeabi_ddiv>
 8009212:	ec41 0b10 	vmov	d0, r0, r1
 8009216:	b005      	add	sp, #20
 8009218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800921c <__copybits>:
 800921c:	3901      	subs	r1, #1
 800921e:	b570      	push	{r4, r5, r6, lr}
 8009220:	1149      	asrs	r1, r1, #5
 8009222:	6914      	ldr	r4, [r2, #16]
 8009224:	3101      	adds	r1, #1
 8009226:	f102 0314 	add.w	r3, r2, #20
 800922a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800922e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009232:	1f05      	subs	r5, r0, #4
 8009234:	42a3      	cmp	r3, r4
 8009236:	d30c      	bcc.n	8009252 <__copybits+0x36>
 8009238:	1aa3      	subs	r3, r4, r2
 800923a:	3b11      	subs	r3, #17
 800923c:	f023 0303 	bic.w	r3, r3, #3
 8009240:	3211      	adds	r2, #17
 8009242:	42a2      	cmp	r2, r4
 8009244:	bf88      	it	hi
 8009246:	2300      	movhi	r3, #0
 8009248:	4418      	add	r0, r3
 800924a:	2300      	movs	r3, #0
 800924c:	4288      	cmp	r0, r1
 800924e:	d305      	bcc.n	800925c <__copybits+0x40>
 8009250:	bd70      	pop	{r4, r5, r6, pc}
 8009252:	f853 6b04 	ldr.w	r6, [r3], #4
 8009256:	f845 6f04 	str.w	r6, [r5, #4]!
 800925a:	e7eb      	b.n	8009234 <__copybits+0x18>
 800925c:	f840 3b04 	str.w	r3, [r0], #4
 8009260:	e7f4      	b.n	800924c <__copybits+0x30>

08009262 <__any_on>:
 8009262:	f100 0214 	add.w	r2, r0, #20
 8009266:	6900      	ldr	r0, [r0, #16]
 8009268:	114b      	asrs	r3, r1, #5
 800926a:	4298      	cmp	r0, r3
 800926c:	b510      	push	{r4, lr}
 800926e:	db11      	blt.n	8009294 <__any_on+0x32>
 8009270:	dd0a      	ble.n	8009288 <__any_on+0x26>
 8009272:	f011 011f 	ands.w	r1, r1, #31
 8009276:	d007      	beq.n	8009288 <__any_on+0x26>
 8009278:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800927c:	fa24 f001 	lsr.w	r0, r4, r1
 8009280:	fa00 f101 	lsl.w	r1, r0, r1
 8009284:	428c      	cmp	r4, r1
 8009286:	d10b      	bne.n	80092a0 <__any_on+0x3e>
 8009288:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800928c:	4293      	cmp	r3, r2
 800928e:	d803      	bhi.n	8009298 <__any_on+0x36>
 8009290:	2000      	movs	r0, #0
 8009292:	bd10      	pop	{r4, pc}
 8009294:	4603      	mov	r3, r0
 8009296:	e7f7      	b.n	8009288 <__any_on+0x26>
 8009298:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800929c:	2900      	cmp	r1, #0
 800929e:	d0f5      	beq.n	800928c <__any_on+0x2a>
 80092a0:	2001      	movs	r0, #1
 80092a2:	e7f6      	b.n	8009292 <__any_on+0x30>

080092a4 <sulp>:
 80092a4:	b570      	push	{r4, r5, r6, lr}
 80092a6:	4604      	mov	r4, r0
 80092a8:	460d      	mov	r5, r1
 80092aa:	ec45 4b10 	vmov	d0, r4, r5
 80092ae:	4616      	mov	r6, r2
 80092b0:	f7ff feba 	bl	8009028 <__ulp>
 80092b4:	ec51 0b10 	vmov	r0, r1, d0
 80092b8:	b17e      	cbz	r6, 80092da <sulp+0x36>
 80092ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80092be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	dd09      	ble.n	80092da <sulp+0x36>
 80092c6:	051b      	lsls	r3, r3, #20
 80092c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80092cc:	2400      	movs	r4, #0
 80092ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80092d2:	4622      	mov	r2, r4
 80092d4:	462b      	mov	r3, r5
 80092d6:	f7f7 f9b7 	bl	8000648 <__aeabi_dmul>
 80092da:	ec41 0b10 	vmov	d0, r0, r1
 80092de:	bd70      	pop	{r4, r5, r6, pc}

080092e0 <_strtod_l>:
 80092e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e4:	b09f      	sub	sp, #124	@ 0x7c
 80092e6:	460c      	mov	r4, r1
 80092e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80092ea:	2200      	movs	r2, #0
 80092ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80092ee:	9005      	str	r0, [sp, #20]
 80092f0:	f04f 0a00 	mov.w	sl, #0
 80092f4:	f04f 0b00 	mov.w	fp, #0
 80092f8:	460a      	mov	r2, r1
 80092fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80092fc:	7811      	ldrb	r1, [r2, #0]
 80092fe:	292b      	cmp	r1, #43	@ 0x2b
 8009300:	d04a      	beq.n	8009398 <_strtod_l+0xb8>
 8009302:	d838      	bhi.n	8009376 <_strtod_l+0x96>
 8009304:	290d      	cmp	r1, #13
 8009306:	d832      	bhi.n	800936e <_strtod_l+0x8e>
 8009308:	2908      	cmp	r1, #8
 800930a:	d832      	bhi.n	8009372 <_strtod_l+0x92>
 800930c:	2900      	cmp	r1, #0
 800930e:	d03b      	beq.n	8009388 <_strtod_l+0xa8>
 8009310:	2200      	movs	r2, #0
 8009312:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009314:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009316:	782a      	ldrb	r2, [r5, #0]
 8009318:	2a30      	cmp	r2, #48	@ 0x30
 800931a:	f040 80b3 	bne.w	8009484 <_strtod_l+0x1a4>
 800931e:	786a      	ldrb	r2, [r5, #1]
 8009320:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009324:	2a58      	cmp	r2, #88	@ 0x58
 8009326:	d16e      	bne.n	8009406 <_strtod_l+0x126>
 8009328:	9302      	str	r3, [sp, #8]
 800932a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800932c:	9301      	str	r3, [sp, #4]
 800932e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	4a8e      	ldr	r2, [pc, #568]	@ (800956c <_strtod_l+0x28c>)
 8009334:	9805      	ldr	r0, [sp, #20]
 8009336:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009338:	a919      	add	r1, sp, #100	@ 0x64
 800933a:	f001 f927 	bl	800a58c <__gethex>
 800933e:	f010 060f 	ands.w	r6, r0, #15
 8009342:	4604      	mov	r4, r0
 8009344:	d005      	beq.n	8009352 <_strtod_l+0x72>
 8009346:	2e06      	cmp	r6, #6
 8009348:	d128      	bne.n	800939c <_strtod_l+0xbc>
 800934a:	3501      	adds	r5, #1
 800934c:	2300      	movs	r3, #0
 800934e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009350:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009352:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009354:	2b00      	cmp	r3, #0
 8009356:	f040 858e 	bne.w	8009e76 <_strtod_l+0xb96>
 800935a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800935c:	b1cb      	cbz	r3, 8009392 <_strtod_l+0xb2>
 800935e:	4652      	mov	r2, sl
 8009360:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009364:	ec43 2b10 	vmov	d0, r2, r3
 8009368:	b01f      	add	sp, #124	@ 0x7c
 800936a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936e:	2920      	cmp	r1, #32
 8009370:	d1ce      	bne.n	8009310 <_strtod_l+0x30>
 8009372:	3201      	adds	r2, #1
 8009374:	e7c1      	b.n	80092fa <_strtod_l+0x1a>
 8009376:	292d      	cmp	r1, #45	@ 0x2d
 8009378:	d1ca      	bne.n	8009310 <_strtod_l+0x30>
 800937a:	2101      	movs	r1, #1
 800937c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800937e:	1c51      	adds	r1, r2, #1
 8009380:	9119      	str	r1, [sp, #100]	@ 0x64
 8009382:	7852      	ldrb	r2, [r2, #1]
 8009384:	2a00      	cmp	r2, #0
 8009386:	d1c5      	bne.n	8009314 <_strtod_l+0x34>
 8009388:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800938a:	9419      	str	r4, [sp, #100]	@ 0x64
 800938c:	2b00      	cmp	r3, #0
 800938e:	f040 8570 	bne.w	8009e72 <_strtod_l+0xb92>
 8009392:	4652      	mov	r2, sl
 8009394:	465b      	mov	r3, fp
 8009396:	e7e5      	b.n	8009364 <_strtod_l+0x84>
 8009398:	2100      	movs	r1, #0
 800939a:	e7ef      	b.n	800937c <_strtod_l+0x9c>
 800939c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800939e:	b13a      	cbz	r2, 80093b0 <_strtod_l+0xd0>
 80093a0:	2135      	movs	r1, #53	@ 0x35
 80093a2:	a81c      	add	r0, sp, #112	@ 0x70
 80093a4:	f7ff ff3a 	bl	800921c <__copybits>
 80093a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093aa:	9805      	ldr	r0, [sp, #20]
 80093ac:	f7ff fb08 	bl	80089c0 <_Bfree>
 80093b0:	3e01      	subs	r6, #1
 80093b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80093b4:	2e04      	cmp	r6, #4
 80093b6:	d806      	bhi.n	80093c6 <_strtod_l+0xe6>
 80093b8:	e8df f006 	tbb	[pc, r6]
 80093bc:	201d0314 	.word	0x201d0314
 80093c0:	14          	.byte	0x14
 80093c1:	00          	.byte	0x00
 80093c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80093c6:	05e1      	lsls	r1, r4, #23
 80093c8:	bf48      	it	mi
 80093ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80093ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093d2:	0d1b      	lsrs	r3, r3, #20
 80093d4:	051b      	lsls	r3, r3, #20
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1bb      	bne.n	8009352 <_strtod_l+0x72>
 80093da:	f7fe fb2f 	bl	8007a3c <__errno>
 80093de:	2322      	movs	r3, #34	@ 0x22
 80093e0:	6003      	str	r3, [r0, #0]
 80093e2:	e7b6      	b.n	8009352 <_strtod_l+0x72>
 80093e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80093e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80093ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80093f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80093f4:	e7e7      	b.n	80093c6 <_strtod_l+0xe6>
 80093f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009574 <_strtod_l+0x294>
 80093fa:	e7e4      	b.n	80093c6 <_strtod_l+0xe6>
 80093fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009400:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009404:	e7df      	b.n	80093c6 <_strtod_l+0xe6>
 8009406:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009408:	1c5a      	adds	r2, r3, #1
 800940a:	9219      	str	r2, [sp, #100]	@ 0x64
 800940c:	785b      	ldrb	r3, [r3, #1]
 800940e:	2b30      	cmp	r3, #48	@ 0x30
 8009410:	d0f9      	beq.n	8009406 <_strtod_l+0x126>
 8009412:	2b00      	cmp	r3, #0
 8009414:	d09d      	beq.n	8009352 <_strtod_l+0x72>
 8009416:	2301      	movs	r3, #1
 8009418:	9309      	str	r3, [sp, #36]	@ 0x24
 800941a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800941c:	930c      	str	r3, [sp, #48]	@ 0x30
 800941e:	2300      	movs	r3, #0
 8009420:	9308      	str	r3, [sp, #32]
 8009422:	930a      	str	r3, [sp, #40]	@ 0x28
 8009424:	461f      	mov	r7, r3
 8009426:	220a      	movs	r2, #10
 8009428:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800942a:	7805      	ldrb	r5, [r0, #0]
 800942c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009430:	b2d9      	uxtb	r1, r3
 8009432:	2909      	cmp	r1, #9
 8009434:	d928      	bls.n	8009488 <_strtod_l+0x1a8>
 8009436:	494e      	ldr	r1, [pc, #312]	@ (8009570 <_strtod_l+0x290>)
 8009438:	2201      	movs	r2, #1
 800943a:	f000 ffd5 	bl	800a3e8 <strncmp>
 800943e:	2800      	cmp	r0, #0
 8009440:	d032      	beq.n	80094a8 <_strtod_l+0x1c8>
 8009442:	2000      	movs	r0, #0
 8009444:	462a      	mov	r2, r5
 8009446:	4681      	mov	r9, r0
 8009448:	463d      	mov	r5, r7
 800944a:	4603      	mov	r3, r0
 800944c:	2a65      	cmp	r2, #101	@ 0x65
 800944e:	d001      	beq.n	8009454 <_strtod_l+0x174>
 8009450:	2a45      	cmp	r2, #69	@ 0x45
 8009452:	d114      	bne.n	800947e <_strtod_l+0x19e>
 8009454:	b91d      	cbnz	r5, 800945e <_strtod_l+0x17e>
 8009456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009458:	4302      	orrs	r2, r0
 800945a:	d095      	beq.n	8009388 <_strtod_l+0xa8>
 800945c:	2500      	movs	r5, #0
 800945e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009460:	1c62      	adds	r2, r4, #1
 8009462:	9219      	str	r2, [sp, #100]	@ 0x64
 8009464:	7862      	ldrb	r2, [r4, #1]
 8009466:	2a2b      	cmp	r2, #43	@ 0x2b
 8009468:	d077      	beq.n	800955a <_strtod_l+0x27a>
 800946a:	2a2d      	cmp	r2, #45	@ 0x2d
 800946c:	d07b      	beq.n	8009566 <_strtod_l+0x286>
 800946e:	f04f 0c00 	mov.w	ip, #0
 8009472:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009476:	2909      	cmp	r1, #9
 8009478:	f240 8082 	bls.w	8009580 <_strtod_l+0x2a0>
 800947c:	9419      	str	r4, [sp, #100]	@ 0x64
 800947e:	f04f 0800 	mov.w	r8, #0
 8009482:	e0a2      	b.n	80095ca <_strtod_l+0x2ea>
 8009484:	2300      	movs	r3, #0
 8009486:	e7c7      	b.n	8009418 <_strtod_l+0x138>
 8009488:	2f08      	cmp	r7, #8
 800948a:	bfd5      	itete	le
 800948c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800948e:	9908      	ldrgt	r1, [sp, #32]
 8009490:	fb02 3301 	mlale	r3, r2, r1, r3
 8009494:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009498:	f100 0001 	add.w	r0, r0, #1
 800949c:	bfd4      	ite	le
 800949e:	930a      	strle	r3, [sp, #40]	@ 0x28
 80094a0:	9308      	strgt	r3, [sp, #32]
 80094a2:	3701      	adds	r7, #1
 80094a4:	9019      	str	r0, [sp, #100]	@ 0x64
 80094a6:	e7bf      	b.n	8009428 <_strtod_l+0x148>
 80094a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094aa:	1c5a      	adds	r2, r3, #1
 80094ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80094ae:	785a      	ldrb	r2, [r3, #1]
 80094b0:	b37f      	cbz	r7, 8009512 <_strtod_l+0x232>
 80094b2:	4681      	mov	r9, r0
 80094b4:	463d      	mov	r5, r7
 80094b6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80094ba:	2b09      	cmp	r3, #9
 80094bc:	d912      	bls.n	80094e4 <_strtod_l+0x204>
 80094be:	2301      	movs	r3, #1
 80094c0:	e7c4      	b.n	800944c <_strtod_l+0x16c>
 80094c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094c4:	1c5a      	adds	r2, r3, #1
 80094c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80094c8:	785a      	ldrb	r2, [r3, #1]
 80094ca:	3001      	adds	r0, #1
 80094cc:	2a30      	cmp	r2, #48	@ 0x30
 80094ce:	d0f8      	beq.n	80094c2 <_strtod_l+0x1e2>
 80094d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80094d4:	2b08      	cmp	r3, #8
 80094d6:	f200 84d3 	bhi.w	8009e80 <_strtod_l+0xba0>
 80094da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80094de:	4681      	mov	r9, r0
 80094e0:	2000      	movs	r0, #0
 80094e2:	4605      	mov	r5, r0
 80094e4:	3a30      	subs	r2, #48	@ 0x30
 80094e6:	f100 0301 	add.w	r3, r0, #1
 80094ea:	d02a      	beq.n	8009542 <_strtod_l+0x262>
 80094ec:	4499      	add	r9, r3
 80094ee:	eb00 0c05 	add.w	ip, r0, r5
 80094f2:	462b      	mov	r3, r5
 80094f4:	210a      	movs	r1, #10
 80094f6:	4563      	cmp	r3, ip
 80094f8:	d10d      	bne.n	8009516 <_strtod_l+0x236>
 80094fa:	1c69      	adds	r1, r5, #1
 80094fc:	4401      	add	r1, r0
 80094fe:	4428      	add	r0, r5
 8009500:	2808      	cmp	r0, #8
 8009502:	dc16      	bgt.n	8009532 <_strtod_l+0x252>
 8009504:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009506:	230a      	movs	r3, #10
 8009508:	fb03 2300 	mla	r3, r3, r0, r2
 800950c:	930a      	str	r3, [sp, #40]	@ 0x28
 800950e:	2300      	movs	r3, #0
 8009510:	e018      	b.n	8009544 <_strtod_l+0x264>
 8009512:	4638      	mov	r0, r7
 8009514:	e7da      	b.n	80094cc <_strtod_l+0x1ec>
 8009516:	2b08      	cmp	r3, #8
 8009518:	f103 0301 	add.w	r3, r3, #1
 800951c:	dc03      	bgt.n	8009526 <_strtod_l+0x246>
 800951e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009520:	434e      	muls	r6, r1
 8009522:	960a      	str	r6, [sp, #40]	@ 0x28
 8009524:	e7e7      	b.n	80094f6 <_strtod_l+0x216>
 8009526:	2b10      	cmp	r3, #16
 8009528:	bfde      	ittt	le
 800952a:	9e08      	ldrle	r6, [sp, #32]
 800952c:	434e      	mulle	r6, r1
 800952e:	9608      	strle	r6, [sp, #32]
 8009530:	e7e1      	b.n	80094f6 <_strtod_l+0x216>
 8009532:	280f      	cmp	r0, #15
 8009534:	dceb      	bgt.n	800950e <_strtod_l+0x22e>
 8009536:	9808      	ldr	r0, [sp, #32]
 8009538:	230a      	movs	r3, #10
 800953a:	fb03 2300 	mla	r3, r3, r0, r2
 800953e:	9308      	str	r3, [sp, #32]
 8009540:	e7e5      	b.n	800950e <_strtod_l+0x22e>
 8009542:	4629      	mov	r1, r5
 8009544:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009546:	1c50      	adds	r0, r2, #1
 8009548:	9019      	str	r0, [sp, #100]	@ 0x64
 800954a:	7852      	ldrb	r2, [r2, #1]
 800954c:	4618      	mov	r0, r3
 800954e:	460d      	mov	r5, r1
 8009550:	e7b1      	b.n	80094b6 <_strtod_l+0x1d6>
 8009552:	f04f 0900 	mov.w	r9, #0
 8009556:	2301      	movs	r3, #1
 8009558:	e77d      	b.n	8009456 <_strtod_l+0x176>
 800955a:	f04f 0c00 	mov.w	ip, #0
 800955e:	1ca2      	adds	r2, r4, #2
 8009560:	9219      	str	r2, [sp, #100]	@ 0x64
 8009562:	78a2      	ldrb	r2, [r4, #2]
 8009564:	e785      	b.n	8009472 <_strtod_l+0x192>
 8009566:	f04f 0c01 	mov.w	ip, #1
 800956a:	e7f8      	b.n	800955e <_strtod_l+0x27e>
 800956c:	0800b430 	.word	0x0800b430
 8009570:	0800b418 	.word	0x0800b418
 8009574:	7ff00000 	.word	0x7ff00000
 8009578:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800957a:	1c51      	adds	r1, r2, #1
 800957c:	9119      	str	r1, [sp, #100]	@ 0x64
 800957e:	7852      	ldrb	r2, [r2, #1]
 8009580:	2a30      	cmp	r2, #48	@ 0x30
 8009582:	d0f9      	beq.n	8009578 <_strtod_l+0x298>
 8009584:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009588:	2908      	cmp	r1, #8
 800958a:	f63f af78 	bhi.w	800947e <_strtod_l+0x19e>
 800958e:	3a30      	subs	r2, #48	@ 0x30
 8009590:	920e      	str	r2, [sp, #56]	@ 0x38
 8009592:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009594:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009596:	f04f 080a 	mov.w	r8, #10
 800959a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800959c:	1c56      	adds	r6, r2, #1
 800959e:	9619      	str	r6, [sp, #100]	@ 0x64
 80095a0:	7852      	ldrb	r2, [r2, #1]
 80095a2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80095a6:	f1be 0f09 	cmp.w	lr, #9
 80095aa:	d939      	bls.n	8009620 <_strtod_l+0x340>
 80095ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80095ae:	1a76      	subs	r6, r6, r1
 80095b0:	2e08      	cmp	r6, #8
 80095b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80095b6:	dc03      	bgt.n	80095c0 <_strtod_l+0x2e0>
 80095b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80095ba:	4588      	cmp	r8, r1
 80095bc:	bfa8      	it	ge
 80095be:	4688      	movge	r8, r1
 80095c0:	f1bc 0f00 	cmp.w	ip, #0
 80095c4:	d001      	beq.n	80095ca <_strtod_l+0x2ea>
 80095c6:	f1c8 0800 	rsb	r8, r8, #0
 80095ca:	2d00      	cmp	r5, #0
 80095cc:	d14e      	bne.n	800966c <_strtod_l+0x38c>
 80095ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80095d0:	4308      	orrs	r0, r1
 80095d2:	f47f aebe 	bne.w	8009352 <_strtod_l+0x72>
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f47f aed6 	bne.w	8009388 <_strtod_l+0xa8>
 80095dc:	2a69      	cmp	r2, #105	@ 0x69
 80095de:	d028      	beq.n	8009632 <_strtod_l+0x352>
 80095e0:	dc25      	bgt.n	800962e <_strtod_l+0x34e>
 80095e2:	2a49      	cmp	r2, #73	@ 0x49
 80095e4:	d025      	beq.n	8009632 <_strtod_l+0x352>
 80095e6:	2a4e      	cmp	r2, #78	@ 0x4e
 80095e8:	f47f aece 	bne.w	8009388 <_strtod_l+0xa8>
 80095ec:	499b      	ldr	r1, [pc, #620]	@ (800985c <_strtod_l+0x57c>)
 80095ee:	a819      	add	r0, sp, #100	@ 0x64
 80095f0:	f001 f9ee 	bl	800a9d0 <__match>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	f43f aec7 	beq.w	8009388 <_strtod_l+0xa8>
 80095fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	2b28      	cmp	r3, #40	@ 0x28
 8009600:	d12e      	bne.n	8009660 <_strtod_l+0x380>
 8009602:	4997      	ldr	r1, [pc, #604]	@ (8009860 <_strtod_l+0x580>)
 8009604:	aa1c      	add	r2, sp, #112	@ 0x70
 8009606:	a819      	add	r0, sp, #100	@ 0x64
 8009608:	f001 f9f6 	bl	800a9f8 <__hexnan>
 800960c:	2805      	cmp	r0, #5
 800960e:	d127      	bne.n	8009660 <_strtod_l+0x380>
 8009610:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009612:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009616:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800961a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800961e:	e698      	b.n	8009352 <_strtod_l+0x72>
 8009620:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009622:	fb08 2101 	mla	r1, r8, r1, r2
 8009626:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800962a:	920e      	str	r2, [sp, #56]	@ 0x38
 800962c:	e7b5      	b.n	800959a <_strtod_l+0x2ba>
 800962e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009630:	e7da      	b.n	80095e8 <_strtod_l+0x308>
 8009632:	498c      	ldr	r1, [pc, #560]	@ (8009864 <_strtod_l+0x584>)
 8009634:	a819      	add	r0, sp, #100	@ 0x64
 8009636:	f001 f9cb 	bl	800a9d0 <__match>
 800963a:	2800      	cmp	r0, #0
 800963c:	f43f aea4 	beq.w	8009388 <_strtod_l+0xa8>
 8009640:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009642:	4989      	ldr	r1, [pc, #548]	@ (8009868 <_strtod_l+0x588>)
 8009644:	3b01      	subs	r3, #1
 8009646:	a819      	add	r0, sp, #100	@ 0x64
 8009648:	9319      	str	r3, [sp, #100]	@ 0x64
 800964a:	f001 f9c1 	bl	800a9d0 <__match>
 800964e:	b910      	cbnz	r0, 8009656 <_strtod_l+0x376>
 8009650:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009652:	3301      	adds	r3, #1
 8009654:	9319      	str	r3, [sp, #100]	@ 0x64
 8009656:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009878 <_strtod_l+0x598>
 800965a:	f04f 0a00 	mov.w	sl, #0
 800965e:	e678      	b.n	8009352 <_strtod_l+0x72>
 8009660:	4882      	ldr	r0, [pc, #520]	@ (800986c <_strtod_l+0x58c>)
 8009662:	f000 fef1 	bl	800a448 <nan>
 8009666:	ec5b ab10 	vmov	sl, fp, d0
 800966a:	e672      	b.n	8009352 <_strtod_l+0x72>
 800966c:	eba8 0309 	sub.w	r3, r8, r9
 8009670:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009672:	9309      	str	r3, [sp, #36]	@ 0x24
 8009674:	2f00      	cmp	r7, #0
 8009676:	bf08      	it	eq
 8009678:	462f      	moveq	r7, r5
 800967a:	2d10      	cmp	r5, #16
 800967c:	462c      	mov	r4, r5
 800967e:	bfa8      	it	ge
 8009680:	2410      	movge	r4, #16
 8009682:	f7f6 ff67 	bl	8000554 <__aeabi_ui2d>
 8009686:	2d09      	cmp	r5, #9
 8009688:	4682      	mov	sl, r0
 800968a:	468b      	mov	fp, r1
 800968c:	dc13      	bgt.n	80096b6 <_strtod_l+0x3d6>
 800968e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009690:	2b00      	cmp	r3, #0
 8009692:	f43f ae5e 	beq.w	8009352 <_strtod_l+0x72>
 8009696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009698:	dd78      	ble.n	800978c <_strtod_l+0x4ac>
 800969a:	2b16      	cmp	r3, #22
 800969c:	dc5f      	bgt.n	800975e <_strtod_l+0x47e>
 800969e:	4974      	ldr	r1, [pc, #464]	@ (8009870 <_strtod_l+0x590>)
 80096a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096a8:	4652      	mov	r2, sl
 80096aa:	465b      	mov	r3, fp
 80096ac:	f7f6 ffcc 	bl	8000648 <__aeabi_dmul>
 80096b0:	4682      	mov	sl, r0
 80096b2:	468b      	mov	fp, r1
 80096b4:	e64d      	b.n	8009352 <_strtod_l+0x72>
 80096b6:	4b6e      	ldr	r3, [pc, #440]	@ (8009870 <_strtod_l+0x590>)
 80096b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80096bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80096c0:	f7f6 ffc2 	bl	8000648 <__aeabi_dmul>
 80096c4:	4682      	mov	sl, r0
 80096c6:	9808      	ldr	r0, [sp, #32]
 80096c8:	468b      	mov	fp, r1
 80096ca:	f7f6 ff43 	bl	8000554 <__aeabi_ui2d>
 80096ce:	4602      	mov	r2, r0
 80096d0:	460b      	mov	r3, r1
 80096d2:	4650      	mov	r0, sl
 80096d4:	4659      	mov	r1, fp
 80096d6:	f7f6 fe01 	bl	80002dc <__adddf3>
 80096da:	2d0f      	cmp	r5, #15
 80096dc:	4682      	mov	sl, r0
 80096de:	468b      	mov	fp, r1
 80096e0:	ddd5      	ble.n	800968e <_strtod_l+0x3ae>
 80096e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096e4:	1b2c      	subs	r4, r5, r4
 80096e6:	441c      	add	r4, r3
 80096e8:	2c00      	cmp	r4, #0
 80096ea:	f340 8096 	ble.w	800981a <_strtod_l+0x53a>
 80096ee:	f014 030f 	ands.w	r3, r4, #15
 80096f2:	d00a      	beq.n	800970a <_strtod_l+0x42a>
 80096f4:	495e      	ldr	r1, [pc, #376]	@ (8009870 <_strtod_l+0x590>)
 80096f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096fa:	4652      	mov	r2, sl
 80096fc:	465b      	mov	r3, fp
 80096fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009702:	f7f6 ffa1 	bl	8000648 <__aeabi_dmul>
 8009706:	4682      	mov	sl, r0
 8009708:	468b      	mov	fp, r1
 800970a:	f034 040f 	bics.w	r4, r4, #15
 800970e:	d073      	beq.n	80097f8 <_strtod_l+0x518>
 8009710:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009714:	dd48      	ble.n	80097a8 <_strtod_l+0x4c8>
 8009716:	2400      	movs	r4, #0
 8009718:	46a0      	mov	r8, r4
 800971a:	940a      	str	r4, [sp, #40]	@ 0x28
 800971c:	46a1      	mov	r9, r4
 800971e:	9a05      	ldr	r2, [sp, #20]
 8009720:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009878 <_strtod_l+0x598>
 8009724:	2322      	movs	r3, #34	@ 0x22
 8009726:	6013      	str	r3, [r2, #0]
 8009728:	f04f 0a00 	mov.w	sl, #0
 800972c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800972e:	2b00      	cmp	r3, #0
 8009730:	f43f ae0f 	beq.w	8009352 <_strtod_l+0x72>
 8009734:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009736:	9805      	ldr	r0, [sp, #20]
 8009738:	f7ff f942 	bl	80089c0 <_Bfree>
 800973c:	9805      	ldr	r0, [sp, #20]
 800973e:	4649      	mov	r1, r9
 8009740:	f7ff f93e 	bl	80089c0 <_Bfree>
 8009744:	9805      	ldr	r0, [sp, #20]
 8009746:	4641      	mov	r1, r8
 8009748:	f7ff f93a 	bl	80089c0 <_Bfree>
 800974c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800974e:	9805      	ldr	r0, [sp, #20]
 8009750:	f7ff f936 	bl	80089c0 <_Bfree>
 8009754:	9805      	ldr	r0, [sp, #20]
 8009756:	4621      	mov	r1, r4
 8009758:	f7ff f932 	bl	80089c0 <_Bfree>
 800975c:	e5f9      	b.n	8009352 <_strtod_l+0x72>
 800975e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009760:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009764:	4293      	cmp	r3, r2
 8009766:	dbbc      	blt.n	80096e2 <_strtod_l+0x402>
 8009768:	4c41      	ldr	r4, [pc, #260]	@ (8009870 <_strtod_l+0x590>)
 800976a:	f1c5 050f 	rsb	r5, r5, #15
 800976e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009772:	4652      	mov	r2, sl
 8009774:	465b      	mov	r3, fp
 8009776:	e9d1 0100 	ldrd	r0, r1, [r1]
 800977a:	f7f6 ff65 	bl	8000648 <__aeabi_dmul>
 800977e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009780:	1b5d      	subs	r5, r3, r5
 8009782:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009786:	e9d4 2300 	ldrd	r2, r3, [r4]
 800978a:	e78f      	b.n	80096ac <_strtod_l+0x3cc>
 800978c:	3316      	adds	r3, #22
 800978e:	dba8      	blt.n	80096e2 <_strtod_l+0x402>
 8009790:	4b37      	ldr	r3, [pc, #220]	@ (8009870 <_strtod_l+0x590>)
 8009792:	eba9 0808 	sub.w	r8, r9, r8
 8009796:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800979a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800979e:	4650      	mov	r0, sl
 80097a0:	4659      	mov	r1, fp
 80097a2:	f7f7 f87b 	bl	800089c <__aeabi_ddiv>
 80097a6:	e783      	b.n	80096b0 <_strtod_l+0x3d0>
 80097a8:	4b32      	ldr	r3, [pc, #200]	@ (8009874 <_strtod_l+0x594>)
 80097aa:	9308      	str	r3, [sp, #32]
 80097ac:	2300      	movs	r3, #0
 80097ae:	1124      	asrs	r4, r4, #4
 80097b0:	4650      	mov	r0, sl
 80097b2:	4659      	mov	r1, fp
 80097b4:	461e      	mov	r6, r3
 80097b6:	2c01      	cmp	r4, #1
 80097b8:	dc21      	bgt.n	80097fe <_strtod_l+0x51e>
 80097ba:	b10b      	cbz	r3, 80097c0 <_strtod_l+0x4e0>
 80097bc:	4682      	mov	sl, r0
 80097be:	468b      	mov	fp, r1
 80097c0:	492c      	ldr	r1, [pc, #176]	@ (8009874 <_strtod_l+0x594>)
 80097c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80097c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80097ca:	4652      	mov	r2, sl
 80097cc:	465b      	mov	r3, fp
 80097ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097d2:	f7f6 ff39 	bl	8000648 <__aeabi_dmul>
 80097d6:	4b28      	ldr	r3, [pc, #160]	@ (8009878 <_strtod_l+0x598>)
 80097d8:	460a      	mov	r2, r1
 80097da:	400b      	ands	r3, r1
 80097dc:	4927      	ldr	r1, [pc, #156]	@ (800987c <_strtod_l+0x59c>)
 80097de:	428b      	cmp	r3, r1
 80097e0:	4682      	mov	sl, r0
 80097e2:	d898      	bhi.n	8009716 <_strtod_l+0x436>
 80097e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80097e8:	428b      	cmp	r3, r1
 80097ea:	bf86      	itte	hi
 80097ec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009880 <_strtod_l+0x5a0>
 80097f0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80097f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80097f8:	2300      	movs	r3, #0
 80097fa:	9308      	str	r3, [sp, #32]
 80097fc:	e07a      	b.n	80098f4 <_strtod_l+0x614>
 80097fe:	07e2      	lsls	r2, r4, #31
 8009800:	d505      	bpl.n	800980e <_strtod_l+0x52e>
 8009802:	9b08      	ldr	r3, [sp, #32]
 8009804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009808:	f7f6 ff1e 	bl	8000648 <__aeabi_dmul>
 800980c:	2301      	movs	r3, #1
 800980e:	9a08      	ldr	r2, [sp, #32]
 8009810:	3208      	adds	r2, #8
 8009812:	3601      	adds	r6, #1
 8009814:	1064      	asrs	r4, r4, #1
 8009816:	9208      	str	r2, [sp, #32]
 8009818:	e7cd      	b.n	80097b6 <_strtod_l+0x4d6>
 800981a:	d0ed      	beq.n	80097f8 <_strtod_l+0x518>
 800981c:	4264      	negs	r4, r4
 800981e:	f014 020f 	ands.w	r2, r4, #15
 8009822:	d00a      	beq.n	800983a <_strtod_l+0x55a>
 8009824:	4b12      	ldr	r3, [pc, #72]	@ (8009870 <_strtod_l+0x590>)
 8009826:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800982a:	4650      	mov	r0, sl
 800982c:	4659      	mov	r1, fp
 800982e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009832:	f7f7 f833 	bl	800089c <__aeabi_ddiv>
 8009836:	4682      	mov	sl, r0
 8009838:	468b      	mov	fp, r1
 800983a:	1124      	asrs	r4, r4, #4
 800983c:	d0dc      	beq.n	80097f8 <_strtod_l+0x518>
 800983e:	2c1f      	cmp	r4, #31
 8009840:	dd20      	ble.n	8009884 <_strtod_l+0x5a4>
 8009842:	2400      	movs	r4, #0
 8009844:	46a0      	mov	r8, r4
 8009846:	940a      	str	r4, [sp, #40]	@ 0x28
 8009848:	46a1      	mov	r9, r4
 800984a:	9a05      	ldr	r2, [sp, #20]
 800984c:	2322      	movs	r3, #34	@ 0x22
 800984e:	f04f 0a00 	mov.w	sl, #0
 8009852:	f04f 0b00 	mov.w	fp, #0
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	e768      	b.n	800972c <_strtod_l+0x44c>
 800985a:	bf00      	nop
 800985c:	0800b205 	.word	0x0800b205
 8009860:	0800b41c 	.word	0x0800b41c
 8009864:	0800b1fd 	.word	0x0800b1fd
 8009868:	0800b234 	.word	0x0800b234
 800986c:	0800b5c5 	.word	0x0800b5c5
 8009870:	0800b350 	.word	0x0800b350
 8009874:	0800b328 	.word	0x0800b328
 8009878:	7ff00000 	.word	0x7ff00000
 800987c:	7ca00000 	.word	0x7ca00000
 8009880:	7fefffff 	.word	0x7fefffff
 8009884:	f014 0310 	ands.w	r3, r4, #16
 8009888:	bf18      	it	ne
 800988a:	236a      	movne	r3, #106	@ 0x6a
 800988c:	4ea9      	ldr	r6, [pc, #676]	@ (8009b34 <_strtod_l+0x854>)
 800988e:	9308      	str	r3, [sp, #32]
 8009890:	4650      	mov	r0, sl
 8009892:	4659      	mov	r1, fp
 8009894:	2300      	movs	r3, #0
 8009896:	07e2      	lsls	r2, r4, #31
 8009898:	d504      	bpl.n	80098a4 <_strtod_l+0x5c4>
 800989a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800989e:	f7f6 fed3 	bl	8000648 <__aeabi_dmul>
 80098a2:	2301      	movs	r3, #1
 80098a4:	1064      	asrs	r4, r4, #1
 80098a6:	f106 0608 	add.w	r6, r6, #8
 80098aa:	d1f4      	bne.n	8009896 <_strtod_l+0x5b6>
 80098ac:	b10b      	cbz	r3, 80098b2 <_strtod_l+0x5d2>
 80098ae:	4682      	mov	sl, r0
 80098b0:	468b      	mov	fp, r1
 80098b2:	9b08      	ldr	r3, [sp, #32]
 80098b4:	b1b3      	cbz	r3, 80098e4 <_strtod_l+0x604>
 80098b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80098ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80098be:	2b00      	cmp	r3, #0
 80098c0:	4659      	mov	r1, fp
 80098c2:	dd0f      	ble.n	80098e4 <_strtod_l+0x604>
 80098c4:	2b1f      	cmp	r3, #31
 80098c6:	dd55      	ble.n	8009974 <_strtod_l+0x694>
 80098c8:	2b34      	cmp	r3, #52	@ 0x34
 80098ca:	bfde      	ittt	le
 80098cc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80098d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80098d4:	4093      	lslle	r3, r2
 80098d6:	f04f 0a00 	mov.w	sl, #0
 80098da:	bfcc      	ite	gt
 80098dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80098e0:	ea03 0b01 	andle.w	fp, r3, r1
 80098e4:	2200      	movs	r2, #0
 80098e6:	2300      	movs	r3, #0
 80098e8:	4650      	mov	r0, sl
 80098ea:	4659      	mov	r1, fp
 80098ec:	f7f7 f914 	bl	8000b18 <__aeabi_dcmpeq>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d1a6      	bne.n	8009842 <_strtod_l+0x562>
 80098f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80098fa:	9805      	ldr	r0, [sp, #20]
 80098fc:	462b      	mov	r3, r5
 80098fe:	463a      	mov	r2, r7
 8009900:	f7ff f8c6 	bl	8008a90 <__s2b>
 8009904:	900a      	str	r0, [sp, #40]	@ 0x28
 8009906:	2800      	cmp	r0, #0
 8009908:	f43f af05 	beq.w	8009716 <_strtod_l+0x436>
 800990c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800990e:	2a00      	cmp	r2, #0
 8009910:	eba9 0308 	sub.w	r3, r9, r8
 8009914:	bfa8      	it	ge
 8009916:	2300      	movge	r3, #0
 8009918:	9312      	str	r3, [sp, #72]	@ 0x48
 800991a:	2400      	movs	r4, #0
 800991c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009920:	9316      	str	r3, [sp, #88]	@ 0x58
 8009922:	46a0      	mov	r8, r4
 8009924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009926:	9805      	ldr	r0, [sp, #20]
 8009928:	6859      	ldr	r1, [r3, #4]
 800992a:	f7ff f809 	bl	8008940 <_Balloc>
 800992e:	4681      	mov	r9, r0
 8009930:	2800      	cmp	r0, #0
 8009932:	f43f aef4 	beq.w	800971e <_strtod_l+0x43e>
 8009936:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009938:	691a      	ldr	r2, [r3, #16]
 800993a:	3202      	adds	r2, #2
 800993c:	f103 010c 	add.w	r1, r3, #12
 8009940:	0092      	lsls	r2, r2, #2
 8009942:	300c      	adds	r0, #12
 8009944:	f000 fd72 	bl	800a42c <memcpy>
 8009948:	ec4b ab10 	vmov	d0, sl, fp
 800994c:	9805      	ldr	r0, [sp, #20]
 800994e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009950:	a91b      	add	r1, sp, #108	@ 0x6c
 8009952:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009956:	f7ff fbd7 	bl	8009108 <__d2b>
 800995a:	901a      	str	r0, [sp, #104]	@ 0x68
 800995c:	2800      	cmp	r0, #0
 800995e:	f43f aede 	beq.w	800971e <_strtod_l+0x43e>
 8009962:	9805      	ldr	r0, [sp, #20]
 8009964:	2101      	movs	r1, #1
 8009966:	f7ff f929 	bl	8008bbc <__i2b>
 800996a:	4680      	mov	r8, r0
 800996c:	b948      	cbnz	r0, 8009982 <_strtod_l+0x6a2>
 800996e:	f04f 0800 	mov.w	r8, #0
 8009972:	e6d4      	b.n	800971e <_strtod_l+0x43e>
 8009974:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009978:	fa02 f303 	lsl.w	r3, r2, r3
 800997c:	ea03 0a0a 	and.w	sl, r3, sl
 8009980:	e7b0      	b.n	80098e4 <_strtod_l+0x604>
 8009982:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009984:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009986:	2d00      	cmp	r5, #0
 8009988:	bfab      	itete	ge
 800998a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800998c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800998e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009990:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009992:	bfac      	ite	ge
 8009994:	18ef      	addge	r7, r5, r3
 8009996:	1b5e      	sublt	r6, r3, r5
 8009998:	9b08      	ldr	r3, [sp, #32]
 800999a:	1aed      	subs	r5, r5, r3
 800999c:	4415      	add	r5, r2
 800999e:	4b66      	ldr	r3, [pc, #408]	@ (8009b38 <_strtod_l+0x858>)
 80099a0:	3d01      	subs	r5, #1
 80099a2:	429d      	cmp	r5, r3
 80099a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80099a8:	da50      	bge.n	8009a4c <_strtod_l+0x76c>
 80099aa:	1b5b      	subs	r3, r3, r5
 80099ac:	2b1f      	cmp	r3, #31
 80099ae:	eba2 0203 	sub.w	r2, r2, r3
 80099b2:	f04f 0101 	mov.w	r1, #1
 80099b6:	dc3d      	bgt.n	8009a34 <_strtod_l+0x754>
 80099b8:	fa01 f303 	lsl.w	r3, r1, r3
 80099bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099be:	2300      	movs	r3, #0
 80099c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80099c2:	18bd      	adds	r5, r7, r2
 80099c4:	9b08      	ldr	r3, [sp, #32]
 80099c6:	42af      	cmp	r7, r5
 80099c8:	4416      	add	r6, r2
 80099ca:	441e      	add	r6, r3
 80099cc:	463b      	mov	r3, r7
 80099ce:	bfa8      	it	ge
 80099d0:	462b      	movge	r3, r5
 80099d2:	42b3      	cmp	r3, r6
 80099d4:	bfa8      	it	ge
 80099d6:	4633      	movge	r3, r6
 80099d8:	2b00      	cmp	r3, #0
 80099da:	bfc2      	ittt	gt
 80099dc:	1aed      	subgt	r5, r5, r3
 80099de:	1af6      	subgt	r6, r6, r3
 80099e0:	1aff      	subgt	r7, r7, r3
 80099e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	dd16      	ble.n	8009a16 <_strtod_l+0x736>
 80099e8:	4641      	mov	r1, r8
 80099ea:	9805      	ldr	r0, [sp, #20]
 80099ec:	461a      	mov	r2, r3
 80099ee:	f7ff f9a5 	bl	8008d3c <__pow5mult>
 80099f2:	4680      	mov	r8, r0
 80099f4:	2800      	cmp	r0, #0
 80099f6:	d0ba      	beq.n	800996e <_strtod_l+0x68e>
 80099f8:	4601      	mov	r1, r0
 80099fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80099fc:	9805      	ldr	r0, [sp, #20]
 80099fe:	f7ff f8f3 	bl	8008be8 <__multiply>
 8009a02:	900e      	str	r0, [sp, #56]	@ 0x38
 8009a04:	2800      	cmp	r0, #0
 8009a06:	f43f ae8a 	beq.w	800971e <_strtod_l+0x43e>
 8009a0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a0c:	9805      	ldr	r0, [sp, #20]
 8009a0e:	f7fe ffd7 	bl	80089c0 <_Bfree>
 8009a12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a14:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a16:	2d00      	cmp	r5, #0
 8009a18:	dc1d      	bgt.n	8009a56 <_strtod_l+0x776>
 8009a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	dd23      	ble.n	8009a68 <_strtod_l+0x788>
 8009a20:	4649      	mov	r1, r9
 8009a22:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009a24:	9805      	ldr	r0, [sp, #20]
 8009a26:	f7ff f989 	bl	8008d3c <__pow5mult>
 8009a2a:	4681      	mov	r9, r0
 8009a2c:	b9e0      	cbnz	r0, 8009a68 <_strtod_l+0x788>
 8009a2e:	f04f 0900 	mov.w	r9, #0
 8009a32:	e674      	b.n	800971e <_strtod_l+0x43e>
 8009a34:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009a38:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009a3c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009a40:	35e2      	adds	r5, #226	@ 0xe2
 8009a42:	fa01 f305 	lsl.w	r3, r1, r5
 8009a46:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a48:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009a4a:	e7ba      	b.n	80099c2 <_strtod_l+0x6e2>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a50:	2301      	movs	r3, #1
 8009a52:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a54:	e7b5      	b.n	80099c2 <_strtod_l+0x6e2>
 8009a56:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a58:	9805      	ldr	r0, [sp, #20]
 8009a5a:	462a      	mov	r2, r5
 8009a5c:	f7ff f9c8 	bl	8008df0 <__lshift>
 8009a60:	901a      	str	r0, [sp, #104]	@ 0x68
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d1d9      	bne.n	8009a1a <_strtod_l+0x73a>
 8009a66:	e65a      	b.n	800971e <_strtod_l+0x43e>
 8009a68:	2e00      	cmp	r6, #0
 8009a6a:	dd07      	ble.n	8009a7c <_strtod_l+0x79c>
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	9805      	ldr	r0, [sp, #20]
 8009a70:	4632      	mov	r2, r6
 8009a72:	f7ff f9bd 	bl	8008df0 <__lshift>
 8009a76:	4681      	mov	r9, r0
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d0d8      	beq.n	8009a2e <_strtod_l+0x74e>
 8009a7c:	2f00      	cmp	r7, #0
 8009a7e:	dd08      	ble.n	8009a92 <_strtod_l+0x7b2>
 8009a80:	4641      	mov	r1, r8
 8009a82:	9805      	ldr	r0, [sp, #20]
 8009a84:	463a      	mov	r2, r7
 8009a86:	f7ff f9b3 	bl	8008df0 <__lshift>
 8009a8a:	4680      	mov	r8, r0
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	f43f ae46 	beq.w	800971e <_strtod_l+0x43e>
 8009a92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a94:	9805      	ldr	r0, [sp, #20]
 8009a96:	464a      	mov	r2, r9
 8009a98:	f7ff fa32 	bl	8008f00 <__mdiff>
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	f43f ae3d 	beq.w	800971e <_strtod_l+0x43e>
 8009aa4:	68c3      	ldr	r3, [r0, #12]
 8009aa6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60c3      	str	r3, [r0, #12]
 8009aac:	4641      	mov	r1, r8
 8009aae:	f7ff fa0b 	bl	8008ec8 <__mcmp>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	da46      	bge.n	8009b44 <_strtod_l+0x864>
 8009ab6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ab8:	ea53 030a 	orrs.w	r3, r3, sl
 8009abc:	d16c      	bne.n	8009b98 <_strtod_l+0x8b8>
 8009abe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d168      	bne.n	8009b98 <_strtod_l+0x8b8>
 8009ac6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009aca:	0d1b      	lsrs	r3, r3, #20
 8009acc:	051b      	lsls	r3, r3, #20
 8009ace:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009ad2:	d961      	bls.n	8009b98 <_strtod_l+0x8b8>
 8009ad4:	6963      	ldr	r3, [r4, #20]
 8009ad6:	b913      	cbnz	r3, 8009ade <_strtod_l+0x7fe>
 8009ad8:	6923      	ldr	r3, [r4, #16]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	dd5c      	ble.n	8009b98 <_strtod_l+0x8b8>
 8009ade:	4621      	mov	r1, r4
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	9805      	ldr	r0, [sp, #20]
 8009ae4:	f7ff f984 	bl	8008df0 <__lshift>
 8009ae8:	4641      	mov	r1, r8
 8009aea:	4604      	mov	r4, r0
 8009aec:	f7ff f9ec 	bl	8008ec8 <__mcmp>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	dd51      	ble.n	8009b98 <_strtod_l+0x8b8>
 8009af4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009af8:	9a08      	ldr	r2, [sp, #32]
 8009afa:	0d1b      	lsrs	r3, r3, #20
 8009afc:	051b      	lsls	r3, r3, #20
 8009afe:	2a00      	cmp	r2, #0
 8009b00:	d06b      	beq.n	8009bda <_strtod_l+0x8fa>
 8009b02:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009b06:	d868      	bhi.n	8009bda <_strtod_l+0x8fa>
 8009b08:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009b0c:	f67f ae9d 	bls.w	800984a <_strtod_l+0x56a>
 8009b10:	4b0a      	ldr	r3, [pc, #40]	@ (8009b3c <_strtod_l+0x85c>)
 8009b12:	4650      	mov	r0, sl
 8009b14:	4659      	mov	r1, fp
 8009b16:	2200      	movs	r2, #0
 8009b18:	f7f6 fd96 	bl	8000648 <__aeabi_dmul>
 8009b1c:	4b08      	ldr	r3, [pc, #32]	@ (8009b40 <_strtod_l+0x860>)
 8009b1e:	400b      	ands	r3, r1
 8009b20:	4682      	mov	sl, r0
 8009b22:	468b      	mov	fp, r1
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f47f ae05 	bne.w	8009734 <_strtod_l+0x454>
 8009b2a:	9a05      	ldr	r2, [sp, #20]
 8009b2c:	2322      	movs	r3, #34	@ 0x22
 8009b2e:	6013      	str	r3, [r2, #0]
 8009b30:	e600      	b.n	8009734 <_strtod_l+0x454>
 8009b32:	bf00      	nop
 8009b34:	0800b448 	.word	0x0800b448
 8009b38:	fffffc02 	.word	0xfffffc02
 8009b3c:	39500000 	.word	0x39500000
 8009b40:	7ff00000 	.word	0x7ff00000
 8009b44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009b48:	d165      	bne.n	8009c16 <_strtod_l+0x936>
 8009b4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009b4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b50:	b35a      	cbz	r2, 8009baa <_strtod_l+0x8ca>
 8009b52:	4a9f      	ldr	r2, [pc, #636]	@ (8009dd0 <_strtod_l+0xaf0>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d12b      	bne.n	8009bb0 <_strtod_l+0x8d0>
 8009b58:	9b08      	ldr	r3, [sp, #32]
 8009b5a:	4651      	mov	r1, sl
 8009b5c:	b303      	cbz	r3, 8009ba0 <_strtod_l+0x8c0>
 8009b5e:	4b9d      	ldr	r3, [pc, #628]	@ (8009dd4 <_strtod_l+0xaf4>)
 8009b60:	465a      	mov	r2, fp
 8009b62:	4013      	ands	r3, r2
 8009b64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009b68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b6c:	d81b      	bhi.n	8009ba6 <_strtod_l+0x8c6>
 8009b6e:	0d1b      	lsrs	r3, r3, #20
 8009b70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009b74:	fa02 f303 	lsl.w	r3, r2, r3
 8009b78:	4299      	cmp	r1, r3
 8009b7a:	d119      	bne.n	8009bb0 <_strtod_l+0x8d0>
 8009b7c:	4b96      	ldr	r3, [pc, #600]	@ (8009dd8 <_strtod_l+0xaf8>)
 8009b7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d102      	bne.n	8009b8a <_strtod_l+0x8aa>
 8009b84:	3101      	adds	r1, #1
 8009b86:	f43f adca 	beq.w	800971e <_strtod_l+0x43e>
 8009b8a:	4b92      	ldr	r3, [pc, #584]	@ (8009dd4 <_strtod_l+0xaf4>)
 8009b8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b8e:	401a      	ands	r2, r3
 8009b90:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009b94:	f04f 0a00 	mov.w	sl, #0
 8009b98:	9b08      	ldr	r3, [sp, #32]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1b8      	bne.n	8009b10 <_strtod_l+0x830>
 8009b9e:	e5c9      	b.n	8009734 <_strtod_l+0x454>
 8009ba0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009ba4:	e7e8      	b.n	8009b78 <_strtod_l+0x898>
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	e7e6      	b.n	8009b78 <_strtod_l+0x898>
 8009baa:	ea53 030a 	orrs.w	r3, r3, sl
 8009bae:	d0a1      	beq.n	8009af4 <_strtod_l+0x814>
 8009bb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009bb2:	b1db      	cbz	r3, 8009bec <_strtod_l+0x90c>
 8009bb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bb6:	4213      	tst	r3, r2
 8009bb8:	d0ee      	beq.n	8009b98 <_strtod_l+0x8b8>
 8009bba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bbc:	9a08      	ldr	r2, [sp, #32]
 8009bbe:	4650      	mov	r0, sl
 8009bc0:	4659      	mov	r1, fp
 8009bc2:	b1bb      	cbz	r3, 8009bf4 <_strtod_l+0x914>
 8009bc4:	f7ff fb6e 	bl	80092a4 <sulp>
 8009bc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bcc:	ec53 2b10 	vmov	r2, r3, d0
 8009bd0:	f7f6 fb84 	bl	80002dc <__adddf3>
 8009bd4:	4682      	mov	sl, r0
 8009bd6:	468b      	mov	fp, r1
 8009bd8:	e7de      	b.n	8009b98 <_strtod_l+0x8b8>
 8009bda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009bde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009be2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009be6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009bea:	e7d5      	b.n	8009b98 <_strtod_l+0x8b8>
 8009bec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009bee:	ea13 0f0a 	tst.w	r3, sl
 8009bf2:	e7e1      	b.n	8009bb8 <_strtod_l+0x8d8>
 8009bf4:	f7ff fb56 	bl	80092a4 <sulp>
 8009bf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bfc:	ec53 2b10 	vmov	r2, r3, d0
 8009c00:	f7f6 fb6a 	bl	80002d8 <__aeabi_dsub>
 8009c04:	2200      	movs	r2, #0
 8009c06:	2300      	movs	r3, #0
 8009c08:	4682      	mov	sl, r0
 8009c0a:	468b      	mov	fp, r1
 8009c0c:	f7f6 ff84 	bl	8000b18 <__aeabi_dcmpeq>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d0c1      	beq.n	8009b98 <_strtod_l+0x8b8>
 8009c14:	e619      	b.n	800984a <_strtod_l+0x56a>
 8009c16:	4641      	mov	r1, r8
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f7ff facd 	bl	80091b8 <__ratio>
 8009c1e:	ec57 6b10 	vmov	r6, r7, d0
 8009c22:	2200      	movs	r2, #0
 8009c24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009c28:	4630      	mov	r0, r6
 8009c2a:	4639      	mov	r1, r7
 8009c2c:	f7f6 ff88 	bl	8000b40 <__aeabi_dcmple>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d06f      	beq.n	8009d14 <_strtod_l+0xa34>
 8009c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d17a      	bne.n	8009d30 <_strtod_l+0xa50>
 8009c3a:	f1ba 0f00 	cmp.w	sl, #0
 8009c3e:	d158      	bne.n	8009cf2 <_strtod_l+0xa12>
 8009c40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d15a      	bne.n	8009d00 <_strtod_l+0xa20>
 8009c4a:	4b64      	ldr	r3, [pc, #400]	@ (8009ddc <_strtod_l+0xafc>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	4630      	mov	r0, r6
 8009c50:	4639      	mov	r1, r7
 8009c52:	f7f6 ff6b 	bl	8000b2c <__aeabi_dcmplt>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d159      	bne.n	8009d0e <_strtod_l+0xa2e>
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	4639      	mov	r1, r7
 8009c5e:	4b60      	ldr	r3, [pc, #384]	@ (8009de0 <_strtod_l+0xb00>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	f7f6 fcf1 	bl	8000648 <__aeabi_dmul>
 8009c66:	4606      	mov	r6, r0
 8009c68:	460f      	mov	r7, r1
 8009c6a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009c6e:	9606      	str	r6, [sp, #24]
 8009c70:	9307      	str	r3, [sp, #28]
 8009c72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c76:	4d57      	ldr	r5, [pc, #348]	@ (8009dd4 <_strtod_l+0xaf4>)
 8009c78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c7e:	401d      	ands	r5, r3
 8009c80:	4b58      	ldr	r3, [pc, #352]	@ (8009de4 <_strtod_l+0xb04>)
 8009c82:	429d      	cmp	r5, r3
 8009c84:	f040 80b2 	bne.w	8009dec <_strtod_l+0xb0c>
 8009c88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c8a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009c8e:	ec4b ab10 	vmov	d0, sl, fp
 8009c92:	f7ff f9c9 	bl	8009028 <__ulp>
 8009c96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c9a:	ec51 0b10 	vmov	r0, r1, d0
 8009c9e:	f7f6 fcd3 	bl	8000648 <__aeabi_dmul>
 8009ca2:	4652      	mov	r2, sl
 8009ca4:	465b      	mov	r3, fp
 8009ca6:	f7f6 fb19 	bl	80002dc <__adddf3>
 8009caa:	460b      	mov	r3, r1
 8009cac:	4949      	ldr	r1, [pc, #292]	@ (8009dd4 <_strtod_l+0xaf4>)
 8009cae:	4a4e      	ldr	r2, [pc, #312]	@ (8009de8 <_strtod_l+0xb08>)
 8009cb0:	4019      	ands	r1, r3
 8009cb2:	4291      	cmp	r1, r2
 8009cb4:	4682      	mov	sl, r0
 8009cb6:	d942      	bls.n	8009d3e <_strtod_l+0xa5e>
 8009cb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009cba:	4b47      	ldr	r3, [pc, #284]	@ (8009dd8 <_strtod_l+0xaf8>)
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d103      	bne.n	8009cc8 <_strtod_l+0x9e8>
 8009cc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	f43f ad2b 	beq.w	800971e <_strtod_l+0x43e>
 8009cc8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009dd8 <_strtod_l+0xaf8>
 8009ccc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009cd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009cd2:	9805      	ldr	r0, [sp, #20]
 8009cd4:	f7fe fe74 	bl	80089c0 <_Bfree>
 8009cd8:	9805      	ldr	r0, [sp, #20]
 8009cda:	4649      	mov	r1, r9
 8009cdc:	f7fe fe70 	bl	80089c0 <_Bfree>
 8009ce0:	9805      	ldr	r0, [sp, #20]
 8009ce2:	4641      	mov	r1, r8
 8009ce4:	f7fe fe6c 	bl	80089c0 <_Bfree>
 8009ce8:	9805      	ldr	r0, [sp, #20]
 8009cea:	4621      	mov	r1, r4
 8009cec:	f7fe fe68 	bl	80089c0 <_Bfree>
 8009cf0:	e618      	b.n	8009924 <_strtod_l+0x644>
 8009cf2:	f1ba 0f01 	cmp.w	sl, #1
 8009cf6:	d103      	bne.n	8009d00 <_strtod_l+0xa20>
 8009cf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f43f ada5 	beq.w	800984a <_strtod_l+0x56a>
 8009d00:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009db0 <_strtod_l+0xad0>
 8009d04:	4f35      	ldr	r7, [pc, #212]	@ (8009ddc <_strtod_l+0xafc>)
 8009d06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009d0a:	2600      	movs	r6, #0
 8009d0c:	e7b1      	b.n	8009c72 <_strtod_l+0x992>
 8009d0e:	4f34      	ldr	r7, [pc, #208]	@ (8009de0 <_strtod_l+0xb00>)
 8009d10:	2600      	movs	r6, #0
 8009d12:	e7aa      	b.n	8009c6a <_strtod_l+0x98a>
 8009d14:	4b32      	ldr	r3, [pc, #200]	@ (8009de0 <_strtod_l+0xb00>)
 8009d16:	4630      	mov	r0, r6
 8009d18:	4639      	mov	r1, r7
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f7f6 fc94 	bl	8000648 <__aeabi_dmul>
 8009d20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d22:	4606      	mov	r6, r0
 8009d24:	460f      	mov	r7, r1
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d09f      	beq.n	8009c6a <_strtod_l+0x98a>
 8009d2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009d2e:	e7a0      	b.n	8009c72 <_strtod_l+0x992>
 8009d30:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009db8 <_strtod_l+0xad8>
 8009d34:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009d38:	ec57 6b17 	vmov	r6, r7, d7
 8009d3c:	e799      	b.n	8009c72 <_strtod_l+0x992>
 8009d3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009d42:	9b08      	ldr	r3, [sp, #32]
 8009d44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1c1      	bne.n	8009cd0 <_strtod_l+0x9f0>
 8009d4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d50:	0d1b      	lsrs	r3, r3, #20
 8009d52:	051b      	lsls	r3, r3, #20
 8009d54:	429d      	cmp	r5, r3
 8009d56:	d1bb      	bne.n	8009cd0 <_strtod_l+0x9f0>
 8009d58:	4630      	mov	r0, r6
 8009d5a:	4639      	mov	r1, r7
 8009d5c:	f7f6 ffd4 	bl	8000d08 <__aeabi_d2lz>
 8009d60:	f7f6 fc44 	bl	80005ec <__aeabi_l2d>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	4630      	mov	r0, r6
 8009d6a:	4639      	mov	r1, r7
 8009d6c:	f7f6 fab4 	bl	80002d8 <__aeabi_dsub>
 8009d70:	460b      	mov	r3, r1
 8009d72:	4602      	mov	r2, r0
 8009d74:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009d78:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009d7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d7e:	ea46 060a 	orr.w	r6, r6, sl
 8009d82:	431e      	orrs	r6, r3
 8009d84:	d06f      	beq.n	8009e66 <_strtod_l+0xb86>
 8009d86:	a30e      	add	r3, pc, #56	@ (adr r3, 8009dc0 <_strtod_l+0xae0>)
 8009d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8c:	f7f6 fece 	bl	8000b2c <__aeabi_dcmplt>
 8009d90:	2800      	cmp	r0, #0
 8009d92:	f47f accf 	bne.w	8009734 <_strtod_l+0x454>
 8009d96:	a30c      	add	r3, pc, #48	@ (adr r3, 8009dc8 <_strtod_l+0xae8>)
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009da0:	f7f6 fee2 	bl	8000b68 <__aeabi_dcmpgt>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d093      	beq.n	8009cd0 <_strtod_l+0x9f0>
 8009da8:	e4c4      	b.n	8009734 <_strtod_l+0x454>
 8009daa:	bf00      	nop
 8009dac:	f3af 8000 	nop.w
 8009db0:	00000000 	.word	0x00000000
 8009db4:	bff00000 	.word	0xbff00000
 8009db8:	00000000 	.word	0x00000000
 8009dbc:	3ff00000 	.word	0x3ff00000
 8009dc0:	94a03595 	.word	0x94a03595
 8009dc4:	3fdfffff 	.word	0x3fdfffff
 8009dc8:	35afe535 	.word	0x35afe535
 8009dcc:	3fe00000 	.word	0x3fe00000
 8009dd0:	000fffff 	.word	0x000fffff
 8009dd4:	7ff00000 	.word	0x7ff00000
 8009dd8:	7fefffff 	.word	0x7fefffff
 8009ddc:	3ff00000 	.word	0x3ff00000
 8009de0:	3fe00000 	.word	0x3fe00000
 8009de4:	7fe00000 	.word	0x7fe00000
 8009de8:	7c9fffff 	.word	0x7c9fffff
 8009dec:	9b08      	ldr	r3, [sp, #32]
 8009dee:	b323      	cbz	r3, 8009e3a <_strtod_l+0xb5a>
 8009df0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009df4:	d821      	bhi.n	8009e3a <_strtod_l+0xb5a>
 8009df6:	a328      	add	r3, pc, #160	@ (adr r3, 8009e98 <_strtod_l+0xbb8>)
 8009df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	4639      	mov	r1, r7
 8009e00:	f7f6 fe9e 	bl	8000b40 <__aeabi_dcmple>
 8009e04:	b1a0      	cbz	r0, 8009e30 <_strtod_l+0xb50>
 8009e06:	4639      	mov	r1, r7
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f7f6 fef5 	bl	8000bf8 <__aeabi_d2uiz>
 8009e0e:	2801      	cmp	r0, #1
 8009e10:	bf38      	it	cc
 8009e12:	2001      	movcc	r0, #1
 8009e14:	f7f6 fb9e 	bl	8000554 <__aeabi_ui2d>
 8009e18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	460f      	mov	r7, r1
 8009e1e:	b9fb      	cbnz	r3, 8009e60 <_strtod_l+0xb80>
 8009e20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009e24:	9014      	str	r0, [sp, #80]	@ 0x50
 8009e26:	9315      	str	r3, [sp, #84]	@ 0x54
 8009e28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009e2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009e30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009e32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009e36:	1b5b      	subs	r3, r3, r5
 8009e38:	9311      	str	r3, [sp, #68]	@ 0x44
 8009e3a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009e3e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009e42:	f7ff f8f1 	bl	8009028 <__ulp>
 8009e46:	4650      	mov	r0, sl
 8009e48:	ec53 2b10 	vmov	r2, r3, d0
 8009e4c:	4659      	mov	r1, fp
 8009e4e:	f7f6 fbfb 	bl	8000648 <__aeabi_dmul>
 8009e52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009e56:	f7f6 fa41 	bl	80002dc <__adddf3>
 8009e5a:	4682      	mov	sl, r0
 8009e5c:	468b      	mov	fp, r1
 8009e5e:	e770      	b.n	8009d42 <_strtod_l+0xa62>
 8009e60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009e64:	e7e0      	b.n	8009e28 <_strtod_l+0xb48>
 8009e66:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ea0 <_strtod_l+0xbc0>)
 8009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6c:	f7f6 fe5e 	bl	8000b2c <__aeabi_dcmplt>
 8009e70:	e798      	b.n	8009da4 <_strtod_l+0xac4>
 8009e72:	2300      	movs	r3, #0
 8009e74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e76:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009e78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e7a:	6013      	str	r3, [r2, #0]
 8009e7c:	f7ff ba6d 	b.w	800935a <_strtod_l+0x7a>
 8009e80:	2a65      	cmp	r2, #101	@ 0x65
 8009e82:	f43f ab66 	beq.w	8009552 <_strtod_l+0x272>
 8009e86:	2a45      	cmp	r2, #69	@ 0x45
 8009e88:	f43f ab63 	beq.w	8009552 <_strtod_l+0x272>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	f7ff bb9e 	b.w	80095ce <_strtod_l+0x2ee>
 8009e92:	bf00      	nop
 8009e94:	f3af 8000 	nop.w
 8009e98:	ffc00000 	.word	0xffc00000
 8009e9c:	41dfffff 	.word	0x41dfffff
 8009ea0:	94a03595 	.word	0x94a03595
 8009ea4:	3fcfffff 	.word	0x3fcfffff

08009ea8 <_strtod_r>:
 8009ea8:	4b01      	ldr	r3, [pc, #4]	@ (8009eb0 <_strtod_r+0x8>)
 8009eaa:	f7ff ba19 	b.w	80092e0 <_strtod_l>
 8009eae:	bf00      	nop
 8009eb0:	20000068 	.word	0x20000068

08009eb4 <_strtol_l.constprop.0>:
 8009eb4:	2b24      	cmp	r3, #36	@ 0x24
 8009eb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eba:	4686      	mov	lr, r0
 8009ebc:	4690      	mov	r8, r2
 8009ebe:	d801      	bhi.n	8009ec4 <_strtol_l.constprop.0+0x10>
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d106      	bne.n	8009ed2 <_strtol_l.constprop.0+0x1e>
 8009ec4:	f7fd fdba 	bl	8007a3c <__errno>
 8009ec8:	2316      	movs	r3, #22
 8009eca:	6003      	str	r3, [r0, #0]
 8009ecc:	2000      	movs	r0, #0
 8009ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ed2:	4834      	ldr	r0, [pc, #208]	@ (8009fa4 <_strtol_l.constprop.0+0xf0>)
 8009ed4:	460d      	mov	r5, r1
 8009ed6:	462a      	mov	r2, r5
 8009ed8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009edc:	5d06      	ldrb	r6, [r0, r4]
 8009ede:	f016 0608 	ands.w	r6, r6, #8
 8009ee2:	d1f8      	bne.n	8009ed6 <_strtol_l.constprop.0+0x22>
 8009ee4:	2c2d      	cmp	r4, #45	@ 0x2d
 8009ee6:	d12d      	bne.n	8009f44 <_strtol_l.constprop.0+0x90>
 8009ee8:	782c      	ldrb	r4, [r5, #0]
 8009eea:	2601      	movs	r6, #1
 8009eec:	1c95      	adds	r5, r2, #2
 8009eee:	f033 0210 	bics.w	r2, r3, #16
 8009ef2:	d109      	bne.n	8009f08 <_strtol_l.constprop.0+0x54>
 8009ef4:	2c30      	cmp	r4, #48	@ 0x30
 8009ef6:	d12a      	bne.n	8009f4e <_strtol_l.constprop.0+0x9a>
 8009ef8:	782a      	ldrb	r2, [r5, #0]
 8009efa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009efe:	2a58      	cmp	r2, #88	@ 0x58
 8009f00:	d125      	bne.n	8009f4e <_strtol_l.constprop.0+0x9a>
 8009f02:	786c      	ldrb	r4, [r5, #1]
 8009f04:	2310      	movs	r3, #16
 8009f06:	3502      	adds	r5, #2
 8009f08:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009f0c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009f10:	2200      	movs	r2, #0
 8009f12:	fbbc f9f3 	udiv	r9, ip, r3
 8009f16:	4610      	mov	r0, r2
 8009f18:	fb03 ca19 	mls	sl, r3, r9, ip
 8009f1c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009f20:	2f09      	cmp	r7, #9
 8009f22:	d81b      	bhi.n	8009f5c <_strtol_l.constprop.0+0xa8>
 8009f24:	463c      	mov	r4, r7
 8009f26:	42a3      	cmp	r3, r4
 8009f28:	dd27      	ble.n	8009f7a <_strtol_l.constprop.0+0xc6>
 8009f2a:	1c57      	adds	r7, r2, #1
 8009f2c:	d007      	beq.n	8009f3e <_strtol_l.constprop.0+0x8a>
 8009f2e:	4581      	cmp	r9, r0
 8009f30:	d320      	bcc.n	8009f74 <_strtol_l.constprop.0+0xc0>
 8009f32:	d101      	bne.n	8009f38 <_strtol_l.constprop.0+0x84>
 8009f34:	45a2      	cmp	sl, r4
 8009f36:	db1d      	blt.n	8009f74 <_strtol_l.constprop.0+0xc0>
 8009f38:	fb00 4003 	mla	r0, r0, r3, r4
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f42:	e7eb      	b.n	8009f1c <_strtol_l.constprop.0+0x68>
 8009f44:	2c2b      	cmp	r4, #43	@ 0x2b
 8009f46:	bf04      	itt	eq
 8009f48:	782c      	ldrbeq	r4, [r5, #0]
 8009f4a:	1c95      	addeq	r5, r2, #2
 8009f4c:	e7cf      	b.n	8009eee <_strtol_l.constprop.0+0x3a>
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1da      	bne.n	8009f08 <_strtol_l.constprop.0+0x54>
 8009f52:	2c30      	cmp	r4, #48	@ 0x30
 8009f54:	bf0c      	ite	eq
 8009f56:	2308      	moveq	r3, #8
 8009f58:	230a      	movne	r3, #10
 8009f5a:	e7d5      	b.n	8009f08 <_strtol_l.constprop.0+0x54>
 8009f5c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009f60:	2f19      	cmp	r7, #25
 8009f62:	d801      	bhi.n	8009f68 <_strtol_l.constprop.0+0xb4>
 8009f64:	3c37      	subs	r4, #55	@ 0x37
 8009f66:	e7de      	b.n	8009f26 <_strtol_l.constprop.0+0x72>
 8009f68:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009f6c:	2f19      	cmp	r7, #25
 8009f6e:	d804      	bhi.n	8009f7a <_strtol_l.constprop.0+0xc6>
 8009f70:	3c57      	subs	r4, #87	@ 0x57
 8009f72:	e7d8      	b.n	8009f26 <_strtol_l.constprop.0+0x72>
 8009f74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f78:	e7e1      	b.n	8009f3e <_strtol_l.constprop.0+0x8a>
 8009f7a:	1c53      	adds	r3, r2, #1
 8009f7c:	d108      	bne.n	8009f90 <_strtol_l.constprop.0+0xdc>
 8009f7e:	2322      	movs	r3, #34	@ 0x22
 8009f80:	f8ce 3000 	str.w	r3, [lr]
 8009f84:	4660      	mov	r0, ip
 8009f86:	f1b8 0f00 	cmp.w	r8, #0
 8009f8a:	d0a0      	beq.n	8009ece <_strtol_l.constprop.0+0x1a>
 8009f8c:	1e69      	subs	r1, r5, #1
 8009f8e:	e006      	b.n	8009f9e <_strtol_l.constprop.0+0xea>
 8009f90:	b106      	cbz	r6, 8009f94 <_strtol_l.constprop.0+0xe0>
 8009f92:	4240      	negs	r0, r0
 8009f94:	f1b8 0f00 	cmp.w	r8, #0
 8009f98:	d099      	beq.n	8009ece <_strtol_l.constprop.0+0x1a>
 8009f9a:	2a00      	cmp	r2, #0
 8009f9c:	d1f6      	bne.n	8009f8c <_strtol_l.constprop.0+0xd8>
 8009f9e:	f8c8 1000 	str.w	r1, [r8]
 8009fa2:	e794      	b.n	8009ece <_strtol_l.constprop.0+0x1a>
 8009fa4:	0800b471 	.word	0x0800b471

08009fa8 <_strtol_r>:
 8009fa8:	f7ff bf84 	b.w	8009eb4 <_strtol_l.constprop.0>

08009fac <__ssputs_r>:
 8009fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb0:	688e      	ldr	r6, [r1, #8]
 8009fb2:	461f      	mov	r7, r3
 8009fb4:	42be      	cmp	r6, r7
 8009fb6:	680b      	ldr	r3, [r1, #0]
 8009fb8:	4682      	mov	sl, r0
 8009fba:	460c      	mov	r4, r1
 8009fbc:	4690      	mov	r8, r2
 8009fbe:	d82d      	bhi.n	800a01c <__ssputs_r+0x70>
 8009fc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009fc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009fc8:	d026      	beq.n	800a018 <__ssputs_r+0x6c>
 8009fca:	6965      	ldr	r5, [r4, #20]
 8009fcc:	6909      	ldr	r1, [r1, #16]
 8009fce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fd2:	eba3 0901 	sub.w	r9, r3, r1
 8009fd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fda:	1c7b      	adds	r3, r7, #1
 8009fdc:	444b      	add	r3, r9
 8009fde:	106d      	asrs	r5, r5, #1
 8009fe0:	429d      	cmp	r5, r3
 8009fe2:	bf38      	it	cc
 8009fe4:	461d      	movcc	r5, r3
 8009fe6:	0553      	lsls	r3, r2, #21
 8009fe8:	d527      	bpl.n	800a03a <__ssputs_r+0x8e>
 8009fea:	4629      	mov	r1, r5
 8009fec:	f7fe fc1c 	bl	8008828 <_malloc_r>
 8009ff0:	4606      	mov	r6, r0
 8009ff2:	b360      	cbz	r0, 800a04e <__ssputs_r+0xa2>
 8009ff4:	6921      	ldr	r1, [r4, #16]
 8009ff6:	464a      	mov	r2, r9
 8009ff8:	f000 fa18 	bl	800a42c <memcpy>
 8009ffc:	89a3      	ldrh	r3, [r4, #12]
 8009ffe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a006:	81a3      	strh	r3, [r4, #12]
 800a008:	6126      	str	r6, [r4, #16]
 800a00a:	6165      	str	r5, [r4, #20]
 800a00c:	444e      	add	r6, r9
 800a00e:	eba5 0509 	sub.w	r5, r5, r9
 800a012:	6026      	str	r6, [r4, #0]
 800a014:	60a5      	str	r5, [r4, #8]
 800a016:	463e      	mov	r6, r7
 800a018:	42be      	cmp	r6, r7
 800a01a:	d900      	bls.n	800a01e <__ssputs_r+0x72>
 800a01c:	463e      	mov	r6, r7
 800a01e:	6820      	ldr	r0, [r4, #0]
 800a020:	4632      	mov	r2, r6
 800a022:	4641      	mov	r1, r8
 800a024:	f000 f9c6 	bl	800a3b4 <memmove>
 800a028:	68a3      	ldr	r3, [r4, #8]
 800a02a:	1b9b      	subs	r3, r3, r6
 800a02c:	60a3      	str	r3, [r4, #8]
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	4433      	add	r3, r6
 800a032:	6023      	str	r3, [r4, #0]
 800a034:	2000      	movs	r0, #0
 800a036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a03a:	462a      	mov	r2, r5
 800a03c:	f000 fd89 	bl	800ab52 <_realloc_r>
 800a040:	4606      	mov	r6, r0
 800a042:	2800      	cmp	r0, #0
 800a044:	d1e0      	bne.n	800a008 <__ssputs_r+0x5c>
 800a046:	6921      	ldr	r1, [r4, #16]
 800a048:	4650      	mov	r0, sl
 800a04a:	f7fe fb79 	bl	8008740 <_free_r>
 800a04e:	230c      	movs	r3, #12
 800a050:	f8ca 3000 	str.w	r3, [sl]
 800a054:	89a3      	ldrh	r3, [r4, #12]
 800a056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a05a:	81a3      	strh	r3, [r4, #12]
 800a05c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a060:	e7e9      	b.n	800a036 <__ssputs_r+0x8a>
	...

0800a064 <_svfiprintf_r>:
 800a064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a068:	4698      	mov	r8, r3
 800a06a:	898b      	ldrh	r3, [r1, #12]
 800a06c:	061b      	lsls	r3, r3, #24
 800a06e:	b09d      	sub	sp, #116	@ 0x74
 800a070:	4607      	mov	r7, r0
 800a072:	460d      	mov	r5, r1
 800a074:	4614      	mov	r4, r2
 800a076:	d510      	bpl.n	800a09a <_svfiprintf_r+0x36>
 800a078:	690b      	ldr	r3, [r1, #16]
 800a07a:	b973      	cbnz	r3, 800a09a <_svfiprintf_r+0x36>
 800a07c:	2140      	movs	r1, #64	@ 0x40
 800a07e:	f7fe fbd3 	bl	8008828 <_malloc_r>
 800a082:	6028      	str	r0, [r5, #0]
 800a084:	6128      	str	r0, [r5, #16]
 800a086:	b930      	cbnz	r0, 800a096 <_svfiprintf_r+0x32>
 800a088:	230c      	movs	r3, #12
 800a08a:	603b      	str	r3, [r7, #0]
 800a08c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a090:	b01d      	add	sp, #116	@ 0x74
 800a092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a096:	2340      	movs	r3, #64	@ 0x40
 800a098:	616b      	str	r3, [r5, #20]
 800a09a:	2300      	movs	r3, #0
 800a09c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a09e:	2320      	movs	r3, #32
 800a0a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a0a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0a8:	2330      	movs	r3, #48	@ 0x30
 800a0aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a248 <_svfiprintf_r+0x1e4>
 800a0ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a0b2:	f04f 0901 	mov.w	r9, #1
 800a0b6:	4623      	mov	r3, r4
 800a0b8:	469a      	mov	sl, r3
 800a0ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0be:	b10a      	cbz	r2, 800a0c4 <_svfiprintf_r+0x60>
 800a0c0:	2a25      	cmp	r2, #37	@ 0x25
 800a0c2:	d1f9      	bne.n	800a0b8 <_svfiprintf_r+0x54>
 800a0c4:	ebba 0b04 	subs.w	fp, sl, r4
 800a0c8:	d00b      	beq.n	800a0e2 <_svfiprintf_r+0x7e>
 800a0ca:	465b      	mov	r3, fp
 800a0cc:	4622      	mov	r2, r4
 800a0ce:	4629      	mov	r1, r5
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	f7ff ff6b 	bl	8009fac <__ssputs_r>
 800a0d6:	3001      	adds	r0, #1
 800a0d8:	f000 80a7 	beq.w	800a22a <_svfiprintf_r+0x1c6>
 800a0dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0de:	445a      	add	r2, fp
 800a0e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f000 809f 	beq.w	800a22a <_svfiprintf_r+0x1c6>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a0f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0f6:	f10a 0a01 	add.w	sl, sl, #1
 800a0fa:	9304      	str	r3, [sp, #16]
 800a0fc:	9307      	str	r3, [sp, #28]
 800a0fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a102:	931a      	str	r3, [sp, #104]	@ 0x68
 800a104:	4654      	mov	r4, sl
 800a106:	2205      	movs	r2, #5
 800a108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a10c:	484e      	ldr	r0, [pc, #312]	@ (800a248 <_svfiprintf_r+0x1e4>)
 800a10e:	f7f6 f887 	bl	8000220 <memchr>
 800a112:	9a04      	ldr	r2, [sp, #16]
 800a114:	b9d8      	cbnz	r0, 800a14e <_svfiprintf_r+0xea>
 800a116:	06d0      	lsls	r0, r2, #27
 800a118:	bf44      	itt	mi
 800a11a:	2320      	movmi	r3, #32
 800a11c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a120:	0711      	lsls	r1, r2, #28
 800a122:	bf44      	itt	mi
 800a124:	232b      	movmi	r3, #43	@ 0x2b
 800a126:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a12a:	f89a 3000 	ldrb.w	r3, [sl]
 800a12e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a130:	d015      	beq.n	800a15e <_svfiprintf_r+0xfa>
 800a132:	9a07      	ldr	r2, [sp, #28]
 800a134:	4654      	mov	r4, sl
 800a136:	2000      	movs	r0, #0
 800a138:	f04f 0c0a 	mov.w	ip, #10
 800a13c:	4621      	mov	r1, r4
 800a13e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a142:	3b30      	subs	r3, #48	@ 0x30
 800a144:	2b09      	cmp	r3, #9
 800a146:	d94b      	bls.n	800a1e0 <_svfiprintf_r+0x17c>
 800a148:	b1b0      	cbz	r0, 800a178 <_svfiprintf_r+0x114>
 800a14a:	9207      	str	r2, [sp, #28]
 800a14c:	e014      	b.n	800a178 <_svfiprintf_r+0x114>
 800a14e:	eba0 0308 	sub.w	r3, r0, r8
 800a152:	fa09 f303 	lsl.w	r3, r9, r3
 800a156:	4313      	orrs	r3, r2
 800a158:	9304      	str	r3, [sp, #16]
 800a15a:	46a2      	mov	sl, r4
 800a15c:	e7d2      	b.n	800a104 <_svfiprintf_r+0xa0>
 800a15e:	9b03      	ldr	r3, [sp, #12]
 800a160:	1d19      	adds	r1, r3, #4
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	9103      	str	r1, [sp, #12]
 800a166:	2b00      	cmp	r3, #0
 800a168:	bfbb      	ittet	lt
 800a16a:	425b      	neglt	r3, r3
 800a16c:	f042 0202 	orrlt.w	r2, r2, #2
 800a170:	9307      	strge	r3, [sp, #28]
 800a172:	9307      	strlt	r3, [sp, #28]
 800a174:	bfb8      	it	lt
 800a176:	9204      	strlt	r2, [sp, #16]
 800a178:	7823      	ldrb	r3, [r4, #0]
 800a17a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a17c:	d10a      	bne.n	800a194 <_svfiprintf_r+0x130>
 800a17e:	7863      	ldrb	r3, [r4, #1]
 800a180:	2b2a      	cmp	r3, #42	@ 0x2a
 800a182:	d132      	bne.n	800a1ea <_svfiprintf_r+0x186>
 800a184:	9b03      	ldr	r3, [sp, #12]
 800a186:	1d1a      	adds	r2, r3, #4
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	9203      	str	r2, [sp, #12]
 800a18c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a190:	3402      	adds	r4, #2
 800a192:	9305      	str	r3, [sp, #20]
 800a194:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a258 <_svfiprintf_r+0x1f4>
 800a198:	7821      	ldrb	r1, [r4, #0]
 800a19a:	2203      	movs	r2, #3
 800a19c:	4650      	mov	r0, sl
 800a19e:	f7f6 f83f 	bl	8000220 <memchr>
 800a1a2:	b138      	cbz	r0, 800a1b4 <_svfiprintf_r+0x150>
 800a1a4:	9b04      	ldr	r3, [sp, #16]
 800a1a6:	eba0 000a 	sub.w	r0, r0, sl
 800a1aa:	2240      	movs	r2, #64	@ 0x40
 800a1ac:	4082      	lsls	r2, r0
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	3401      	adds	r4, #1
 800a1b2:	9304      	str	r3, [sp, #16]
 800a1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b8:	4824      	ldr	r0, [pc, #144]	@ (800a24c <_svfiprintf_r+0x1e8>)
 800a1ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a1be:	2206      	movs	r2, #6
 800a1c0:	f7f6 f82e 	bl	8000220 <memchr>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d036      	beq.n	800a236 <_svfiprintf_r+0x1d2>
 800a1c8:	4b21      	ldr	r3, [pc, #132]	@ (800a250 <_svfiprintf_r+0x1ec>)
 800a1ca:	bb1b      	cbnz	r3, 800a214 <_svfiprintf_r+0x1b0>
 800a1cc:	9b03      	ldr	r3, [sp, #12]
 800a1ce:	3307      	adds	r3, #7
 800a1d0:	f023 0307 	bic.w	r3, r3, #7
 800a1d4:	3308      	adds	r3, #8
 800a1d6:	9303      	str	r3, [sp, #12]
 800a1d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1da:	4433      	add	r3, r6
 800a1dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1de:	e76a      	b.n	800a0b6 <_svfiprintf_r+0x52>
 800a1e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1e4:	460c      	mov	r4, r1
 800a1e6:	2001      	movs	r0, #1
 800a1e8:	e7a8      	b.n	800a13c <_svfiprintf_r+0xd8>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	3401      	adds	r4, #1
 800a1ee:	9305      	str	r3, [sp, #20]
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	f04f 0c0a 	mov.w	ip, #10
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1fc:	3a30      	subs	r2, #48	@ 0x30
 800a1fe:	2a09      	cmp	r2, #9
 800a200:	d903      	bls.n	800a20a <_svfiprintf_r+0x1a6>
 800a202:	2b00      	cmp	r3, #0
 800a204:	d0c6      	beq.n	800a194 <_svfiprintf_r+0x130>
 800a206:	9105      	str	r1, [sp, #20]
 800a208:	e7c4      	b.n	800a194 <_svfiprintf_r+0x130>
 800a20a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a20e:	4604      	mov	r4, r0
 800a210:	2301      	movs	r3, #1
 800a212:	e7f0      	b.n	800a1f6 <_svfiprintf_r+0x192>
 800a214:	ab03      	add	r3, sp, #12
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	462a      	mov	r2, r5
 800a21a:	4b0e      	ldr	r3, [pc, #56]	@ (800a254 <_svfiprintf_r+0x1f0>)
 800a21c:	a904      	add	r1, sp, #16
 800a21e:	4638      	mov	r0, r7
 800a220:	f7fc fcc8 	bl	8006bb4 <_printf_float>
 800a224:	1c42      	adds	r2, r0, #1
 800a226:	4606      	mov	r6, r0
 800a228:	d1d6      	bne.n	800a1d8 <_svfiprintf_r+0x174>
 800a22a:	89ab      	ldrh	r3, [r5, #12]
 800a22c:	065b      	lsls	r3, r3, #25
 800a22e:	f53f af2d 	bmi.w	800a08c <_svfiprintf_r+0x28>
 800a232:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a234:	e72c      	b.n	800a090 <_svfiprintf_r+0x2c>
 800a236:	ab03      	add	r3, sp, #12
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	462a      	mov	r2, r5
 800a23c:	4b05      	ldr	r3, [pc, #20]	@ (800a254 <_svfiprintf_r+0x1f0>)
 800a23e:	a904      	add	r1, sp, #16
 800a240:	4638      	mov	r0, r7
 800a242:	f7fc ff4f 	bl	80070e4 <_printf_i>
 800a246:	e7ed      	b.n	800a224 <_svfiprintf_r+0x1c0>
 800a248:	0800b571 	.word	0x0800b571
 800a24c:	0800b57b 	.word	0x0800b57b
 800a250:	08006bb5 	.word	0x08006bb5
 800a254:	08009fad 	.word	0x08009fad
 800a258:	0800b577 	.word	0x0800b577

0800a25c <__sflush_r>:
 800a25c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a264:	0716      	lsls	r6, r2, #28
 800a266:	4605      	mov	r5, r0
 800a268:	460c      	mov	r4, r1
 800a26a:	d454      	bmi.n	800a316 <__sflush_r+0xba>
 800a26c:	684b      	ldr	r3, [r1, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	dc02      	bgt.n	800a278 <__sflush_r+0x1c>
 800a272:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a274:	2b00      	cmp	r3, #0
 800a276:	dd48      	ble.n	800a30a <__sflush_r+0xae>
 800a278:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a27a:	2e00      	cmp	r6, #0
 800a27c:	d045      	beq.n	800a30a <__sflush_r+0xae>
 800a27e:	2300      	movs	r3, #0
 800a280:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a284:	682f      	ldr	r7, [r5, #0]
 800a286:	6a21      	ldr	r1, [r4, #32]
 800a288:	602b      	str	r3, [r5, #0]
 800a28a:	d030      	beq.n	800a2ee <__sflush_r+0x92>
 800a28c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a28e:	89a3      	ldrh	r3, [r4, #12]
 800a290:	0759      	lsls	r1, r3, #29
 800a292:	d505      	bpl.n	800a2a0 <__sflush_r+0x44>
 800a294:	6863      	ldr	r3, [r4, #4]
 800a296:	1ad2      	subs	r2, r2, r3
 800a298:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a29a:	b10b      	cbz	r3, 800a2a0 <__sflush_r+0x44>
 800a29c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a29e:	1ad2      	subs	r2, r2, r3
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2a4:	6a21      	ldr	r1, [r4, #32]
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	47b0      	blx	r6
 800a2aa:	1c43      	adds	r3, r0, #1
 800a2ac:	89a3      	ldrh	r3, [r4, #12]
 800a2ae:	d106      	bne.n	800a2be <__sflush_r+0x62>
 800a2b0:	6829      	ldr	r1, [r5, #0]
 800a2b2:	291d      	cmp	r1, #29
 800a2b4:	d82b      	bhi.n	800a30e <__sflush_r+0xb2>
 800a2b6:	4a2a      	ldr	r2, [pc, #168]	@ (800a360 <__sflush_r+0x104>)
 800a2b8:	410a      	asrs	r2, r1
 800a2ba:	07d6      	lsls	r6, r2, #31
 800a2bc:	d427      	bmi.n	800a30e <__sflush_r+0xb2>
 800a2be:	2200      	movs	r2, #0
 800a2c0:	6062      	str	r2, [r4, #4]
 800a2c2:	04d9      	lsls	r1, r3, #19
 800a2c4:	6922      	ldr	r2, [r4, #16]
 800a2c6:	6022      	str	r2, [r4, #0]
 800a2c8:	d504      	bpl.n	800a2d4 <__sflush_r+0x78>
 800a2ca:	1c42      	adds	r2, r0, #1
 800a2cc:	d101      	bne.n	800a2d2 <__sflush_r+0x76>
 800a2ce:	682b      	ldr	r3, [r5, #0]
 800a2d0:	b903      	cbnz	r3, 800a2d4 <__sflush_r+0x78>
 800a2d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a2d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2d6:	602f      	str	r7, [r5, #0]
 800a2d8:	b1b9      	cbz	r1, 800a30a <__sflush_r+0xae>
 800a2da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2de:	4299      	cmp	r1, r3
 800a2e0:	d002      	beq.n	800a2e8 <__sflush_r+0x8c>
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	f7fe fa2c 	bl	8008740 <_free_r>
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2ec:	e00d      	b.n	800a30a <__sflush_r+0xae>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	47b0      	blx	r6
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	1c50      	adds	r0, r2, #1
 800a2f8:	d1c9      	bne.n	800a28e <__sflush_r+0x32>
 800a2fa:	682b      	ldr	r3, [r5, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d0c6      	beq.n	800a28e <__sflush_r+0x32>
 800a300:	2b1d      	cmp	r3, #29
 800a302:	d001      	beq.n	800a308 <__sflush_r+0xac>
 800a304:	2b16      	cmp	r3, #22
 800a306:	d11e      	bne.n	800a346 <__sflush_r+0xea>
 800a308:	602f      	str	r7, [r5, #0]
 800a30a:	2000      	movs	r0, #0
 800a30c:	e022      	b.n	800a354 <__sflush_r+0xf8>
 800a30e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a312:	b21b      	sxth	r3, r3
 800a314:	e01b      	b.n	800a34e <__sflush_r+0xf2>
 800a316:	690f      	ldr	r7, [r1, #16]
 800a318:	2f00      	cmp	r7, #0
 800a31a:	d0f6      	beq.n	800a30a <__sflush_r+0xae>
 800a31c:	0793      	lsls	r3, r2, #30
 800a31e:	680e      	ldr	r6, [r1, #0]
 800a320:	bf08      	it	eq
 800a322:	694b      	ldreq	r3, [r1, #20]
 800a324:	600f      	str	r7, [r1, #0]
 800a326:	bf18      	it	ne
 800a328:	2300      	movne	r3, #0
 800a32a:	eba6 0807 	sub.w	r8, r6, r7
 800a32e:	608b      	str	r3, [r1, #8]
 800a330:	f1b8 0f00 	cmp.w	r8, #0
 800a334:	dde9      	ble.n	800a30a <__sflush_r+0xae>
 800a336:	6a21      	ldr	r1, [r4, #32]
 800a338:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a33a:	4643      	mov	r3, r8
 800a33c:	463a      	mov	r2, r7
 800a33e:	4628      	mov	r0, r5
 800a340:	47b0      	blx	r6
 800a342:	2800      	cmp	r0, #0
 800a344:	dc08      	bgt.n	800a358 <__sflush_r+0xfc>
 800a346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a34a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a34e:	81a3      	strh	r3, [r4, #12]
 800a350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a358:	4407      	add	r7, r0
 800a35a:	eba8 0800 	sub.w	r8, r8, r0
 800a35e:	e7e7      	b.n	800a330 <__sflush_r+0xd4>
 800a360:	dfbffffe 	.word	0xdfbffffe

0800a364 <_fflush_r>:
 800a364:	b538      	push	{r3, r4, r5, lr}
 800a366:	690b      	ldr	r3, [r1, #16]
 800a368:	4605      	mov	r5, r0
 800a36a:	460c      	mov	r4, r1
 800a36c:	b913      	cbnz	r3, 800a374 <_fflush_r+0x10>
 800a36e:	2500      	movs	r5, #0
 800a370:	4628      	mov	r0, r5
 800a372:	bd38      	pop	{r3, r4, r5, pc}
 800a374:	b118      	cbz	r0, 800a37e <_fflush_r+0x1a>
 800a376:	6a03      	ldr	r3, [r0, #32]
 800a378:	b90b      	cbnz	r3, 800a37e <_fflush_r+0x1a>
 800a37a:	f7fd fa73 	bl	8007864 <__sinit>
 800a37e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d0f3      	beq.n	800a36e <_fflush_r+0xa>
 800a386:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a388:	07d0      	lsls	r0, r2, #31
 800a38a:	d404      	bmi.n	800a396 <_fflush_r+0x32>
 800a38c:	0599      	lsls	r1, r3, #22
 800a38e:	d402      	bmi.n	800a396 <_fflush_r+0x32>
 800a390:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a392:	f7fd fb7e 	bl	8007a92 <__retarget_lock_acquire_recursive>
 800a396:	4628      	mov	r0, r5
 800a398:	4621      	mov	r1, r4
 800a39a:	f7ff ff5f 	bl	800a25c <__sflush_r>
 800a39e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3a0:	07da      	lsls	r2, r3, #31
 800a3a2:	4605      	mov	r5, r0
 800a3a4:	d4e4      	bmi.n	800a370 <_fflush_r+0xc>
 800a3a6:	89a3      	ldrh	r3, [r4, #12]
 800a3a8:	059b      	lsls	r3, r3, #22
 800a3aa:	d4e1      	bmi.n	800a370 <_fflush_r+0xc>
 800a3ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3ae:	f7fd fb71 	bl	8007a94 <__retarget_lock_release_recursive>
 800a3b2:	e7dd      	b.n	800a370 <_fflush_r+0xc>

0800a3b4 <memmove>:
 800a3b4:	4288      	cmp	r0, r1
 800a3b6:	b510      	push	{r4, lr}
 800a3b8:	eb01 0402 	add.w	r4, r1, r2
 800a3bc:	d902      	bls.n	800a3c4 <memmove+0x10>
 800a3be:	4284      	cmp	r4, r0
 800a3c0:	4623      	mov	r3, r4
 800a3c2:	d807      	bhi.n	800a3d4 <memmove+0x20>
 800a3c4:	1e43      	subs	r3, r0, #1
 800a3c6:	42a1      	cmp	r1, r4
 800a3c8:	d008      	beq.n	800a3dc <memmove+0x28>
 800a3ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3d2:	e7f8      	b.n	800a3c6 <memmove+0x12>
 800a3d4:	4402      	add	r2, r0
 800a3d6:	4601      	mov	r1, r0
 800a3d8:	428a      	cmp	r2, r1
 800a3da:	d100      	bne.n	800a3de <memmove+0x2a>
 800a3dc:	bd10      	pop	{r4, pc}
 800a3de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3e6:	e7f7      	b.n	800a3d8 <memmove+0x24>

0800a3e8 <strncmp>:
 800a3e8:	b510      	push	{r4, lr}
 800a3ea:	b16a      	cbz	r2, 800a408 <strncmp+0x20>
 800a3ec:	3901      	subs	r1, #1
 800a3ee:	1884      	adds	r4, r0, r2
 800a3f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d103      	bne.n	800a404 <strncmp+0x1c>
 800a3fc:	42a0      	cmp	r0, r4
 800a3fe:	d001      	beq.n	800a404 <strncmp+0x1c>
 800a400:	2a00      	cmp	r2, #0
 800a402:	d1f5      	bne.n	800a3f0 <strncmp+0x8>
 800a404:	1ad0      	subs	r0, r2, r3
 800a406:	bd10      	pop	{r4, pc}
 800a408:	4610      	mov	r0, r2
 800a40a:	e7fc      	b.n	800a406 <strncmp+0x1e>

0800a40c <_sbrk_r>:
 800a40c:	b538      	push	{r3, r4, r5, lr}
 800a40e:	4d06      	ldr	r5, [pc, #24]	@ (800a428 <_sbrk_r+0x1c>)
 800a410:	2300      	movs	r3, #0
 800a412:	4604      	mov	r4, r0
 800a414:	4608      	mov	r0, r1
 800a416:	602b      	str	r3, [r5, #0]
 800a418:	f7f7 fbea 	bl	8001bf0 <_sbrk>
 800a41c:	1c43      	adds	r3, r0, #1
 800a41e:	d102      	bne.n	800a426 <_sbrk_r+0x1a>
 800a420:	682b      	ldr	r3, [r5, #0]
 800a422:	b103      	cbz	r3, 800a426 <_sbrk_r+0x1a>
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	bd38      	pop	{r3, r4, r5, pc}
 800a428:	200004a8 	.word	0x200004a8

0800a42c <memcpy>:
 800a42c:	440a      	add	r2, r1
 800a42e:	4291      	cmp	r1, r2
 800a430:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a434:	d100      	bne.n	800a438 <memcpy+0xc>
 800a436:	4770      	bx	lr
 800a438:	b510      	push	{r4, lr}
 800a43a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a43e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a442:	4291      	cmp	r1, r2
 800a444:	d1f9      	bne.n	800a43a <memcpy+0xe>
 800a446:	bd10      	pop	{r4, pc}

0800a448 <nan>:
 800a448:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a450 <nan+0x8>
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	00000000 	.word	0x00000000
 800a454:	7ff80000 	.word	0x7ff80000

0800a458 <__assert_func>:
 800a458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a45a:	4614      	mov	r4, r2
 800a45c:	461a      	mov	r2, r3
 800a45e:	4b09      	ldr	r3, [pc, #36]	@ (800a484 <__assert_func+0x2c>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4605      	mov	r5, r0
 800a464:	68d8      	ldr	r0, [r3, #12]
 800a466:	b954      	cbnz	r4, 800a47e <__assert_func+0x26>
 800a468:	4b07      	ldr	r3, [pc, #28]	@ (800a488 <__assert_func+0x30>)
 800a46a:	461c      	mov	r4, r3
 800a46c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a470:	9100      	str	r1, [sp, #0]
 800a472:	462b      	mov	r3, r5
 800a474:	4905      	ldr	r1, [pc, #20]	@ (800a48c <__assert_func+0x34>)
 800a476:	f000 fba7 	bl	800abc8 <fiprintf>
 800a47a:	f000 fbb7 	bl	800abec <abort>
 800a47e:	4b04      	ldr	r3, [pc, #16]	@ (800a490 <__assert_func+0x38>)
 800a480:	e7f4      	b.n	800a46c <__assert_func+0x14>
 800a482:	bf00      	nop
 800a484:	20000018 	.word	0x20000018
 800a488:	0800b5c5 	.word	0x0800b5c5
 800a48c:	0800b597 	.word	0x0800b597
 800a490:	0800b58a 	.word	0x0800b58a

0800a494 <_calloc_r>:
 800a494:	b570      	push	{r4, r5, r6, lr}
 800a496:	fba1 5402 	umull	r5, r4, r1, r2
 800a49a:	b93c      	cbnz	r4, 800a4ac <_calloc_r+0x18>
 800a49c:	4629      	mov	r1, r5
 800a49e:	f7fe f9c3 	bl	8008828 <_malloc_r>
 800a4a2:	4606      	mov	r6, r0
 800a4a4:	b928      	cbnz	r0, 800a4b2 <_calloc_r+0x1e>
 800a4a6:	2600      	movs	r6, #0
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	bd70      	pop	{r4, r5, r6, pc}
 800a4ac:	220c      	movs	r2, #12
 800a4ae:	6002      	str	r2, [r0, #0]
 800a4b0:	e7f9      	b.n	800a4a6 <_calloc_r+0x12>
 800a4b2:	462a      	mov	r2, r5
 800a4b4:	4621      	mov	r1, r4
 800a4b6:	f7fd fa6e 	bl	8007996 <memset>
 800a4ba:	e7f5      	b.n	800a4a8 <_calloc_r+0x14>

0800a4bc <rshift>:
 800a4bc:	6903      	ldr	r3, [r0, #16]
 800a4be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a4c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a4ca:	f100 0414 	add.w	r4, r0, #20
 800a4ce:	dd45      	ble.n	800a55c <rshift+0xa0>
 800a4d0:	f011 011f 	ands.w	r1, r1, #31
 800a4d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a4d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a4dc:	d10c      	bne.n	800a4f8 <rshift+0x3c>
 800a4de:	f100 0710 	add.w	r7, r0, #16
 800a4e2:	4629      	mov	r1, r5
 800a4e4:	42b1      	cmp	r1, r6
 800a4e6:	d334      	bcc.n	800a552 <rshift+0x96>
 800a4e8:	1a9b      	subs	r3, r3, r2
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	1eea      	subs	r2, r5, #3
 800a4ee:	4296      	cmp	r6, r2
 800a4f0:	bf38      	it	cc
 800a4f2:	2300      	movcc	r3, #0
 800a4f4:	4423      	add	r3, r4
 800a4f6:	e015      	b.n	800a524 <rshift+0x68>
 800a4f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a4fc:	f1c1 0820 	rsb	r8, r1, #32
 800a500:	40cf      	lsrs	r7, r1
 800a502:	f105 0e04 	add.w	lr, r5, #4
 800a506:	46a1      	mov	r9, r4
 800a508:	4576      	cmp	r6, lr
 800a50a:	46f4      	mov	ip, lr
 800a50c:	d815      	bhi.n	800a53a <rshift+0x7e>
 800a50e:	1a9a      	subs	r2, r3, r2
 800a510:	0092      	lsls	r2, r2, #2
 800a512:	3a04      	subs	r2, #4
 800a514:	3501      	adds	r5, #1
 800a516:	42ae      	cmp	r6, r5
 800a518:	bf38      	it	cc
 800a51a:	2200      	movcc	r2, #0
 800a51c:	18a3      	adds	r3, r4, r2
 800a51e:	50a7      	str	r7, [r4, r2]
 800a520:	b107      	cbz	r7, 800a524 <rshift+0x68>
 800a522:	3304      	adds	r3, #4
 800a524:	1b1a      	subs	r2, r3, r4
 800a526:	42a3      	cmp	r3, r4
 800a528:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a52c:	bf08      	it	eq
 800a52e:	2300      	moveq	r3, #0
 800a530:	6102      	str	r2, [r0, #16]
 800a532:	bf08      	it	eq
 800a534:	6143      	streq	r3, [r0, #20]
 800a536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a53a:	f8dc c000 	ldr.w	ip, [ip]
 800a53e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a542:	ea4c 0707 	orr.w	r7, ip, r7
 800a546:	f849 7b04 	str.w	r7, [r9], #4
 800a54a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a54e:	40cf      	lsrs	r7, r1
 800a550:	e7da      	b.n	800a508 <rshift+0x4c>
 800a552:	f851 cb04 	ldr.w	ip, [r1], #4
 800a556:	f847 cf04 	str.w	ip, [r7, #4]!
 800a55a:	e7c3      	b.n	800a4e4 <rshift+0x28>
 800a55c:	4623      	mov	r3, r4
 800a55e:	e7e1      	b.n	800a524 <rshift+0x68>

0800a560 <__hexdig_fun>:
 800a560:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a564:	2b09      	cmp	r3, #9
 800a566:	d802      	bhi.n	800a56e <__hexdig_fun+0xe>
 800a568:	3820      	subs	r0, #32
 800a56a:	b2c0      	uxtb	r0, r0
 800a56c:	4770      	bx	lr
 800a56e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a572:	2b05      	cmp	r3, #5
 800a574:	d801      	bhi.n	800a57a <__hexdig_fun+0x1a>
 800a576:	3847      	subs	r0, #71	@ 0x47
 800a578:	e7f7      	b.n	800a56a <__hexdig_fun+0xa>
 800a57a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a57e:	2b05      	cmp	r3, #5
 800a580:	d801      	bhi.n	800a586 <__hexdig_fun+0x26>
 800a582:	3827      	subs	r0, #39	@ 0x27
 800a584:	e7f1      	b.n	800a56a <__hexdig_fun+0xa>
 800a586:	2000      	movs	r0, #0
 800a588:	4770      	bx	lr
	...

0800a58c <__gethex>:
 800a58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a590:	b085      	sub	sp, #20
 800a592:	468a      	mov	sl, r1
 800a594:	9302      	str	r3, [sp, #8]
 800a596:	680b      	ldr	r3, [r1, #0]
 800a598:	9001      	str	r0, [sp, #4]
 800a59a:	4690      	mov	r8, r2
 800a59c:	1c9c      	adds	r4, r3, #2
 800a59e:	46a1      	mov	r9, r4
 800a5a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a5a4:	2830      	cmp	r0, #48	@ 0x30
 800a5a6:	d0fa      	beq.n	800a59e <__gethex+0x12>
 800a5a8:	eba9 0303 	sub.w	r3, r9, r3
 800a5ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800a5b0:	f7ff ffd6 	bl	800a560 <__hexdig_fun>
 800a5b4:	4605      	mov	r5, r0
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	d168      	bne.n	800a68c <__gethex+0x100>
 800a5ba:	49a0      	ldr	r1, [pc, #640]	@ (800a83c <__gethex+0x2b0>)
 800a5bc:	2201      	movs	r2, #1
 800a5be:	4648      	mov	r0, r9
 800a5c0:	f7ff ff12 	bl	800a3e8 <strncmp>
 800a5c4:	4607      	mov	r7, r0
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	d167      	bne.n	800a69a <__gethex+0x10e>
 800a5ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a5ce:	4626      	mov	r6, r4
 800a5d0:	f7ff ffc6 	bl	800a560 <__hexdig_fun>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d062      	beq.n	800a69e <__gethex+0x112>
 800a5d8:	4623      	mov	r3, r4
 800a5da:	7818      	ldrb	r0, [r3, #0]
 800a5dc:	2830      	cmp	r0, #48	@ 0x30
 800a5de:	4699      	mov	r9, r3
 800a5e0:	f103 0301 	add.w	r3, r3, #1
 800a5e4:	d0f9      	beq.n	800a5da <__gethex+0x4e>
 800a5e6:	f7ff ffbb 	bl	800a560 <__hexdig_fun>
 800a5ea:	fab0 f580 	clz	r5, r0
 800a5ee:	096d      	lsrs	r5, r5, #5
 800a5f0:	f04f 0b01 	mov.w	fp, #1
 800a5f4:	464a      	mov	r2, r9
 800a5f6:	4616      	mov	r6, r2
 800a5f8:	3201      	adds	r2, #1
 800a5fa:	7830      	ldrb	r0, [r6, #0]
 800a5fc:	f7ff ffb0 	bl	800a560 <__hexdig_fun>
 800a600:	2800      	cmp	r0, #0
 800a602:	d1f8      	bne.n	800a5f6 <__gethex+0x6a>
 800a604:	498d      	ldr	r1, [pc, #564]	@ (800a83c <__gethex+0x2b0>)
 800a606:	2201      	movs	r2, #1
 800a608:	4630      	mov	r0, r6
 800a60a:	f7ff feed 	bl	800a3e8 <strncmp>
 800a60e:	2800      	cmp	r0, #0
 800a610:	d13f      	bne.n	800a692 <__gethex+0x106>
 800a612:	b944      	cbnz	r4, 800a626 <__gethex+0x9a>
 800a614:	1c74      	adds	r4, r6, #1
 800a616:	4622      	mov	r2, r4
 800a618:	4616      	mov	r6, r2
 800a61a:	3201      	adds	r2, #1
 800a61c:	7830      	ldrb	r0, [r6, #0]
 800a61e:	f7ff ff9f 	bl	800a560 <__hexdig_fun>
 800a622:	2800      	cmp	r0, #0
 800a624:	d1f8      	bne.n	800a618 <__gethex+0x8c>
 800a626:	1ba4      	subs	r4, r4, r6
 800a628:	00a7      	lsls	r7, r4, #2
 800a62a:	7833      	ldrb	r3, [r6, #0]
 800a62c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a630:	2b50      	cmp	r3, #80	@ 0x50
 800a632:	d13e      	bne.n	800a6b2 <__gethex+0x126>
 800a634:	7873      	ldrb	r3, [r6, #1]
 800a636:	2b2b      	cmp	r3, #43	@ 0x2b
 800a638:	d033      	beq.n	800a6a2 <__gethex+0x116>
 800a63a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a63c:	d034      	beq.n	800a6a8 <__gethex+0x11c>
 800a63e:	1c71      	adds	r1, r6, #1
 800a640:	2400      	movs	r4, #0
 800a642:	7808      	ldrb	r0, [r1, #0]
 800a644:	f7ff ff8c 	bl	800a560 <__hexdig_fun>
 800a648:	1e43      	subs	r3, r0, #1
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	2b18      	cmp	r3, #24
 800a64e:	d830      	bhi.n	800a6b2 <__gethex+0x126>
 800a650:	f1a0 0210 	sub.w	r2, r0, #16
 800a654:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a658:	f7ff ff82 	bl	800a560 <__hexdig_fun>
 800a65c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a660:	fa5f fc8c 	uxtb.w	ip, ip
 800a664:	f1bc 0f18 	cmp.w	ip, #24
 800a668:	f04f 030a 	mov.w	r3, #10
 800a66c:	d91e      	bls.n	800a6ac <__gethex+0x120>
 800a66e:	b104      	cbz	r4, 800a672 <__gethex+0xe6>
 800a670:	4252      	negs	r2, r2
 800a672:	4417      	add	r7, r2
 800a674:	f8ca 1000 	str.w	r1, [sl]
 800a678:	b1ed      	cbz	r5, 800a6b6 <__gethex+0x12a>
 800a67a:	f1bb 0f00 	cmp.w	fp, #0
 800a67e:	bf0c      	ite	eq
 800a680:	2506      	moveq	r5, #6
 800a682:	2500      	movne	r5, #0
 800a684:	4628      	mov	r0, r5
 800a686:	b005      	add	sp, #20
 800a688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a68c:	2500      	movs	r5, #0
 800a68e:	462c      	mov	r4, r5
 800a690:	e7b0      	b.n	800a5f4 <__gethex+0x68>
 800a692:	2c00      	cmp	r4, #0
 800a694:	d1c7      	bne.n	800a626 <__gethex+0x9a>
 800a696:	4627      	mov	r7, r4
 800a698:	e7c7      	b.n	800a62a <__gethex+0x9e>
 800a69a:	464e      	mov	r6, r9
 800a69c:	462f      	mov	r7, r5
 800a69e:	2501      	movs	r5, #1
 800a6a0:	e7c3      	b.n	800a62a <__gethex+0x9e>
 800a6a2:	2400      	movs	r4, #0
 800a6a4:	1cb1      	adds	r1, r6, #2
 800a6a6:	e7cc      	b.n	800a642 <__gethex+0xb6>
 800a6a8:	2401      	movs	r4, #1
 800a6aa:	e7fb      	b.n	800a6a4 <__gethex+0x118>
 800a6ac:	fb03 0002 	mla	r0, r3, r2, r0
 800a6b0:	e7ce      	b.n	800a650 <__gethex+0xc4>
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	e7de      	b.n	800a674 <__gethex+0xe8>
 800a6b6:	eba6 0309 	sub.w	r3, r6, r9
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	4629      	mov	r1, r5
 800a6be:	2b07      	cmp	r3, #7
 800a6c0:	dc0a      	bgt.n	800a6d8 <__gethex+0x14c>
 800a6c2:	9801      	ldr	r0, [sp, #4]
 800a6c4:	f7fe f93c 	bl	8008940 <_Balloc>
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	b940      	cbnz	r0, 800a6de <__gethex+0x152>
 800a6cc:	4b5c      	ldr	r3, [pc, #368]	@ (800a840 <__gethex+0x2b4>)
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	21e4      	movs	r1, #228	@ 0xe4
 800a6d2:	485c      	ldr	r0, [pc, #368]	@ (800a844 <__gethex+0x2b8>)
 800a6d4:	f7ff fec0 	bl	800a458 <__assert_func>
 800a6d8:	3101      	adds	r1, #1
 800a6da:	105b      	asrs	r3, r3, #1
 800a6dc:	e7ef      	b.n	800a6be <__gethex+0x132>
 800a6de:	f100 0a14 	add.w	sl, r0, #20
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	4655      	mov	r5, sl
 800a6e6:	469b      	mov	fp, r3
 800a6e8:	45b1      	cmp	r9, r6
 800a6ea:	d337      	bcc.n	800a75c <__gethex+0x1d0>
 800a6ec:	f845 bb04 	str.w	fp, [r5], #4
 800a6f0:	eba5 050a 	sub.w	r5, r5, sl
 800a6f4:	10ad      	asrs	r5, r5, #2
 800a6f6:	6125      	str	r5, [r4, #16]
 800a6f8:	4658      	mov	r0, fp
 800a6fa:	f7fe fa13 	bl	8008b24 <__hi0bits>
 800a6fe:	016d      	lsls	r5, r5, #5
 800a700:	f8d8 6000 	ldr.w	r6, [r8]
 800a704:	1a2d      	subs	r5, r5, r0
 800a706:	42b5      	cmp	r5, r6
 800a708:	dd54      	ble.n	800a7b4 <__gethex+0x228>
 800a70a:	1bad      	subs	r5, r5, r6
 800a70c:	4629      	mov	r1, r5
 800a70e:	4620      	mov	r0, r4
 800a710:	f7fe fda7 	bl	8009262 <__any_on>
 800a714:	4681      	mov	r9, r0
 800a716:	b178      	cbz	r0, 800a738 <__gethex+0x1ac>
 800a718:	1e6b      	subs	r3, r5, #1
 800a71a:	1159      	asrs	r1, r3, #5
 800a71c:	f003 021f 	and.w	r2, r3, #31
 800a720:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a724:	f04f 0901 	mov.w	r9, #1
 800a728:	fa09 f202 	lsl.w	r2, r9, r2
 800a72c:	420a      	tst	r2, r1
 800a72e:	d003      	beq.n	800a738 <__gethex+0x1ac>
 800a730:	454b      	cmp	r3, r9
 800a732:	dc36      	bgt.n	800a7a2 <__gethex+0x216>
 800a734:	f04f 0902 	mov.w	r9, #2
 800a738:	4629      	mov	r1, r5
 800a73a:	4620      	mov	r0, r4
 800a73c:	f7ff febe 	bl	800a4bc <rshift>
 800a740:	442f      	add	r7, r5
 800a742:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a746:	42bb      	cmp	r3, r7
 800a748:	da42      	bge.n	800a7d0 <__gethex+0x244>
 800a74a:	9801      	ldr	r0, [sp, #4]
 800a74c:	4621      	mov	r1, r4
 800a74e:	f7fe f937 	bl	80089c0 <_Bfree>
 800a752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a754:	2300      	movs	r3, #0
 800a756:	6013      	str	r3, [r2, #0]
 800a758:	25a3      	movs	r5, #163	@ 0xa3
 800a75a:	e793      	b.n	800a684 <__gethex+0xf8>
 800a75c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a760:	2a2e      	cmp	r2, #46	@ 0x2e
 800a762:	d012      	beq.n	800a78a <__gethex+0x1fe>
 800a764:	2b20      	cmp	r3, #32
 800a766:	d104      	bne.n	800a772 <__gethex+0x1e6>
 800a768:	f845 bb04 	str.w	fp, [r5], #4
 800a76c:	f04f 0b00 	mov.w	fp, #0
 800a770:	465b      	mov	r3, fp
 800a772:	7830      	ldrb	r0, [r6, #0]
 800a774:	9303      	str	r3, [sp, #12]
 800a776:	f7ff fef3 	bl	800a560 <__hexdig_fun>
 800a77a:	9b03      	ldr	r3, [sp, #12]
 800a77c:	f000 000f 	and.w	r0, r0, #15
 800a780:	4098      	lsls	r0, r3
 800a782:	ea4b 0b00 	orr.w	fp, fp, r0
 800a786:	3304      	adds	r3, #4
 800a788:	e7ae      	b.n	800a6e8 <__gethex+0x15c>
 800a78a:	45b1      	cmp	r9, r6
 800a78c:	d8ea      	bhi.n	800a764 <__gethex+0x1d8>
 800a78e:	492b      	ldr	r1, [pc, #172]	@ (800a83c <__gethex+0x2b0>)
 800a790:	9303      	str	r3, [sp, #12]
 800a792:	2201      	movs	r2, #1
 800a794:	4630      	mov	r0, r6
 800a796:	f7ff fe27 	bl	800a3e8 <strncmp>
 800a79a:	9b03      	ldr	r3, [sp, #12]
 800a79c:	2800      	cmp	r0, #0
 800a79e:	d1e1      	bne.n	800a764 <__gethex+0x1d8>
 800a7a0:	e7a2      	b.n	800a6e8 <__gethex+0x15c>
 800a7a2:	1ea9      	subs	r1, r5, #2
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f7fe fd5c 	bl	8009262 <__any_on>
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	d0c2      	beq.n	800a734 <__gethex+0x1a8>
 800a7ae:	f04f 0903 	mov.w	r9, #3
 800a7b2:	e7c1      	b.n	800a738 <__gethex+0x1ac>
 800a7b4:	da09      	bge.n	800a7ca <__gethex+0x23e>
 800a7b6:	1b75      	subs	r5, r6, r5
 800a7b8:	4621      	mov	r1, r4
 800a7ba:	9801      	ldr	r0, [sp, #4]
 800a7bc:	462a      	mov	r2, r5
 800a7be:	f7fe fb17 	bl	8008df0 <__lshift>
 800a7c2:	1b7f      	subs	r7, r7, r5
 800a7c4:	4604      	mov	r4, r0
 800a7c6:	f100 0a14 	add.w	sl, r0, #20
 800a7ca:	f04f 0900 	mov.w	r9, #0
 800a7ce:	e7b8      	b.n	800a742 <__gethex+0x1b6>
 800a7d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a7d4:	42bd      	cmp	r5, r7
 800a7d6:	dd6f      	ble.n	800a8b8 <__gethex+0x32c>
 800a7d8:	1bed      	subs	r5, r5, r7
 800a7da:	42ae      	cmp	r6, r5
 800a7dc:	dc34      	bgt.n	800a848 <__gethex+0x2bc>
 800a7de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d022      	beq.n	800a82c <__gethex+0x2a0>
 800a7e6:	2b03      	cmp	r3, #3
 800a7e8:	d024      	beq.n	800a834 <__gethex+0x2a8>
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d115      	bne.n	800a81a <__gethex+0x28e>
 800a7ee:	42ae      	cmp	r6, r5
 800a7f0:	d113      	bne.n	800a81a <__gethex+0x28e>
 800a7f2:	2e01      	cmp	r6, #1
 800a7f4:	d10b      	bne.n	800a80e <__gethex+0x282>
 800a7f6:	9a02      	ldr	r2, [sp, #8]
 800a7f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a7fc:	6013      	str	r3, [r2, #0]
 800a7fe:	2301      	movs	r3, #1
 800a800:	6123      	str	r3, [r4, #16]
 800a802:	f8ca 3000 	str.w	r3, [sl]
 800a806:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a808:	2562      	movs	r5, #98	@ 0x62
 800a80a:	601c      	str	r4, [r3, #0]
 800a80c:	e73a      	b.n	800a684 <__gethex+0xf8>
 800a80e:	1e71      	subs	r1, r6, #1
 800a810:	4620      	mov	r0, r4
 800a812:	f7fe fd26 	bl	8009262 <__any_on>
 800a816:	2800      	cmp	r0, #0
 800a818:	d1ed      	bne.n	800a7f6 <__gethex+0x26a>
 800a81a:	9801      	ldr	r0, [sp, #4]
 800a81c:	4621      	mov	r1, r4
 800a81e:	f7fe f8cf 	bl	80089c0 <_Bfree>
 800a822:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a824:	2300      	movs	r3, #0
 800a826:	6013      	str	r3, [r2, #0]
 800a828:	2550      	movs	r5, #80	@ 0x50
 800a82a:	e72b      	b.n	800a684 <__gethex+0xf8>
 800a82c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1f3      	bne.n	800a81a <__gethex+0x28e>
 800a832:	e7e0      	b.n	800a7f6 <__gethex+0x26a>
 800a834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1dd      	bne.n	800a7f6 <__gethex+0x26a>
 800a83a:	e7ee      	b.n	800a81a <__gethex+0x28e>
 800a83c:	0800b418 	.word	0x0800b418
 800a840:	0800b2ad 	.word	0x0800b2ad
 800a844:	0800b5c6 	.word	0x0800b5c6
 800a848:	1e6f      	subs	r7, r5, #1
 800a84a:	f1b9 0f00 	cmp.w	r9, #0
 800a84e:	d130      	bne.n	800a8b2 <__gethex+0x326>
 800a850:	b127      	cbz	r7, 800a85c <__gethex+0x2d0>
 800a852:	4639      	mov	r1, r7
 800a854:	4620      	mov	r0, r4
 800a856:	f7fe fd04 	bl	8009262 <__any_on>
 800a85a:	4681      	mov	r9, r0
 800a85c:	117a      	asrs	r2, r7, #5
 800a85e:	2301      	movs	r3, #1
 800a860:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a864:	f007 071f 	and.w	r7, r7, #31
 800a868:	40bb      	lsls	r3, r7
 800a86a:	4213      	tst	r3, r2
 800a86c:	4629      	mov	r1, r5
 800a86e:	4620      	mov	r0, r4
 800a870:	bf18      	it	ne
 800a872:	f049 0902 	orrne.w	r9, r9, #2
 800a876:	f7ff fe21 	bl	800a4bc <rshift>
 800a87a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a87e:	1b76      	subs	r6, r6, r5
 800a880:	2502      	movs	r5, #2
 800a882:	f1b9 0f00 	cmp.w	r9, #0
 800a886:	d047      	beq.n	800a918 <__gethex+0x38c>
 800a888:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	d015      	beq.n	800a8bc <__gethex+0x330>
 800a890:	2b03      	cmp	r3, #3
 800a892:	d017      	beq.n	800a8c4 <__gethex+0x338>
 800a894:	2b01      	cmp	r3, #1
 800a896:	d109      	bne.n	800a8ac <__gethex+0x320>
 800a898:	f019 0f02 	tst.w	r9, #2
 800a89c:	d006      	beq.n	800a8ac <__gethex+0x320>
 800a89e:	f8da 3000 	ldr.w	r3, [sl]
 800a8a2:	ea49 0903 	orr.w	r9, r9, r3
 800a8a6:	f019 0f01 	tst.w	r9, #1
 800a8aa:	d10e      	bne.n	800a8ca <__gethex+0x33e>
 800a8ac:	f045 0510 	orr.w	r5, r5, #16
 800a8b0:	e032      	b.n	800a918 <__gethex+0x38c>
 800a8b2:	f04f 0901 	mov.w	r9, #1
 800a8b6:	e7d1      	b.n	800a85c <__gethex+0x2d0>
 800a8b8:	2501      	movs	r5, #1
 800a8ba:	e7e2      	b.n	800a882 <__gethex+0x2f6>
 800a8bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8be:	f1c3 0301 	rsb	r3, r3, #1
 800a8c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d0f0      	beq.n	800a8ac <__gethex+0x320>
 800a8ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a8ce:	f104 0314 	add.w	r3, r4, #20
 800a8d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a8d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a8da:	f04f 0c00 	mov.w	ip, #0
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8e4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a8e8:	d01b      	beq.n	800a922 <__gethex+0x396>
 800a8ea:	3201      	adds	r2, #1
 800a8ec:	6002      	str	r2, [r0, #0]
 800a8ee:	2d02      	cmp	r5, #2
 800a8f0:	f104 0314 	add.w	r3, r4, #20
 800a8f4:	d13c      	bne.n	800a970 <__gethex+0x3e4>
 800a8f6:	f8d8 2000 	ldr.w	r2, [r8]
 800a8fa:	3a01      	subs	r2, #1
 800a8fc:	42b2      	cmp	r2, r6
 800a8fe:	d109      	bne.n	800a914 <__gethex+0x388>
 800a900:	1171      	asrs	r1, r6, #5
 800a902:	2201      	movs	r2, #1
 800a904:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a908:	f006 061f 	and.w	r6, r6, #31
 800a90c:	fa02 f606 	lsl.w	r6, r2, r6
 800a910:	421e      	tst	r6, r3
 800a912:	d13a      	bne.n	800a98a <__gethex+0x3fe>
 800a914:	f045 0520 	orr.w	r5, r5, #32
 800a918:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a91a:	601c      	str	r4, [r3, #0]
 800a91c:	9b02      	ldr	r3, [sp, #8]
 800a91e:	601f      	str	r7, [r3, #0]
 800a920:	e6b0      	b.n	800a684 <__gethex+0xf8>
 800a922:	4299      	cmp	r1, r3
 800a924:	f843 cc04 	str.w	ip, [r3, #-4]
 800a928:	d8d9      	bhi.n	800a8de <__gethex+0x352>
 800a92a:	68a3      	ldr	r3, [r4, #8]
 800a92c:	459b      	cmp	fp, r3
 800a92e:	db17      	blt.n	800a960 <__gethex+0x3d4>
 800a930:	6861      	ldr	r1, [r4, #4]
 800a932:	9801      	ldr	r0, [sp, #4]
 800a934:	3101      	adds	r1, #1
 800a936:	f7fe f803 	bl	8008940 <_Balloc>
 800a93a:	4681      	mov	r9, r0
 800a93c:	b918      	cbnz	r0, 800a946 <__gethex+0x3ba>
 800a93e:	4b1a      	ldr	r3, [pc, #104]	@ (800a9a8 <__gethex+0x41c>)
 800a940:	4602      	mov	r2, r0
 800a942:	2184      	movs	r1, #132	@ 0x84
 800a944:	e6c5      	b.n	800a6d2 <__gethex+0x146>
 800a946:	6922      	ldr	r2, [r4, #16]
 800a948:	3202      	adds	r2, #2
 800a94a:	f104 010c 	add.w	r1, r4, #12
 800a94e:	0092      	lsls	r2, r2, #2
 800a950:	300c      	adds	r0, #12
 800a952:	f7ff fd6b 	bl	800a42c <memcpy>
 800a956:	4621      	mov	r1, r4
 800a958:	9801      	ldr	r0, [sp, #4]
 800a95a:	f7fe f831 	bl	80089c0 <_Bfree>
 800a95e:	464c      	mov	r4, r9
 800a960:	6923      	ldr	r3, [r4, #16]
 800a962:	1c5a      	adds	r2, r3, #1
 800a964:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a968:	6122      	str	r2, [r4, #16]
 800a96a:	2201      	movs	r2, #1
 800a96c:	615a      	str	r2, [r3, #20]
 800a96e:	e7be      	b.n	800a8ee <__gethex+0x362>
 800a970:	6922      	ldr	r2, [r4, #16]
 800a972:	455a      	cmp	r2, fp
 800a974:	dd0b      	ble.n	800a98e <__gethex+0x402>
 800a976:	2101      	movs	r1, #1
 800a978:	4620      	mov	r0, r4
 800a97a:	f7ff fd9f 	bl	800a4bc <rshift>
 800a97e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a982:	3701      	adds	r7, #1
 800a984:	42bb      	cmp	r3, r7
 800a986:	f6ff aee0 	blt.w	800a74a <__gethex+0x1be>
 800a98a:	2501      	movs	r5, #1
 800a98c:	e7c2      	b.n	800a914 <__gethex+0x388>
 800a98e:	f016 061f 	ands.w	r6, r6, #31
 800a992:	d0fa      	beq.n	800a98a <__gethex+0x3fe>
 800a994:	4453      	add	r3, sl
 800a996:	f1c6 0620 	rsb	r6, r6, #32
 800a99a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a99e:	f7fe f8c1 	bl	8008b24 <__hi0bits>
 800a9a2:	42b0      	cmp	r0, r6
 800a9a4:	dbe7      	blt.n	800a976 <__gethex+0x3ea>
 800a9a6:	e7f0      	b.n	800a98a <__gethex+0x3fe>
 800a9a8:	0800b2ad 	.word	0x0800b2ad

0800a9ac <L_shift>:
 800a9ac:	f1c2 0208 	rsb	r2, r2, #8
 800a9b0:	0092      	lsls	r2, r2, #2
 800a9b2:	b570      	push	{r4, r5, r6, lr}
 800a9b4:	f1c2 0620 	rsb	r6, r2, #32
 800a9b8:	6843      	ldr	r3, [r0, #4]
 800a9ba:	6804      	ldr	r4, [r0, #0]
 800a9bc:	fa03 f506 	lsl.w	r5, r3, r6
 800a9c0:	432c      	orrs	r4, r5
 800a9c2:	40d3      	lsrs	r3, r2
 800a9c4:	6004      	str	r4, [r0, #0]
 800a9c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a9ca:	4288      	cmp	r0, r1
 800a9cc:	d3f4      	bcc.n	800a9b8 <L_shift+0xc>
 800a9ce:	bd70      	pop	{r4, r5, r6, pc}

0800a9d0 <__match>:
 800a9d0:	b530      	push	{r4, r5, lr}
 800a9d2:	6803      	ldr	r3, [r0, #0]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9da:	b914      	cbnz	r4, 800a9e2 <__match+0x12>
 800a9dc:	6003      	str	r3, [r0, #0]
 800a9de:	2001      	movs	r0, #1
 800a9e0:	bd30      	pop	{r4, r5, pc}
 800a9e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a9ea:	2d19      	cmp	r5, #25
 800a9ec:	bf98      	it	ls
 800a9ee:	3220      	addls	r2, #32
 800a9f0:	42a2      	cmp	r2, r4
 800a9f2:	d0f0      	beq.n	800a9d6 <__match+0x6>
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	e7f3      	b.n	800a9e0 <__match+0x10>

0800a9f8 <__hexnan>:
 800a9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fc:	680b      	ldr	r3, [r1, #0]
 800a9fe:	6801      	ldr	r1, [r0, #0]
 800aa00:	115e      	asrs	r6, r3, #5
 800aa02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aa06:	f013 031f 	ands.w	r3, r3, #31
 800aa0a:	b087      	sub	sp, #28
 800aa0c:	bf18      	it	ne
 800aa0e:	3604      	addne	r6, #4
 800aa10:	2500      	movs	r5, #0
 800aa12:	1f37      	subs	r7, r6, #4
 800aa14:	4682      	mov	sl, r0
 800aa16:	4690      	mov	r8, r2
 800aa18:	9301      	str	r3, [sp, #4]
 800aa1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa1e:	46b9      	mov	r9, r7
 800aa20:	463c      	mov	r4, r7
 800aa22:	9502      	str	r5, [sp, #8]
 800aa24:	46ab      	mov	fp, r5
 800aa26:	784a      	ldrb	r2, [r1, #1]
 800aa28:	1c4b      	adds	r3, r1, #1
 800aa2a:	9303      	str	r3, [sp, #12]
 800aa2c:	b342      	cbz	r2, 800aa80 <__hexnan+0x88>
 800aa2e:	4610      	mov	r0, r2
 800aa30:	9105      	str	r1, [sp, #20]
 800aa32:	9204      	str	r2, [sp, #16]
 800aa34:	f7ff fd94 	bl	800a560 <__hexdig_fun>
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	d151      	bne.n	800aae0 <__hexnan+0xe8>
 800aa3c:	9a04      	ldr	r2, [sp, #16]
 800aa3e:	9905      	ldr	r1, [sp, #20]
 800aa40:	2a20      	cmp	r2, #32
 800aa42:	d818      	bhi.n	800aa76 <__hexnan+0x7e>
 800aa44:	9b02      	ldr	r3, [sp, #8]
 800aa46:	459b      	cmp	fp, r3
 800aa48:	dd13      	ble.n	800aa72 <__hexnan+0x7a>
 800aa4a:	454c      	cmp	r4, r9
 800aa4c:	d206      	bcs.n	800aa5c <__hexnan+0x64>
 800aa4e:	2d07      	cmp	r5, #7
 800aa50:	dc04      	bgt.n	800aa5c <__hexnan+0x64>
 800aa52:	462a      	mov	r2, r5
 800aa54:	4649      	mov	r1, r9
 800aa56:	4620      	mov	r0, r4
 800aa58:	f7ff ffa8 	bl	800a9ac <L_shift>
 800aa5c:	4544      	cmp	r4, r8
 800aa5e:	d952      	bls.n	800ab06 <__hexnan+0x10e>
 800aa60:	2300      	movs	r3, #0
 800aa62:	f1a4 0904 	sub.w	r9, r4, #4
 800aa66:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa6a:	f8cd b008 	str.w	fp, [sp, #8]
 800aa6e:	464c      	mov	r4, r9
 800aa70:	461d      	mov	r5, r3
 800aa72:	9903      	ldr	r1, [sp, #12]
 800aa74:	e7d7      	b.n	800aa26 <__hexnan+0x2e>
 800aa76:	2a29      	cmp	r2, #41	@ 0x29
 800aa78:	d157      	bne.n	800ab2a <__hexnan+0x132>
 800aa7a:	3102      	adds	r1, #2
 800aa7c:	f8ca 1000 	str.w	r1, [sl]
 800aa80:	f1bb 0f00 	cmp.w	fp, #0
 800aa84:	d051      	beq.n	800ab2a <__hexnan+0x132>
 800aa86:	454c      	cmp	r4, r9
 800aa88:	d206      	bcs.n	800aa98 <__hexnan+0xa0>
 800aa8a:	2d07      	cmp	r5, #7
 800aa8c:	dc04      	bgt.n	800aa98 <__hexnan+0xa0>
 800aa8e:	462a      	mov	r2, r5
 800aa90:	4649      	mov	r1, r9
 800aa92:	4620      	mov	r0, r4
 800aa94:	f7ff ff8a 	bl	800a9ac <L_shift>
 800aa98:	4544      	cmp	r4, r8
 800aa9a:	d936      	bls.n	800ab0a <__hexnan+0x112>
 800aa9c:	f1a8 0204 	sub.w	r2, r8, #4
 800aaa0:	4623      	mov	r3, r4
 800aaa2:	f853 1b04 	ldr.w	r1, [r3], #4
 800aaa6:	f842 1f04 	str.w	r1, [r2, #4]!
 800aaaa:	429f      	cmp	r7, r3
 800aaac:	d2f9      	bcs.n	800aaa2 <__hexnan+0xaa>
 800aaae:	1b3b      	subs	r3, r7, r4
 800aab0:	f023 0303 	bic.w	r3, r3, #3
 800aab4:	3304      	adds	r3, #4
 800aab6:	3401      	adds	r4, #1
 800aab8:	3e03      	subs	r6, #3
 800aaba:	42b4      	cmp	r4, r6
 800aabc:	bf88      	it	hi
 800aabe:	2304      	movhi	r3, #4
 800aac0:	4443      	add	r3, r8
 800aac2:	2200      	movs	r2, #0
 800aac4:	f843 2b04 	str.w	r2, [r3], #4
 800aac8:	429f      	cmp	r7, r3
 800aaca:	d2fb      	bcs.n	800aac4 <__hexnan+0xcc>
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	b91b      	cbnz	r3, 800aad8 <__hexnan+0xe0>
 800aad0:	4547      	cmp	r7, r8
 800aad2:	d128      	bne.n	800ab26 <__hexnan+0x12e>
 800aad4:	2301      	movs	r3, #1
 800aad6:	603b      	str	r3, [r7, #0]
 800aad8:	2005      	movs	r0, #5
 800aada:	b007      	add	sp, #28
 800aadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae0:	3501      	adds	r5, #1
 800aae2:	2d08      	cmp	r5, #8
 800aae4:	f10b 0b01 	add.w	fp, fp, #1
 800aae8:	dd06      	ble.n	800aaf8 <__hexnan+0x100>
 800aaea:	4544      	cmp	r4, r8
 800aaec:	d9c1      	bls.n	800aa72 <__hexnan+0x7a>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f844 3c04 	str.w	r3, [r4, #-4]
 800aaf4:	2501      	movs	r5, #1
 800aaf6:	3c04      	subs	r4, #4
 800aaf8:	6822      	ldr	r2, [r4, #0]
 800aafa:	f000 000f 	and.w	r0, r0, #15
 800aafe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ab02:	6020      	str	r0, [r4, #0]
 800ab04:	e7b5      	b.n	800aa72 <__hexnan+0x7a>
 800ab06:	2508      	movs	r5, #8
 800ab08:	e7b3      	b.n	800aa72 <__hexnan+0x7a>
 800ab0a:	9b01      	ldr	r3, [sp, #4]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d0dd      	beq.n	800aacc <__hexnan+0xd4>
 800ab10:	f1c3 0320 	rsb	r3, r3, #32
 800ab14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab18:	40da      	lsrs	r2, r3
 800ab1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ab1e:	4013      	ands	r3, r2
 800ab20:	f846 3c04 	str.w	r3, [r6, #-4]
 800ab24:	e7d2      	b.n	800aacc <__hexnan+0xd4>
 800ab26:	3f04      	subs	r7, #4
 800ab28:	e7d0      	b.n	800aacc <__hexnan+0xd4>
 800ab2a:	2004      	movs	r0, #4
 800ab2c:	e7d5      	b.n	800aada <__hexnan+0xe2>

0800ab2e <__ascii_mbtowc>:
 800ab2e:	b082      	sub	sp, #8
 800ab30:	b901      	cbnz	r1, 800ab34 <__ascii_mbtowc+0x6>
 800ab32:	a901      	add	r1, sp, #4
 800ab34:	b142      	cbz	r2, 800ab48 <__ascii_mbtowc+0x1a>
 800ab36:	b14b      	cbz	r3, 800ab4c <__ascii_mbtowc+0x1e>
 800ab38:	7813      	ldrb	r3, [r2, #0]
 800ab3a:	600b      	str	r3, [r1, #0]
 800ab3c:	7812      	ldrb	r2, [r2, #0]
 800ab3e:	1e10      	subs	r0, r2, #0
 800ab40:	bf18      	it	ne
 800ab42:	2001      	movne	r0, #1
 800ab44:	b002      	add	sp, #8
 800ab46:	4770      	bx	lr
 800ab48:	4610      	mov	r0, r2
 800ab4a:	e7fb      	b.n	800ab44 <__ascii_mbtowc+0x16>
 800ab4c:	f06f 0001 	mvn.w	r0, #1
 800ab50:	e7f8      	b.n	800ab44 <__ascii_mbtowc+0x16>

0800ab52 <_realloc_r>:
 800ab52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab56:	4680      	mov	r8, r0
 800ab58:	4615      	mov	r5, r2
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	b921      	cbnz	r1, 800ab68 <_realloc_r+0x16>
 800ab5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab62:	4611      	mov	r1, r2
 800ab64:	f7fd be60 	b.w	8008828 <_malloc_r>
 800ab68:	b92a      	cbnz	r2, 800ab76 <_realloc_r+0x24>
 800ab6a:	f7fd fde9 	bl	8008740 <_free_r>
 800ab6e:	2400      	movs	r4, #0
 800ab70:	4620      	mov	r0, r4
 800ab72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab76:	f000 f840 	bl	800abfa <_malloc_usable_size_r>
 800ab7a:	4285      	cmp	r5, r0
 800ab7c:	4606      	mov	r6, r0
 800ab7e:	d802      	bhi.n	800ab86 <_realloc_r+0x34>
 800ab80:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ab84:	d8f4      	bhi.n	800ab70 <_realloc_r+0x1e>
 800ab86:	4629      	mov	r1, r5
 800ab88:	4640      	mov	r0, r8
 800ab8a:	f7fd fe4d 	bl	8008828 <_malloc_r>
 800ab8e:	4607      	mov	r7, r0
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d0ec      	beq.n	800ab6e <_realloc_r+0x1c>
 800ab94:	42b5      	cmp	r5, r6
 800ab96:	462a      	mov	r2, r5
 800ab98:	4621      	mov	r1, r4
 800ab9a:	bf28      	it	cs
 800ab9c:	4632      	movcs	r2, r6
 800ab9e:	f7ff fc45 	bl	800a42c <memcpy>
 800aba2:	4621      	mov	r1, r4
 800aba4:	4640      	mov	r0, r8
 800aba6:	f7fd fdcb 	bl	8008740 <_free_r>
 800abaa:	463c      	mov	r4, r7
 800abac:	e7e0      	b.n	800ab70 <_realloc_r+0x1e>

0800abae <__ascii_wctomb>:
 800abae:	4603      	mov	r3, r0
 800abb0:	4608      	mov	r0, r1
 800abb2:	b141      	cbz	r1, 800abc6 <__ascii_wctomb+0x18>
 800abb4:	2aff      	cmp	r2, #255	@ 0xff
 800abb6:	d904      	bls.n	800abc2 <__ascii_wctomb+0x14>
 800abb8:	228a      	movs	r2, #138	@ 0x8a
 800abba:	601a      	str	r2, [r3, #0]
 800abbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abc0:	4770      	bx	lr
 800abc2:	700a      	strb	r2, [r1, #0]
 800abc4:	2001      	movs	r0, #1
 800abc6:	4770      	bx	lr

0800abc8 <fiprintf>:
 800abc8:	b40e      	push	{r1, r2, r3}
 800abca:	b503      	push	{r0, r1, lr}
 800abcc:	4601      	mov	r1, r0
 800abce:	ab03      	add	r3, sp, #12
 800abd0:	4805      	ldr	r0, [pc, #20]	@ (800abe8 <fiprintf+0x20>)
 800abd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800abd6:	6800      	ldr	r0, [r0, #0]
 800abd8:	9301      	str	r3, [sp, #4]
 800abda:	f000 f83f 	bl	800ac5c <_vfiprintf_r>
 800abde:	b002      	add	sp, #8
 800abe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800abe4:	b003      	add	sp, #12
 800abe6:	4770      	bx	lr
 800abe8:	20000018 	.word	0x20000018

0800abec <abort>:
 800abec:	b508      	push	{r3, lr}
 800abee:	2006      	movs	r0, #6
 800abf0:	f000 fa08 	bl	800b004 <raise>
 800abf4:	2001      	movs	r0, #1
 800abf6:	f7f6 ff83 	bl	8001b00 <_exit>

0800abfa <_malloc_usable_size_r>:
 800abfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abfe:	1f18      	subs	r0, r3, #4
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	bfbc      	itt	lt
 800ac04:	580b      	ldrlt	r3, [r1, r0]
 800ac06:	18c0      	addlt	r0, r0, r3
 800ac08:	4770      	bx	lr

0800ac0a <__sfputc_r>:
 800ac0a:	6893      	ldr	r3, [r2, #8]
 800ac0c:	3b01      	subs	r3, #1
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	b410      	push	{r4}
 800ac12:	6093      	str	r3, [r2, #8]
 800ac14:	da08      	bge.n	800ac28 <__sfputc_r+0x1e>
 800ac16:	6994      	ldr	r4, [r2, #24]
 800ac18:	42a3      	cmp	r3, r4
 800ac1a:	db01      	blt.n	800ac20 <__sfputc_r+0x16>
 800ac1c:	290a      	cmp	r1, #10
 800ac1e:	d103      	bne.n	800ac28 <__sfputc_r+0x1e>
 800ac20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac24:	f000 b932 	b.w	800ae8c <__swbuf_r>
 800ac28:	6813      	ldr	r3, [r2, #0]
 800ac2a:	1c58      	adds	r0, r3, #1
 800ac2c:	6010      	str	r0, [r2, #0]
 800ac2e:	7019      	strb	r1, [r3, #0]
 800ac30:	4608      	mov	r0, r1
 800ac32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <__sfputs_r>:
 800ac38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3a:	4606      	mov	r6, r0
 800ac3c:	460f      	mov	r7, r1
 800ac3e:	4614      	mov	r4, r2
 800ac40:	18d5      	adds	r5, r2, r3
 800ac42:	42ac      	cmp	r4, r5
 800ac44:	d101      	bne.n	800ac4a <__sfputs_r+0x12>
 800ac46:	2000      	movs	r0, #0
 800ac48:	e007      	b.n	800ac5a <__sfputs_r+0x22>
 800ac4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac4e:	463a      	mov	r2, r7
 800ac50:	4630      	mov	r0, r6
 800ac52:	f7ff ffda 	bl	800ac0a <__sfputc_r>
 800ac56:	1c43      	adds	r3, r0, #1
 800ac58:	d1f3      	bne.n	800ac42 <__sfputs_r+0xa>
 800ac5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac5c <_vfiprintf_r>:
 800ac5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac60:	460d      	mov	r5, r1
 800ac62:	b09d      	sub	sp, #116	@ 0x74
 800ac64:	4614      	mov	r4, r2
 800ac66:	4698      	mov	r8, r3
 800ac68:	4606      	mov	r6, r0
 800ac6a:	b118      	cbz	r0, 800ac74 <_vfiprintf_r+0x18>
 800ac6c:	6a03      	ldr	r3, [r0, #32]
 800ac6e:	b90b      	cbnz	r3, 800ac74 <_vfiprintf_r+0x18>
 800ac70:	f7fc fdf8 	bl	8007864 <__sinit>
 800ac74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac76:	07d9      	lsls	r1, r3, #31
 800ac78:	d405      	bmi.n	800ac86 <_vfiprintf_r+0x2a>
 800ac7a:	89ab      	ldrh	r3, [r5, #12]
 800ac7c:	059a      	lsls	r2, r3, #22
 800ac7e:	d402      	bmi.n	800ac86 <_vfiprintf_r+0x2a>
 800ac80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac82:	f7fc ff06 	bl	8007a92 <__retarget_lock_acquire_recursive>
 800ac86:	89ab      	ldrh	r3, [r5, #12]
 800ac88:	071b      	lsls	r3, r3, #28
 800ac8a:	d501      	bpl.n	800ac90 <_vfiprintf_r+0x34>
 800ac8c:	692b      	ldr	r3, [r5, #16]
 800ac8e:	b99b      	cbnz	r3, 800acb8 <_vfiprintf_r+0x5c>
 800ac90:	4629      	mov	r1, r5
 800ac92:	4630      	mov	r0, r6
 800ac94:	f000 f938 	bl	800af08 <__swsetup_r>
 800ac98:	b170      	cbz	r0, 800acb8 <_vfiprintf_r+0x5c>
 800ac9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac9c:	07dc      	lsls	r4, r3, #31
 800ac9e:	d504      	bpl.n	800acaa <_vfiprintf_r+0x4e>
 800aca0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aca4:	b01d      	add	sp, #116	@ 0x74
 800aca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acaa:	89ab      	ldrh	r3, [r5, #12]
 800acac:	0598      	lsls	r0, r3, #22
 800acae:	d4f7      	bmi.n	800aca0 <_vfiprintf_r+0x44>
 800acb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acb2:	f7fc feef 	bl	8007a94 <__retarget_lock_release_recursive>
 800acb6:	e7f3      	b.n	800aca0 <_vfiprintf_r+0x44>
 800acb8:	2300      	movs	r3, #0
 800acba:	9309      	str	r3, [sp, #36]	@ 0x24
 800acbc:	2320      	movs	r3, #32
 800acbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800acc2:	f8cd 800c 	str.w	r8, [sp, #12]
 800acc6:	2330      	movs	r3, #48	@ 0x30
 800acc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ae78 <_vfiprintf_r+0x21c>
 800accc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800acd0:	f04f 0901 	mov.w	r9, #1
 800acd4:	4623      	mov	r3, r4
 800acd6:	469a      	mov	sl, r3
 800acd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acdc:	b10a      	cbz	r2, 800ace2 <_vfiprintf_r+0x86>
 800acde:	2a25      	cmp	r2, #37	@ 0x25
 800ace0:	d1f9      	bne.n	800acd6 <_vfiprintf_r+0x7a>
 800ace2:	ebba 0b04 	subs.w	fp, sl, r4
 800ace6:	d00b      	beq.n	800ad00 <_vfiprintf_r+0xa4>
 800ace8:	465b      	mov	r3, fp
 800acea:	4622      	mov	r2, r4
 800acec:	4629      	mov	r1, r5
 800acee:	4630      	mov	r0, r6
 800acf0:	f7ff ffa2 	bl	800ac38 <__sfputs_r>
 800acf4:	3001      	adds	r0, #1
 800acf6:	f000 80a7 	beq.w	800ae48 <_vfiprintf_r+0x1ec>
 800acfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acfc:	445a      	add	r2, fp
 800acfe:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad00:	f89a 3000 	ldrb.w	r3, [sl]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 809f 	beq.w	800ae48 <_vfiprintf_r+0x1ec>
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad14:	f10a 0a01 	add.w	sl, sl, #1
 800ad18:	9304      	str	r3, [sp, #16]
 800ad1a:	9307      	str	r3, [sp, #28]
 800ad1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad20:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad22:	4654      	mov	r4, sl
 800ad24:	2205      	movs	r2, #5
 800ad26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad2a:	4853      	ldr	r0, [pc, #332]	@ (800ae78 <_vfiprintf_r+0x21c>)
 800ad2c:	f7f5 fa78 	bl	8000220 <memchr>
 800ad30:	9a04      	ldr	r2, [sp, #16]
 800ad32:	b9d8      	cbnz	r0, 800ad6c <_vfiprintf_r+0x110>
 800ad34:	06d1      	lsls	r1, r2, #27
 800ad36:	bf44      	itt	mi
 800ad38:	2320      	movmi	r3, #32
 800ad3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad3e:	0713      	lsls	r3, r2, #28
 800ad40:	bf44      	itt	mi
 800ad42:	232b      	movmi	r3, #43	@ 0x2b
 800ad44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad48:	f89a 3000 	ldrb.w	r3, [sl]
 800ad4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad4e:	d015      	beq.n	800ad7c <_vfiprintf_r+0x120>
 800ad50:	9a07      	ldr	r2, [sp, #28]
 800ad52:	4654      	mov	r4, sl
 800ad54:	2000      	movs	r0, #0
 800ad56:	f04f 0c0a 	mov.w	ip, #10
 800ad5a:	4621      	mov	r1, r4
 800ad5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad60:	3b30      	subs	r3, #48	@ 0x30
 800ad62:	2b09      	cmp	r3, #9
 800ad64:	d94b      	bls.n	800adfe <_vfiprintf_r+0x1a2>
 800ad66:	b1b0      	cbz	r0, 800ad96 <_vfiprintf_r+0x13a>
 800ad68:	9207      	str	r2, [sp, #28]
 800ad6a:	e014      	b.n	800ad96 <_vfiprintf_r+0x13a>
 800ad6c:	eba0 0308 	sub.w	r3, r0, r8
 800ad70:	fa09 f303 	lsl.w	r3, r9, r3
 800ad74:	4313      	orrs	r3, r2
 800ad76:	9304      	str	r3, [sp, #16]
 800ad78:	46a2      	mov	sl, r4
 800ad7a:	e7d2      	b.n	800ad22 <_vfiprintf_r+0xc6>
 800ad7c:	9b03      	ldr	r3, [sp, #12]
 800ad7e:	1d19      	adds	r1, r3, #4
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	9103      	str	r1, [sp, #12]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	bfbb      	ittet	lt
 800ad88:	425b      	neglt	r3, r3
 800ad8a:	f042 0202 	orrlt.w	r2, r2, #2
 800ad8e:	9307      	strge	r3, [sp, #28]
 800ad90:	9307      	strlt	r3, [sp, #28]
 800ad92:	bfb8      	it	lt
 800ad94:	9204      	strlt	r2, [sp, #16]
 800ad96:	7823      	ldrb	r3, [r4, #0]
 800ad98:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad9a:	d10a      	bne.n	800adb2 <_vfiprintf_r+0x156>
 800ad9c:	7863      	ldrb	r3, [r4, #1]
 800ad9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ada0:	d132      	bne.n	800ae08 <_vfiprintf_r+0x1ac>
 800ada2:	9b03      	ldr	r3, [sp, #12]
 800ada4:	1d1a      	adds	r2, r3, #4
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	9203      	str	r2, [sp, #12]
 800adaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800adae:	3402      	adds	r4, #2
 800adb0:	9305      	str	r3, [sp, #20]
 800adb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ae88 <_vfiprintf_r+0x22c>
 800adb6:	7821      	ldrb	r1, [r4, #0]
 800adb8:	2203      	movs	r2, #3
 800adba:	4650      	mov	r0, sl
 800adbc:	f7f5 fa30 	bl	8000220 <memchr>
 800adc0:	b138      	cbz	r0, 800add2 <_vfiprintf_r+0x176>
 800adc2:	9b04      	ldr	r3, [sp, #16]
 800adc4:	eba0 000a 	sub.w	r0, r0, sl
 800adc8:	2240      	movs	r2, #64	@ 0x40
 800adca:	4082      	lsls	r2, r0
 800adcc:	4313      	orrs	r3, r2
 800adce:	3401      	adds	r4, #1
 800add0:	9304      	str	r3, [sp, #16]
 800add2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800add6:	4829      	ldr	r0, [pc, #164]	@ (800ae7c <_vfiprintf_r+0x220>)
 800add8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800addc:	2206      	movs	r2, #6
 800adde:	f7f5 fa1f 	bl	8000220 <memchr>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	d03f      	beq.n	800ae66 <_vfiprintf_r+0x20a>
 800ade6:	4b26      	ldr	r3, [pc, #152]	@ (800ae80 <_vfiprintf_r+0x224>)
 800ade8:	bb1b      	cbnz	r3, 800ae32 <_vfiprintf_r+0x1d6>
 800adea:	9b03      	ldr	r3, [sp, #12]
 800adec:	3307      	adds	r3, #7
 800adee:	f023 0307 	bic.w	r3, r3, #7
 800adf2:	3308      	adds	r3, #8
 800adf4:	9303      	str	r3, [sp, #12]
 800adf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adf8:	443b      	add	r3, r7
 800adfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800adfc:	e76a      	b.n	800acd4 <_vfiprintf_r+0x78>
 800adfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae02:	460c      	mov	r4, r1
 800ae04:	2001      	movs	r0, #1
 800ae06:	e7a8      	b.n	800ad5a <_vfiprintf_r+0xfe>
 800ae08:	2300      	movs	r3, #0
 800ae0a:	3401      	adds	r4, #1
 800ae0c:	9305      	str	r3, [sp, #20]
 800ae0e:	4619      	mov	r1, r3
 800ae10:	f04f 0c0a 	mov.w	ip, #10
 800ae14:	4620      	mov	r0, r4
 800ae16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae1a:	3a30      	subs	r2, #48	@ 0x30
 800ae1c:	2a09      	cmp	r2, #9
 800ae1e:	d903      	bls.n	800ae28 <_vfiprintf_r+0x1cc>
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d0c6      	beq.n	800adb2 <_vfiprintf_r+0x156>
 800ae24:	9105      	str	r1, [sp, #20]
 800ae26:	e7c4      	b.n	800adb2 <_vfiprintf_r+0x156>
 800ae28:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e7f0      	b.n	800ae14 <_vfiprintf_r+0x1b8>
 800ae32:	ab03      	add	r3, sp, #12
 800ae34:	9300      	str	r3, [sp, #0]
 800ae36:	462a      	mov	r2, r5
 800ae38:	4b12      	ldr	r3, [pc, #72]	@ (800ae84 <_vfiprintf_r+0x228>)
 800ae3a:	a904      	add	r1, sp, #16
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	f7fb feb9 	bl	8006bb4 <_printf_float>
 800ae42:	4607      	mov	r7, r0
 800ae44:	1c78      	adds	r0, r7, #1
 800ae46:	d1d6      	bne.n	800adf6 <_vfiprintf_r+0x19a>
 800ae48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae4a:	07d9      	lsls	r1, r3, #31
 800ae4c:	d405      	bmi.n	800ae5a <_vfiprintf_r+0x1fe>
 800ae4e:	89ab      	ldrh	r3, [r5, #12]
 800ae50:	059a      	lsls	r2, r3, #22
 800ae52:	d402      	bmi.n	800ae5a <_vfiprintf_r+0x1fe>
 800ae54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae56:	f7fc fe1d 	bl	8007a94 <__retarget_lock_release_recursive>
 800ae5a:	89ab      	ldrh	r3, [r5, #12]
 800ae5c:	065b      	lsls	r3, r3, #25
 800ae5e:	f53f af1f 	bmi.w	800aca0 <_vfiprintf_r+0x44>
 800ae62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae64:	e71e      	b.n	800aca4 <_vfiprintf_r+0x48>
 800ae66:	ab03      	add	r3, sp, #12
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	462a      	mov	r2, r5
 800ae6c:	4b05      	ldr	r3, [pc, #20]	@ (800ae84 <_vfiprintf_r+0x228>)
 800ae6e:	a904      	add	r1, sp, #16
 800ae70:	4630      	mov	r0, r6
 800ae72:	f7fc f937 	bl	80070e4 <_printf_i>
 800ae76:	e7e4      	b.n	800ae42 <_vfiprintf_r+0x1e6>
 800ae78:	0800b571 	.word	0x0800b571
 800ae7c:	0800b57b 	.word	0x0800b57b
 800ae80:	08006bb5 	.word	0x08006bb5
 800ae84:	0800ac39 	.word	0x0800ac39
 800ae88:	0800b577 	.word	0x0800b577

0800ae8c <__swbuf_r>:
 800ae8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae8e:	460e      	mov	r6, r1
 800ae90:	4614      	mov	r4, r2
 800ae92:	4605      	mov	r5, r0
 800ae94:	b118      	cbz	r0, 800ae9e <__swbuf_r+0x12>
 800ae96:	6a03      	ldr	r3, [r0, #32]
 800ae98:	b90b      	cbnz	r3, 800ae9e <__swbuf_r+0x12>
 800ae9a:	f7fc fce3 	bl	8007864 <__sinit>
 800ae9e:	69a3      	ldr	r3, [r4, #24]
 800aea0:	60a3      	str	r3, [r4, #8]
 800aea2:	89a3      	ldrh	r3, [r4, #12]
 800aea4:	071a      	lsls	r2, r3, #28
 800aea6:	d501      	bpl.n	800aeac <__swbuf_r+0x20>
 800aea8:	6923      	ldr	r3, [r4, #16]
 800aeaa:	b943      	cbnz	r3, 800aebe <__swbuf_r+0x32>
 800aeac:	4621      	mov	r1, r4
 800aeae:	4628      	mov	r0, r5
 800aeb0:	f000 f82a 	bl	800af08 <__swsetup_r>
 800aeb4:	b118      	cbz	r0, 800aebe <__swbuf_r+0x32>
 800aeb6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800aeba:	4638      	mov	r0, r7
 800aebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	6922      	ldr	r2, [r4, #16]
 800aec2:	1a98      	subs	r0, r3, r2
 800aec4:	6963      	ldr	r3, [r4, #20]
 800aec6:	b2f6      	uxtb	r6, r6
 800aec8:	4283      	cmp	r3, r0
 800aeca:	4637      	mov	r7, r6
 800aecc:	dc05      	bgt.n	800aeda <__swbuf_r+0x4e>
 800aece:	4621      	mov	r1, r4
 800aed0:	4628      	mov	r0, r5
 800aed2:	f7ff fa47 	bl	800a364 <_fflush_r>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d1ed      	bne.n	800aeb6 <__swbuf_r+0x2a>
 800aeda:	68a3      	ldr	r3, [r4, #8]
 800aedc:	3b01      	subs	r3, #1
 800aede:	60a3      	str	r3, [r4, #8]
 800aee0:	6823      	ldr	r3, [r4, #0]
 800aee2:	1c5a      	adds	r2, r3, #1
 800aee4:	6022      	str	r2, [r4, #0]
 800aee6:	701e      	strb	r6, [r3, #0]
 800aee8:	6962      	ldr	r2, [r4, #20]
 800aeea:	1c43      	adds	r3, r0, #1
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d004      	beq.n	800aefa <__swbuf_r+0x6e>
 800aef0:	89a3      	ldrh	r3, [r4, #12]
 800aef2:	07db      	lsls	r3, r3, #31
 800aef4:	d5e1      	bpl.n	800aeba <__swbuf_r+0x2e>
 800aef6:	2e0a      	cmp	r6, #10
 800aef8:	d1df      	bne.n	800aeba <__swbuf_r+0x2e>
 800aefa:	4621      	mov	r1, r4
 800aefc:	4628      	mov	r0, r5
 800aefe:	f7ff fa31 	bl	800a364 <_fflush_r>
 800af02:	2800      	cmp	r0, #0
 800af04:	d0d9      	beq.n	800aeba <__swbuf_r+0x2e>
 800af06:	e7d6      	b.n	800aeb6 <__swbuf_r+0x2a>

0800af08 <__swsetup_r>:
 800af08:	b538      	push	{r3, r4, r5, lr}
 800af0a:	4b29      	ldr	r3, [pc, #164]	@ (800afb0 <__swsetup_r+0xa8>)
 800af0c:	4605      	mov	r5, r0
 800af0e:	6818      	ldr	r0, [r3, #0]
 800af10:	460c      	mov	r4, r1
 800af12:	b118      	cbz	r0, 800af1c <__swsetup_r+0x14>
 800af14:	6a03      	ldr	r3, [r0, #32]
 800af16:	b90b      	cbnz	r3, 800af1c <__swsetup_r+0x14>
 800af18:	f7fc fca4 	bl	8007864 <__sinit>
 800af1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af20:	0719      	lsls	r1, r3, #28
 800af22:	d422      	bmi.n	800af6a <__swsetup_r+0x62>
 800af24:	06da      	lsls	r2, r3, #27
 800af26:	d407      	bmi.n	800af38 <__swsetup_r+0x30>
 800af28:	2209      	movs	r2, #9
 800af2a:	602a      	str	r2, [r5, #0]
 800af2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af30:	81a3      	strh	r3, [r4, #12]
 800af32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af36:	e033      	b.n	800afa0 <__swsetup_r+0x98>
 800af38:	0758      	lsls	r0, r3, #29
 800af3a:	d512      	bpl.n	800af62 <__swsetup_r+0x5a>
 800af3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af3e:	b141      	cbz	r1, 800af52 <__swsetup_r+0x4a>
 800af40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af44:	4299      	cmp	r1, r3
 800af46:	d002      	beq.n	800af4e <__swsetup_r+0x46>
 800af48:	4628      	mov	r0, r5
 800af4a:	f7fd fbf9 	bl	8008740 <_free_r>
 800af4e:	2300      	movs	r3, #0
 800af50:	6363      	str	r3, [r4, #52]	@ 0x34
 800af52:	89a3      	ldrh	r3, [r4, #12]
 800af54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800af58:	81a3      	strh	r3, [r4, #12]
 800af5a:	2300      	movs	r3, #0
 800af5c:	6063      	str	r3, [r4, #4]
 800af5e:	6923      	ldr	r3, [r4, #16]
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	89a3      	ldrh	r3, [r4, #12]
 800af64:	f043 0308 	orr.w	r3, r3, #8
 800af68:	81a3      	strh	r3, [r4, #12]
 800af6a:	6923      	ldr	r3, [r4, #16]
 800af6c:	b94b      	cbnz	r3, 800af82 <__swsetup_r+0x7a>
 800af6e:	89a3      	ldrh	r3, [r4, #12]
 800af70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800af74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af78:	d003      	beq.n	800af82 <__swsetup_r+0x7a>
 800af7a:	4621      	mov	r1, r4
 800af7c:	4628      	mov	r0, r5
 800af7e:	f000 f883 	bl	800b088 <__smakebuf_r>
 800af82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af86:	f013 0201 	ands.w	r2, r3, #1
 800af8a:	d00a      	beq.n	800afa2 <__swsetup_r+0x9a>
 800af8c:	2200      	movs	r2, #0
 800af8e:	60a2      	str	r2, [r4, #8]
 800af90:	6962      	ldr	r2, [r4, #20]
 800af92:	4252      	negs	r2, r2
 800af94:	61a2      	str	r2, [r4, #24]
 800af96:	6922      	ldr	r2, [r4, #16]
 800af98:	b942      	cbnz	r2, 800afac <__swsetup_r+0xa4>
 800af9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800af9e:	d1c5      	bne.n	800af2c <__swsetup_r+0x24>
 800afa0:	bd38      	pop	{r3, r4, r5, pc}
 800afa2:	0799      	lsls	r1, r3, #30
 800afa4:	bf58      	it	pl
 800afa6:	6962      	ldrpl	r2, [r4, #20]
 800afa8:	60a2      	str	r2, [r4, #8]
 800afaa:	e7f4      	b.n	800af96 <__swsetup_r+0x8e>
 800afac:	2000      	movs	r0, #0
 800afae:	e7f7      	b.n	800afa0 <__swsetup_r+0x98>
 800afb0:	20000018 	.word	0x20000018

0800afb4 <_raise_r>:
 800afb4:	291f      	cmp	r1, #31
 800afb6:	b538      	push	{r3, r4, r5, lr}
 800afb8:	4605      	mov	r5, r0
 800afba:	460c      	mov	r4, r1
 800afbc:	d904      	bls.n	800afc8 <_raise_r+0x14>
 800afbe:	2316      	movs	r3, #22
 800afc0:	6003      	str	r3, [r0, #0]
 800afc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800afc6:	bd38      	pop	{r3, r4, r5, pc}
 800afc8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800afca:	b112      	cbz	r2, 800afd2 <_raise_r+0x1e>
 800afcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afd0:	b94b      	cbnz	r3, 800afe6 <_raise_r+0x32>
 800afd2:	4628      	mov	r0, r5
 800afd4:	f000 f830 	bl	800b038 <_getpid_r>
 800afd8:	4622      	mov	r2, r4
 800afda:	4601      	mov	r1, r0
 800afdc:	4628      	mov	r0, r5
 800afde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afe2:	f000 b817 	b.w	800b014 <_kill_r>
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d00a      	beq.n	800b000 <_raise_r+0x4c>
 800afea:	1c59      	adds	r1, r3, #1
 800afec:	d103      	bne.n	800aff6 <_raise_r+0x42>
 800afee:	2316      	movs	r3, #22
 800aff0:	6003      	str	r3, [r0, #0]
 800aff2:	2001      	movs	r0, #1
 800aff4:	e7e7      	b.n	800afc6 <_raise_r+0x12>
 800aff6:	2100      	movs	r1, #0
 800aff8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800affc:	4620      	mov	r0, r4
 800affe:	4798      	blx	r3
 800b000:	2000      	movs	r0, #0
 800b002:	e7e0      	b.n	800afc6 <_raise_r+0x12>

0800b004 <raise>:
 800b004:	4b02      	ldr	r3, [pc, #8]	@ (800b010 <raise+0xc>)
 800b006:	4601      	mov	r1, r0
 800b008:	6818      	ldr	r0, [r3, #0]
 800b00a:	f7ff bfd3 	b.w	800afb4 <_raise_r>
 800b00e:	bf00      	nop
 800b010:	20000018 	.word	0x20000018

0800b014 <_kill_r>:
 800b014:	b538      	push	{r3, r4, r5, lr}
 800b016:	4d07      	ldr	r5, [pc, #28]	@ (800b034 <_kill_r+0x20>)
 800b018:	2300      	movs	r3, #0
 800b01a:	4604      	mov	r4, r0
 800b01c:	4608      	mov	r0, r1
 800b01e:	4611      	mov	r1, r2
 800b020:	602b      	str	r3, [r5, #0]
 800b022:	f7f6 fd5d 	bl	8001ae0 <_kill>
 800b026:	1c43      	adds	r3, r0, #1
 800b028:	d102      	bne.n	800b030 <_kill_r+0x1c>
 800b02a:	682b      	ldr	r3, [r5, #0]
 800b02c:	b103      	cbz	r3, 800b030 <_kill_r+0x1c>
 800b02e:	6023      	str	r3, [r4, #0]
 800b030:	bd38      	pop	{r3, r4, r5, pc}
 800b032:	bf00      	nop
 800b034:	200004a8 	.word	0x200004a8

0800b038 <_getpid_r>:
 800b038:	f7f6 bd4a 	b.w	8001ad0 <_getpid>

0800b03c <__swhatbuf_r>:
 800b03c:	b570      	push	{r4, r5, r6, lr}
 800b03e:	460c      	mov	r4, r1
 800b040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b044:	2900      	cmp	r1, #0
 800b046:	b096      	sub	sp, #88	@ 0x58
 800b048:	4615      	mov	r5, r2
 800b04a:	461e      	mov	r6, r3
 800b04c:	da0d      	bge.n	800b06a <__swhatbuf_r+0x2e>
 800b04e:	89a3      	ldrh	r3, [r4, #12]
 800b050:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b054:	f04f 0100 	mov.w	r1, #0
 800b058:	bf14      	ite	ne
 800b05a:	2340      	movne	r3, #64	@ 0x40
 800b05c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b060:	2000      	movs	r0, #0
 800b062:	6031      	str	r1, [r6, #0]
 800b064:	602b      	str	r3, [r5, #0]
 800b066:	b016      	add	sp, #88	@ 0x58
 800b068:	bd70      	pop	{r4, r5, r6, pc}
 800b06a:	466a      	mov	r2, sp
 800b06c:	f000 f848 	bl	800b100 <_fstat_r>
 800b070:	2800      	cmp	r0, #0
 800b072:	dbec      	blt.n	800b04e <__swhatbuf_r+0x12>
 800b074:	9901      	ldr	r1, [sp, #4]
 800b076:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b07a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b07e:	4259      	negs	r1, r3
 800b080:	4159      	adcs	r1, r3
 800b082:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b086:	e7eb      	b.n	800b060 <__swhatbuf_r+0x24>

0800b088 <__smakebuf_r>:
 800b088:	898b      	ldrh	r3, [r1, #12]
 800b08a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b08c:	079d      	lsls	r5, r3, #30
 800b08e:	4606      	mov	r6, r0
 800b090:	460c      	mov	r4, r1
 800b092:	d507      	bpl.n	800b0a4 <__smakebuf_r+0x1c>
 800b094:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b098:	6023      	str	r3, [r4, #0]
 800b09a:	6123      	str	r3, [r4, #16]
 800b09c:	2301      	movs	r3, #1
 800b09e:	6163      	str	r3, [r4, #20]
 800b0a0:	b003      	add	sp, #12
 800b0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0a4:	ab01      	add	r3, sp, #4
 800b0a6:	466a      	mov	r2, sp
 800b0a8:	f7ff ffc8 	bl	800b03c <__swhatbuf_r>
 800b0ac:	9f00      	ldr	r7, [sp, #0]
 800b0ae:	4605      	mov	r5, r0
 800b0b0:	4639      	mov	r1, r7
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	f7fd fbb8 	bl	8008828 <_malloc_r>
 800b0b8:	b948      	cbnz	r0, 800b0ce <__smakebuf_r+0x46>
 800b0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0be:	059a      	lsls	r2, r3, #22
 800b0c0:	d4ee      	bmi.n	800b0a0 <__smakebuf_r+0x18>
 800b0c2:	f023 0303 	bic.w	r3, r3, #3
 800b0c6:	f043 0302 	orr.w	r3, r3, #2
 800b0ca:	81a3      	strh	r3, [r4, #12]
 800b0cc:	e7e2      	b.n	800b094 <__smakebuf_r+0xc>
 800b0ce:	89a3      	ldrh	r3, [r4, #12]
 800b0d0:	6020      	str	r0, [r4, #0]
 800b0d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0d6:	81a3      	strh	r3, [r4, #12]
 800b0d8:	9b01      	ldr	r3, [sp, #4]
 800b0da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b0de:	b15b      	cbz	r3, 800b0f8 <__smakebuf_r+0x70>
 800b0e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	f000 f81d 	bl	800b124 <_isatty_r>
 800b0ea:	b128      	cbz	r0, 800b0f8 <__smakebuf_r+0x70>
 800b0ec:	89a3      	ldrh	r3, [r4, #12]
 800b0ee:	f023 0303 	bic.w	r3, r3, #3
 800b0f2:	f043 0301 	orr.w	r3, r3, #1
 800b0f6:	81a3      	strh	r3, [r4, #12]
 800b0f8:	89a3      	ldrh	r3, [r4, #12]
 800b0fa:	431d      	orrs	r5, r3
 800b0fc:	81a5      	strh	r5, [r4, #12]
 800b0fe:	e7cf      	b.n	800b0a0 <__smakebuf_r+0x18>

0800b100 <_fstat_r>:
 800b100:	b538      	push	{r3, r4, r5, lr}
 800b102:	4d07      	ldr	r5, [pc, #28]	@ (800b120 <_fstat_r+0x20>)
 800b104:	2300      	movs	r3, #0
 800b106:	4604      	mov	r4, r0
 800b108:	4608      	mov	r0, r1
 800b10a:	4611      	mov	r1, r2
 800b10c:	602b      	str	r3, [r5, #0]
 800b10e:	f7f6 fd47 	bl	8001ba0 <_fstat>
 800b112:	1c43      	adds	r3, r0, #1
 800b114:	d102      	bne.n	800b11c <_fstat_r+0x1c>
 800b116:	682b      	ldr	r3, [r5, #0]
 800b118:	b103      	cbz	r3, 800b11c <_fstat_r+0x1c>
 800b11a:	6023      	str	r3, [r4, #0]
 800b11c:	bd38      	pop	{r3, r4, r5, pc}
 800b11e:	bf00      	nop
 800b120:	200004a8 	.word	0x200004a8

0800b124 <_isatty_r>:
 800b124:	b538      	push	{r3, r4, r5, lr}
 800b126:	4d06      	ldr	r5, [pc, #24]	@ (800b140 <_isatty_r+0x1c>)
 800b128:	2300      	movs	r3, #0
 800b12a:	4604      	mov	r4, r0
 800b12c:	4608      	mov	r0, r1
 800b12e:	602b      	str	r3, [r5, #0]
 800b130:	f7f6 fd46 	bl	8001bc0 <_isatty>
 800b134:	1c43      	adds	r3, r0, #1
 800b136:	d102      	bne.n	800b13e <_isatty_r+0x1a>
 800b138:	682b      	ldr	r3, [r5, #0]
 800b13a:	b103      	cbz	r3, 800b13e <_isatty_r+0x1a>
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	bd38      	pop	{r3, r4, r5, pc}
 800b140:	200004a8 	.word	0x200004a8

0800b144 <_init>:
 800b144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b146:	bf00      	nop
 800b148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b14a:	bc08      	pop	{r3}
 800b14c:	469e      	mov	lr, r3
 800b14e:	4770      	bx	lr

0800b150 <_fini>:
 800b150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b152:	bf00      	nop
 800b154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b156:	bc08      	pop	{r3}
 800b158:	469e      	mov	lr, r3
 800b15a:	4770      	bx	lr
